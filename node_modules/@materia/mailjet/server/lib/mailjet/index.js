"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MailjetSender {
    constructor(app) {
        this.app = app;
        this.init();
    }
    get settingsHasChanged() {
        const mailjetConfig = this.app.addons && this.app.addons.addonsConfig ? this.app.addons.addonsConfig['@materia/mailjet'] : {};
        const { apikey, secret, from, name } = mailjetConfig;
        return apikey !== MailjetSender.apikey ||
            secret !== MailjetSender.secret ||
            from !== MailjetSender.from ||
            name !== MailjetSender.fromName;
    }
    reload() {
        if (this.settingsHasChanged) {
            this.init();
        }
    }
    init() {
        if (this.app.addons && this.app.addons.addonsConfig) {
            const { apikey, secret, from, name } = this.app.addons.addonsConfig['@materia/mailjet'];
            if (apikey && secret && from && name) {
                this.connect(apikey, secret);
                MailjetSender.from = from;
                MailjetSender.fromName = name;
                MailjetSender.apikey = apikey;
                MailjetSender.secret = secret;
            }
        }
    }
    connect(key, secret) {
        this.mailjet = require('node-mailjet').connect(key, secret);
    }
    send(params) {
        const recipient = { 'Email': params.to };
        const sendEmail = this.mailjet.post('send');
        if (params.variables) {
            const isString = typeof params.variables === 'string';
            recipient.Vars = isString ? JSON.parse(params.variables) : params.variables;
        }
        const emailData = {
            'FromEmail': MailjetSender.from,
            'Subject': params.subject,
            'Text-part': params.body,
            'Recipients': [recipient],
            'Mj-TemplateLanguage': true
        };
        if (params.error_reporting) {
            emailData['Mj-TemplateErrorReporting'] = params.error_reporting_email ? params.error_reporting_email : emailData['FromEmail'];
        }
        if (params.body_html) {
            emailData['Html-part'] = params.body_html;
        }
        if (MailjetSender.fromName) {
            emailData['FromName'] = MailjetSender.fromName;
        }
        return sendEmail.request(emailData);
    }
    sendTemplate(params) {
        const recipient = { 'Email': params.to };
        if (params.variables) {
            const isString = typeof params.variables === 'string';
            recipient.Vars = isString ? JSON.parse(params.variables) : params.variables;
        }
        const sendTemplateById = this.mailjet.post('send');
        const emailData = {
            'FromEmail': params.fromEmail ? params.fromEmail : MailjetSender.from,
            'FromName': params.from ? params.from : MailjetSender.fromName,
            'Subject': params.subject,
            'Recipients': [recipient],
            'Mj-TemplateID': params.templateId,
            'Mj-TemplateLanguage': true
        };
        if (params.error_reporting) {
            emailData['Mj-TemplateErrorReporting'] = params.error_reporting_email ? params.error_reporting_email : emailData['FromEmail'];
        }
        return sendTemplateById.request(emailData);
    }
}
exports.MailjetSender = MailjetSender;
//# sourceMappingURL=index.js.map