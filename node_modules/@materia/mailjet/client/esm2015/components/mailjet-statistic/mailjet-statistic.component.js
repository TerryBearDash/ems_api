/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
export class MailjetStatisticComponent {
    constructor() {
        this.counts = {
            sent: 0,
            opened: 0,
            clicked: 0,
            spam: 0,
            bounced: 0,
            blocked: 0
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes && this.data) {
            /** @type {?} */
            const data = this.data;
            data.forEach((/**
             * @param {?} d
             * @return {?}
             */
            d => {
                if (d.data && d.data.length) {
                    /** @type {?} */
                    let count = this.counts[d.name.toLowerCase()] = 0;
                    d.data.forEach((/**
                     * @param {?} value
                     * @return {?}
                     */
                    value => {
                        count = count + value;
                    }));
                    this.counts[d.name.toLowerCase()] = count;
                }
            }));
            this.legend = this.data.map((/**
             * @param {?} d
             * @return {?}
             */
            d => d.name));
            this.chartOptions = Object.assign({}, {
                legend: {
                    top: 'top',
                    left: 'center',
                    data: this.legend
                },
                grid: {
                    left: '3%',
                    right: '3%',
                    bottom: '1%',
                    containLabel: true
                },
                tooltip: {
                    trigger: 'axis'
                },
                xAxis: {
                    boundaryGap: false,
                    type: 'category',
                    data: this.xAbsis
                },
                yAxis: {
                    type: 'value'
                },
                series: this.data
            });
        }
    }
}
MailjetStatisticComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-statistic',
                template: "<div fxFlex fxLayout=\"row\" *ngIf=\"! loading && data && data.length\">\r\n  <div fxLayout=\"column\" fxLayoutAlign=\"start center\" style=\"padding: 5px 24px; overflow: auto;\">\r\n    <mailjet-stats-counter backgroundColor=\"#2196F3\" width=\"80\" height=\"60\" color=\"white\" label=\"Sent\" [count]=\"counts['sent']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"#4CAF50\" width=\"80\" height=\"60\" color=\"white\" label=\"Opened\" [count]=\"counts['opened']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"#8BC34A\" width=\"80\" height=\"60\" color=\"white\" label=\"Clicked\" [count]=\"counts['clicked']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"#FFC107\" width=\"80\" height=\"60\" color=\"white\" label=\"Spam\" [count]=\"counts['spam']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"#F44336\" width=\"80\" height=\"60\" color=\"white\" label=\"Bounce\" [count]=\"counts['bounce']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"black\" width=\"80\" height=\"60\" color=\"white\" label=\"Blocked\" [count]=\"counts['blocked']\"></mailjet-stats-counter>\r\n  </div>\r\n  <div fxFlex fxLayout=\"column\" class=\"chart-section\">\r\n    <div class=\"chart-container\">\r\n      <div *ngIf=\"xAbsis && data\" style=\"height: 100%; width: 100%;\" echarts\r\n        [options]=\"chartOptions\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"loading\">\r\n  <mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\r\n</div>\r\n<div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\" ! loading && data && ! data.length\">\r\n  <p>No statistics for this period</p>\r\n</div>\r\n",
                styles: [":host{display:flex;width:100%;flex:1}.chart-section{position:relative}.chart-container{position:absolute;top:0;bottom:15px;left:24px;right:24px;display:flex}"]
            }] }
];
/** @nocollapse */
MailjetStatisticComponent.ctorParameters = () => [];
MailjetStatisticComponent.propDecorators = {
    data: [{ type: Input }],
    loading: [{ type: Input }],
    expanded: [{ type: Input }],
    xAbsis: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MailjetStatisticComponent.prototype.data;
    /** @type {?} */
    MailjetStatisticComponent.prototype.loading;
    /** @type {?} */
    MailjetStatisticComponent.prototype.expanded;
    /** @type {?} */
    MailjetStatisticComponent.prototype.xAbsis;
    /** @type {?} */
    MailjetStatisticComponent.prototype.counts;
    /** @type {?} */
    MailjetStatisticComponent.prototype.legend;
    /** @type {?} */
    MailjetStatisticComponent.prototype.chartOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbGpldC1zdGF0aXN0aWMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG1hdGVyaWEvbWFpbGpldC8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvbWFpbGpldC1zdGF0aXN0aWMvbWFpbGpldC1zdGF0aXN0aWMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQU81RCxNQUFNLE9BQU8seUJBQXlCO0lBaUJwQztRQVhBLFdBQU0sR0FBUTtZQUNaLElBQUksRUFBRSxDQUFDO1lBQ1AsTUFBTSxFQUFFLENBQUM7WUFDVCxPQUFPLEVBQUUsQ0FBQztZQUNWLElBQUksRUFBRSxDQUFDO1lBQ1AsT0FBTyxFQUFFLENBQUM7WUFDVixPQUFPLEVBQUUsQ0FBQztTQUNYLENBQUM7SUFJZSxDQUFDOzs7OztJQUVsQixXQUFXLENBQUMsT0FBTztRQUNqQixJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFOztrQkFDbEIsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ3RCLElBQUksQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFOzt3QkFDdkIsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUM7b0JBQ2pELENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTzs7OztvQkFBQyxLQUFLLENBQUMsRUFBRTt3QkFDckIsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7b0JBQ3hCLENBQUMsRUFBQyxDQUFDO29CQUNILElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztpQkFDM0M7WUFDSCxDQUFDLEVBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtnQkFDcEMsTUFBTSxFQUFFO29CQUNOLEdBQUcsRUFBRSxLQUFLO29CQUNWLElBQUksRUFBRSxRQUFRO29CQUNkLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtpQkFDbEI7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxJQUFJO29CQUNWLEtBQUssRUFBRSxJQUFJO29CQUNYLE1BQU0sRUFBRSxJQUFJO29CQUNaLFlBQVksRUFBRSxJQUFJO2lCQUNyQjtnQkFDQyxPQUFPLEVBQUU7b0JBQ1AsT0FBTyxFQUFFLE1BQU07aUJBQ2hCO2dCQUNELEtBQUssRUFBRTtvQkFDTCxXQUFXLEVBQUUsS0FBSztvQkFDbEIsSUFBSSxFQUFFLFVBQVU7b0JBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtpQkFDbEI7Z0JBQ0QsS0FBSyxFQUFFO29CQUNMLElBQUksRUFBRSxPQUFPO2lCQUNkO2dCQUNELE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSTthQUNsQixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7OztZQS9ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsK3lEQUFpRDs7YUFFbEQ7Ozs7O21CQUVFLEtBQUs7c0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3FCQUNMLEtBQUs7Ozs7SUFITix5Q0FBNkU7O0lBQzdFLDRDQUEwQjs7SUFDMUIsNkNBQTJCOztJQUMzQiwyQ0FBMEI7O0lBRTFCLDJDQU9FOztJQUNGLDJDQUFpQjs7SUFDakIsaURBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ21haWxqZXQtc3RhdGlzdGljJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbWFpbGpldC1zdGF0aXN0aWMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL21haWxqZXQtc3RhdGlzdGljLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIE1haWxqZXRTdGF0aXN0aWNDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIGRhdGE6IHtuYW1lOiBzdHJpbmcsIGRhdGE6IG51bWJlcltdLCB0eXBlOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmd9W107XHJcbiAgQElucHV0KCkgbG9hZGluZzogYm9vbGVhbjtcclxuICBASW5wdXQoKSBleHBhbmRlZDogYm9vbGVhbjtcclxuICBASW5wdXQoKSB4QWJzaXM6IHN0cmluZ1tdO1xyXG5cclxuICBjb3VudHM6IGFueSA9IHtcclxuICAgIHNlbnQ6IDAsXHJcbiAgICBvcGVuZWQ6IDAsXHJcbiAgICBjbGlja2VkOiAwLFxyXG4gICAgc3BhbTogMCxcclxuICAgIGJvdW5jZWQ6IDAsXHJcbiAgICBibG9ja2VkOiAwXHJcbiAgfTtcclxuICBsZWdlbmQ6IHN0cmluZ1tdO1xyXG4gIGNoYXJ0T3B0aW9uczogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvciggKSB7IH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMgJiYgdGhpcy5kYXRhKSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgIGRhdGEuZm9yRWFjaChkID0+IHtcclxuICAgICAgICBpZiAoZC5kYXRhICYmIGQuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgIGxldCBjb3VudCA9IHRoaXMuY291bnRzW2QubmFtZS50b0xvd2VyQ2FzZSgpXSA9IDA7XHJcbiAgICAgICAgICBkLmRhdGEuZm9yRWFjaCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyB2YWx1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy5jb3VudHNbZC5uYW1lLnRvTG93ZXJDYXNlKCldID0gY291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5sZWdlbmQgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5uYW1lKTtcclxuICAgICAgdGhpcy5jaGFydE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XHJcbiAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICB0b3A6ICd0b3AnLFxyXG4gICAgICAgICAgbGVmdDogJ2NlbnRlcicsXHJcbiAgICAgICAgICBkYXRhOiB0aGlzLmxlZ2VuZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgbGVmdDogJzMlJyxcclxuICAgICAgICAgIHJpZ2h0OiAnMyUnLFxyXG4gICAgICAgICAgYm90dG9tOiAnMSUnLFxyXG4gICAgICAgICAgY29udGFpbkxhYmVsOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgdHJpZ2dlcjogJ2F4aXMnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB4QXhpczoge1xyXG4gICAgICAgICAgYm91bmRhcnlHYXA6IGZhbHNlLFxyXG4gICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcclxuICAgICAgICAgIGRhdGE6IHRoaXMueEFic2lzXHJcbiAgICAgICAgfSxcclxuICAgICAgICB5QXhpczoge1xyXG4gICAgICAgICAgdHlwZTogJ3ZhbHVlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VyaWVzOiB0aGlzLmRhdGFcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==