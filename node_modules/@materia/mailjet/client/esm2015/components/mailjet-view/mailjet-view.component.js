/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MatDialog } from '@angular/material';
import { DatePipe } from '@angular/common';
import { AddonView } from '@materia/addons';
import { TemplateEditorComponent } from '../../dialogs/template-editor/template-editor.component';
import { SendModalComponent } from '../../dialogs/send-modal/send-modal.component';
let MailjetViewComponent = class MailjetViewComponent {
    /**
     * @param {?} http
     * @param {?} dialog
     * @param {?} datePipe
     */
    constructor(http, dialog, datePipe) {
        this.http = http;
        this.dialog = dialog;
        this.datePipe = datePipe;
        this.openSetup = new EventEmitter();
        this.openInBrowser = new EventEmitter();
        this.snackbarSuccess = new EventEmitter();
        this.snackbarError = new EventEmitter();
        this.emails = [];
        this.stats = {};
        this.statusColors = {
            sent: '#2196F3',
            opened: '#4CAF50',
            clicked: '#8BC34A',
            spam: '#FFC107',
            bounce: '#F44336',
            blocked: 'black'
        };
        this.loadingError = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.statsExpanded = true;
        if (this.settings.secret && this.settings.apikey) {
            this.statsProcessing = true;
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    openSendDialog(type) {
        this.sendSubject = '[TEST] Subject';
        this.sendType = type;
        this.sendModalComponent.refreshForm(type);
        this.sendDialogRef = this.dialog.open(this.sendModalComponent.template, {
            panelClass: 'no-padding'
        });
    }
    /**
     * @param {?} mail
     * @return {?}
     */
    openSendToDialog(mail) {
        this.sendSubject = '[TEST] Subject';
        this.sendTo = mail;
        this.sendType = 'simple';
        this.sendModalComponent.refreshForm();
        this.sendDialogRef = this.dialog.open(this.sendModalComponent.template, {
            panelClass: 'no-padding'
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    send(data) {
        if (data.type === 'simple') {
            this._sendSimpleMessage(data);
        }
        else {
            this._sendTemplateMessage(data);
        }
    }
    /**
     * @return {?}
     */
    closeSendDialog() {
        this.sendDialogRef.close();
    }
    /**
     * @param {?} timeline
     * @return {?}
     */
    statsTimelineChange(timeline) {
        if (timeline && timeline === 'lastWeek' || timeline === 'lastMonth') {
            this.init(timeline);
        }
    }
    /**
     * @return {?}
     */
    reload() {
        this.stats = {};
        this.init('lastWeek');
    }
    /**
     * @param {?} timeline
     * @return {?}
     */
    init(timeline) {
        /** @type {?} */
        const fromTimestamp = this._getTimeline(timeline);
        this.statsProcessing = true;
        this.loadingError = false;
        return this.getStats({ FromTS: fromTimestamp })
            .then((/**
         * @param {?} stats
         * @return {?}
         */
        stats => {
            if (stats && stats.length) {
                stats = this._fillStats(stats, fromTimestamp);
                this.data = [
                    this.getSerie('MessageSentCount', 'Sent', stats),
                    this.getSerie('MessageOpenedCount', 'Opened', stats),
                    this.getSerie('MessageClickedCount', 'Clicked', stats),
                    this.getSerie('MessageSpamCount', 'Spam', stats),
                    this.getSerie('MessageHardBouncedCount', 'Bounce', stats),
                    this.getSerie('MessageBlockedCount', 'Blocked', stats)
                ];
                this.stats[timeline] = this.data;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.statsProcessing = false;
                }), 1000);
            }
            else {
                this.data = [];
                this.statsProcessing = false;
            }
            return this.runQuery('mailjet_message', 'list', {
                FromTS: fromTimestamp,
                limit: 100
            });
        }))
            .then((/**
         * @param {?} messagesResponse
         * @return {?}
         */
        (messagesResponse) => {
            this.emails = [...messagesResponse.data.reverse()];
            this.nbEmails = messagesResponse.count;
            return this.runQuery('mailjet_contact', 'list', {
                FromTS: fromTimestamp,
                limit: 100
            });
        }))
            .then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.contacts = result.data;
            return this.getMailjetUser();
        }))
            .then((/**
         * @return {?}
         */
        () => {
            this.loadTemplates();
        }))
            .catch((/**
         * @param {?} _
         * @return {?}
         */
        _ => {
            this.loadingError = true;
            this.statsProcessing = false;
        }));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    openMailjetTemplateEditor(template) {
        this.openInBrowser.emit(`https://app.mailjet.com/template/${template.ID}/${template.EditMode === 1 ? 'build' : 'html'}`);
    }
    /**
     * @param {?} newTemplate
     * @return {?}
     */
    openTemplateEditor(newTemplate) {
        this.newTemplate = newTemplate;
        this.templateEditor.refreshTemplateForm();
        this.templateDialogRef = this.dialog.open(this.templateEditor.template, {
            panelClass: 'no-padding'
        });
    }
    /**
     * @return {?}
     */
    closeTemplateEditor() {
        this.templateDialogRef.close();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    saveTemplate(data) {
        if (this.newTemplate) {
            this._createNewTemplate(data);
        }
    }
    /**
     * @return {?}
     */
    loadTemplates() {
        Promise.all([
            this.runQuery('mailjet_template', 'findAll', {
                OwnerType: 'user',
                Limit: 100
            }),
            this.runQuery('mailjet_template', 'findAll', {
                OwnerType: 'apikey',
                Limit: 100
            })
        ]).then((/**
         * @param {?} __0
         * @return {?}
         */
        ([templateResult1, templateResult2]) => {
            this.templates = [...templateResult1.data, ...templateResult2.data];
        }));
    }
    /**
     * @return {?}
     */
    openMailjetSignup() {
        this.openInBrowser.emit('https://app.mailjet.com/signup');
    }
    /**
     * @return {?}
     */
    openMailjetApikeyPage() {
        this.openInBrowser.emit('https://app.mailjet.com/account/api_keys');
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    _createNewTemplate(data) {
        this.runQuery('mailjet_template', 'create', {
            Name: data.name,
            Author: data.author,
            Purposes: data.templateType,
            Locale: this.mailjetUser.Locale
        }).then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const newTemplate = result.data[0];
            this.runQuery('mailjet_template', 'updateContent', {
                ID: newTemplate.ID,
                'Html-part': `<html>
      <body>
        <h1 style="text-align: center; font-weight: 300; color: #0D47A1; margin: 20px;">
          Template generated via Materia Designer
        </h1>
        <p style=" font-size: 10px; margin-top: 50px; margin-left: 10px;">
          This email was sent to [[EMAIL_TO]],
          <a style="text-decoration: none; color: inherit" href="[[UNSUB_LINK_${this.mailjetUser.Locale.split('_')[1]}]]" target="_blank">
          click here to unsubscribe
          </a>.
        </p>
      </body>
    </html>`,
                Headers: {
                    From: `${this.settings.name} <${this.settings.from}>`,
                    Subject: 'Subject',
                    'Reply-To': this.settings.from
                }
            }).then((/**
             * @param {?} _
             * @return {?}
             */
            _ => {
                this.templateDialogRef.close();
                this.loadTemplates();
                this.openMailjetTemplateEditor(newTemplate);
            }));
        }));
    }
    /**
     * @private
     * @param {?} stats
     * @param {?} fromTs
     * @return {?}
     */
    _fillStats(stats, fromTs) {
        /** @type {?} */
        const timeUnits = this._getTimeUnits(fromTs);
        this.timeUnits = timeUnits.map((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            return this.datePipe.transform(d, 'shortDate');
        }));
        /** @type {?} */
        const newStats = [];
        timeUnits.forEach((/**
         * @param {?} timeUnit
         * @return {?}
         */
        timeUnit => {
            /** @type {?} */
            let match = false;
            stats.forEach((/**
             * @param {?} stat
             * @return {?}
             */
            stat => {
                /** @type {?} */
                const timeUnitDate = new Date(timeUnit);
                timeUnitDate.setHours(0, 0, 0, 0);
                /** @type {?} */
                const statDate = new Date(stat.Timeslice);
                statDate.setHours(0, 0, 0, 0);
                if (timeUnitDate.toISOString() === statDate.toISOString()) {
                    match = true;
                    newStats.push(stat);
                }
            }));
            if (!match) {
                newStats.push({
                    MessageSentCount: 0,
                    MessageSpamCount: 0,
                    MessageOpenedCount: 0,
                    MessageClickedCount: 0,
                    MessageHardBouncedCount: 0,
                    MessageBlockedCount: 0,
                    Timeslice: timeUnit
                });
            }
        }));
        return newStats;
    }
    /**
     * @private
     * @param {?} fromTs
     * @return {?}
     */
    _getTimeUnits(fromTs) {
        /** @type {?} */
        const firstDate = new Date(fromTs);
        /** @type {?} */
        const lastDate = new Date();
        /** @type {?} */
        const timeUnits = [];
        /** @type {?} */
        const daysInterval = (lastDate.getTime() - firstDate.getTime()) / (60 * 60 * 24 * 1000);
        for (let i = 0; i < daysInterval; i++) {
            /** @type {?} */
            const currentDate = new Date(fromTs);
            currentDate.setDate(firstDate.getDate() + i);
            timeUnits.push(currentDate.toISOString());
        }
        return timeUnits;
    }
    /**
     * @private
     * @param {?} timeline
     * @return {?}
     */
    _getTimeline(timeline) {
        if (timeline === 'lastWeek') {
            /** @type {?} */
            const lastweek = new Date();
            lastweek.setDate(new Date().getDate() - 7);
            return lastweek.toISOString();
        }
        else if (timeline === 'lastMonth') {
            /** @type {?} */
            const lastmonth = new Date();
            lastmonth.setMonth(new Date().getMonth() - 1);
            return lastmonth.toISOString();
        }
        else if (timeline === 'last3Month') {
            /** @type {?} */
            const last3month = new Date();
            last3month.setMonth(new Date().getMonth() - 3);
            return last3month.toISOString();
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    _sendSimpleMessage(data) {
        this.runQuery('mailjet_message', 'send', {
            subject: data.subject,
            body: data.body,
            to: data.to,
            error_reporting: true
        })
            .then((/**
         * @return {?}
         */
        () => {
            this.sendDialogRef.close();
            this.snackbarSuccess.emit('Email successfully send');
            this.reload();
        }))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => this.snackbarError.emit(err)));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    _sendTemplateMessage(data) {
        /** @type {?} */
        const variables = {};
        data.variables.forEach((/**
         * @param {?} variable
         * @return {?}
         */
        (variable) => variables[variable.name] = variable.value));
        this.runQuery('mailjet_message', 'sendTemplate', {
            templateId: data.template,
            subject: data.subject,
            to: data.to,
            variables: Object.keys(variables).length ? variables : null,
            error_reporting: true
        })
            .then((/**
         * @return {?}
         */
        () => {
            this.sendDialogRef.close();
            this.snackbarSuccess.emit('Email successfully send');
            this.reload();
        }))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => this.snackbarError.emit(err)));
    }
    /**
     * @private
     * @param {?} entity
     * @param {?} query
     * @param {?=} params
     * @return {?}
     */
    runQuery(entity, query, params) {
        return this.http
            .post(`${this.baseUrl}/entities/${entity}/queries/${query}`, params)
            .toPromise();
    }
    /**
     * @private
     * @return {?}
     */
    getMailjetUser() {
        return this.runQuery('mailjet_user', 'list').then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.mailjetUser = result.data[0];
            return this.mailjetUser;
        }));
    }
    /**
     * @private
     * @param {?=} params
     * @return {?}
     */
    getStats(params) {
        /** @type {?} */
        const queryParams = params
            ? Object.assign({}, params, {
                CounterResolution: 'Day',
                CounterTiming: 'Message',
                CounterSource: 'APIKey'
            })
            : {
                CounterResolution: 'Day',
                CounterTiming: 'Message',
                CounterSource: 'APIKey'
            };
        return this.runQuery('mailjet_statistic', 'find', queryParams).then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => result.data));
    }
    /**
     * @private
     * @param {?} name
     * @param {?} displayName
     * @param {?} data
     * @return {?}
     */
    getSerie(name, displayName, data) {
        /** @type {?} */
        const series = [];
        data.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => {
            series.push(row[name]);
        }));
        return {
            name: displayName,
            data: series,
            type: 'line',
            color: this.statusColors[displayName.toLowerCase()]
        };
    }
};
MailjetViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-view',
                template: "<div fxLayout=\"column\" fxFlex>\r\n  <mat-card fxFlex fxLayout=\"column\">\r\n    <mailjet-header\r\n      [settings]=\"settings\"\r\n      [error]=\"loadingError\"\r\n      (sendDialogOpened)=\"openSendDialog('simple')\"\r\n      (settingsOpened)=\"openSetup.emit()\"\r\n      (timelineChanged)=\"statsTimelineChange($event)\">\r\n    </mailjet-header>\r\n    <mat-divider></mat-divider>\r\n    <div fxFlex fxLayout=\"column\">\r\n      <mat-card-content fxFlex fxLayout=\"column\">\r\n        <ng-container *ngIf=\"settings && settings.from && settings.apikey; else noSettingsTemplate\">\r\n          <ng-container *ngIf=\"! loadingError; else loadingErrorTemplate\">\r\n          <mat-accordion fxFlex fxLayout=\"column\">\r\n            <mat-expansion-panel #stats [expanded]=\"statsExpanded\" (opened)=\"statsExpanded = true\" (closed)=\"statsExpanded = false\" [ngClass]=\"{'flexed': statsExpanded}\">\r\n              <mat-expansion-panel-header>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                  <mat-icon style=\"margin-right: 10px;\">timeline</mat-icon>\r\n                  <h2>Statistics</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <div fxFlex fxLayout=\"row\">\r\n                <mailjet-statistic [data]=\"data\" [xAbsis]=\"timeUnits\" [expanded]=\"statsExpanded\" [loading]=\"statsProcessing\"></mailjet-statistic>\r\n              </div>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)=\"emailsExpanded = true\" (closed)=\"emailsExpanded = false\" [ngClass]=\"{'flexed': emailsExpanded}\">\r\n              <mat-expansion-panel-header fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                  <mat-icon style=\"margin-right: 10px;\">email</mat-icon>\r\n                  <h2 [matBadge]=\"nbEmails || 0\" matBadgeOverlap=\"false\">Emails sent</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n                <mat-list *ngIf=\"emails && emails.length\">\r\n                  <mat-list-item class=\"list-title\">\r\n                    <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                      <span fxFlex>Email</span>\r\n                      <span fxFlex fxLayout=\"row\" style=\"margin-left: 10px;\">ArrivedAt\r\n                      </span>\r\n                      <span fxFlex>Subject\r\n                      </span>\r\n                      <span>Status\r\n                      </span>\r\n                    </div>\r\n                  </mat-list-item>\r\n                  <mat-list-item *ngFor=\"let email of emails\">\r\n                    <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                      <span fxFlex>{{ email.ContactAlt }}</span>\r\n                      <span fxFlex fxLayout=\"row\" style=\"margin-left: 10px;\">\r\n                        {{ email.ArrivedAt | date:'medium' }}\r\n                      </span>\r\n                      <span fxFlex>{{ email.Subject }}\r\n                      </span>\r\n                      <span fxLayout=\"row\" [style.color]=\"statusColors[email.Status]\" style=\"font-weight: bold;\">{{ email.Status }}</span>\r\n                    </div>\r\n                    <mat-divider></mat-divider>\r\n                  </mat-list-item>\r\n                </mat-list>\r\n                <div *ngIf=\"emails && emails.length == 0\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                  <p style=\"margin-bottom: 15px;\">\r\n                    <strong>No email has been sent during this period</strong>\r\n                  </p>\r\n                  <button mat-button color=\"primary\" (click)=\"openSendDialog('simple')\">Send a test email now</button>\r\n                </div>\r\n              </ng-template>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)=\"contactsExpanded = true\" (closed)=\"contactsExpanded = false\" [ngClass]=\"{'flexed': contactsExpanded}\">\r\n              <mat-expansion-panel-header fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                  <mat-icon style=\"margin-right: 10px;\">contact_mail</mat-icon>\r\n                  <h2 [matBadge]=\"contacts?.length || 0\" matBadgeOverlap=\"false\">Contacts</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n              <mat-list *ngIf=\"contacts && contacts.length\">\r\n                <mat-list-item class=\"list-title\">\r\n                    <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                        <span fxFlex>Email</span>\r\n                        <span fxFlex>CreatedAt\r\n                        </span>\r\n                        <span style=\"width: 50px;\">\r\n                        </span>\r\n                    </div>\r\n                </mat-list-item>\r\n                <mat-list-item *ngFor=\"let contact of contacts\">\r\n                  <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                    <span fxFlex>{{ contact.Email }}</span>\r\n                    <span fxFlex>{{ contact.CreatedAt | date }}\r\n                    </span>\r\n                    <button mat-icon-button>\r\n                      <mat-icon matTooltip=\"Send an email\" (click)=\"openSendToDialog(contact.Email)\">send</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                  <mat-divider></mat-divider>\r\n                </mat-list-item>\r\n              </mat-list>\r\n            </ng-template>\r\n            <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"contacts && !contacts.length\">\r\n              <span>You haven't any contacts yet</span>\r\n            </div>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)=\"templatesExpanded = true\" (closed)=\"templatesExpanded = false\" [ngClass]=\"{'flexed': templatesExpanded}\">\r\n              <mat-expansion-panel-header fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                  <mat-icon style=\"margin-right: 10px;\">chrome_reader_mode</mat-icon>\r\n                  <h2 [matBadge]=\"templates?.length || 0\" matBadgeOverlap=\"false\">Templates</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n              <mat-list *ngIf=\"templates && templates.length\">\r\n                <mat-list-item class=\"list-title\">\r\n                    <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                        <span fxFlex>Name</span>\r\n                        <span fxFlex>Author\r\n                        </span>\r\n                        <span fxFlex>CreatedAt\r\n                        </span>\r\n                        <span style=\"width: 100px;\">\r\n                          <button mat-mini-fab *ngIf=\"templatesExpanded\" style=\"margin: 5px;\" matTooltip=\"New template\">\r\n                            <mat-icon (click)=\"openTemplateEditor(true)\">\r\n                              add\r\n                            </mat-icon>\r\n                          </button>\r\n                        </span>\r\n                    </div>\r\n                </mat-list-item>\r\n                <mat-divider></mat-divider>\r\n                <mat-list-item *ngFor=\"let template of templates\">\r\n                  <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                    <span fxFlex>{{ template.Name }}</span>\r\n                    <span fxFlex>{{ template.Author }}\r\n                    </span>\r\n                    <span fxFlex>{{ template.CreatedAt | date }}\r\n                    </span>\r\n                    <button mat-icon-button>\r\n                        <mat-icon matTooltip=\"Send\" (click)=\"openSendDialog('template'); templateSelected = template.ID;\">send</mat-icon>\r\n                      </button>\r\n                    <button mat-icon-button>\r\n                      <mat-icon matTooltip=\"Edit\" (click)=\"openMailjetTemplateEditor(template)\">edit</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                  <mat-divider></mat-divider>\r\n                </mat-list-item>\r\n              </mat-list>\r\n              <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"! templates || (templates && ! templates.length)\">\r\n                <p style=\"margin-bottom: 15px;\">\r\n                  <strong>You haven't created any template yet</strong>\r\n                </p>\r\n                <button mat-button color=\"primary\" (click)=\"openTemplateEditor(true)\">\r\n                  Create my first template\r\n                </button>\r\n              </div>\r\n              </ng-template>\r\n            </mat-expansion-panel>\r\n          </mat-accordion>\r\n        </ng-container>\r\n      </ng-container>\r\n      </mat-card-content>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n<mailjet-template-editor [edition]=\"!newTemplate\" [user]=\"mailjetUser\" [settings]=\"settings\" (confirmed)=\"saveTemplate($event)\" (cancelled)=\"closeTemplateEditor()\">\r\n</mailjet-template-editor>\r\n<mailjet-send-modal [templates]=\"templates\" [templateId]=\"templateSelected\" [to]=\"sendTo\" [subject]=\"sendSubject\" [type]=\"sendType\" (cancelled)=\"closeSendDialog()\" (confirmed)=\"send($event)\"></mailjet-send-modal>\r\n<ng-template #loadingErrorTemplate>\r\n\t<mat-card-content fxLayout=\"column\" fxFlex fxLayoutAlign=\"center center\" [style.margin]=\"'50px'\" [style.background]=\"'#F44336'\" [style.color]=\"'white'\">\r\n\t\t<span style=\"font-size: 15px; margin: 10px;\">\r\n\t\t\tThere was a problem loading your mailjet account...\r\n\t\t</span>\r\n\t\t<span style=\"font-size: 15px; margin: 10px;\">\r\n\t\t\tThis is probably an error in your mailjet settings:\r\n\t\t</span>\r\n\t\t<button mat-raised-button (click)=\"openSetup.emit()\">OPEN SETTINGS</button>\r\n\t</mat-card-content>\r\n</ng-template>\r\n<ng-template #noSettingsTemplate>\r\n  <mat-card-content fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"! settings || ! settings.from || ! settings.apikey\" style=\"padding: 15px;\">\r\n    <p>You need a Mailjet account to use this addon.</p>\r\n    <button mat-raised-button (click)=\"openMailjetSignup()\" class=\"mailjet-button\">SIGNUP TO MAILJET</button>\r\n    <p style=\"margin-top: 45px;\">Already have a Mailjet account ? Please fill the settings with your <span class=\"link\" (click)=\"openInBrowser.emit('https://app.mailjet.com/account/api_keys')\">Mailjet API keys</span>:</p>\r\n    <button mat-raised-button (click)=\"openSetup.emit()\" class=\"mailjet-button\">ADDON SETTINGS</button>\r\n  </mat-card-content>\r\n</ng-template>\r\n",
                styles: [":host{flex:1 1 0;display:flex;height:100%}:host::ng-deep .mat-expansion-panel-content{display:flex;flex:1;flex-direction:column}:host::ng-deep .mat-expansion-panel-body{display:flex;flex-direction:column;flex:1;overflow-y:auto;overflow-x:hidden}:host::ng-deep mat-list{margin:0 24px}:host::ng-deep .mat-badge-content{color:#fff;background:#ffa726}.mailjet-button{color:#fff;background:#ffa726}.link{text-decoration:underline;cursor:pointer;color:#ffa726}mat-expansion-panel{width:100%;min-height:48px}mat-card{margin:8px;padding:0}mat-card mat-divider{position:relative}mat-card button{margin:0 5px}mat-card-content{overflow:hidden;margin:0}.list-title{font-weight:500;background:#fafafa}.flexed{flex:1;display:flex;flex-direction:column}.settings-link{cursor:pointer;text-decoration:underline}.template-actions{padding:0 24px;min-height:40px}"]
            }] }
];
/** @nocollapse */
MailjetViewComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: MatDialog },
    { type: DatePipe }
];
MailjetViewComponent.propDecorators = {
    app: [{ type: Input }],
    settings: [{ type: Input }],
    baseUrl: [{ type: Input }],
    openSetup: [{ type: Output }],
    openInBrowser: [{ type: Output }],
    snackbarSuccess: [{ type: Output }],
    snackbarError: [{ type: Output }],
    templateEditor: [{ type: ViewChild, args: [TemplateEditorComponent,] }],
    sendModalComponent: [{ type: ViewChild, args: [SendModalComponent,] }]
};
MailjetViewComponent = tslib_1.__decorate([
    AddonView('@materia/mailjet'),
    tslib_1.__metadata("design:paramtypes", [HttpClient,
        MatDialog,
        DatePipe])
], MailjetViewComponent);
export { MailjetViewComponent };
if (false) {
    /** @type {?} */
    MailjetViewComponent.prototype.app;
    /** @type {?} */
    MailjetViewComponent.prototype.settings;
    /** @type {?} */
    MailjetViewComponent.prototype.baseUrl;
    /** @type {?} */
    MailjetViewComponent.prototype.openSetup;
    /** @type {?} */
    MailjetViewComponent.prototype.openInBrowser;
    /** @type {?} */
    MailjetViewComponent.prototype.snackbarSuccess;
    /** @type {?} */
    MailjetViewComponent.prototype.snackbarError;
    /** @type {?} */
    MailjetViewComponent.prototype.templateEditor;
    /** @type {?} */
    MailjetViewComponent.prototype.sendModalComponent;
    /** @type {?} */
    MailjetViewComponent.prototype.nbEmails;
    /** @type {?} */
    MailjetViewComponent.prototype.emails;
    /** @type {?} */
    MailjetViewComponent.prototype.contacts;
    /** @type {?} */
    MailjetViewComponent.prototype.templates;
    /** @type {?} */
    MailjetViewComponent.prototype.sendTo;
    /** @type {?} */
    MailjetViewComponent.prototype.sendSubject;
    /** @type {?} */
    MailjetViewComponent.prototype.sendType;
    /** @type {?} */
    MailjetViewComponent.prototype.templateSelected;
    /** @type {?} */
    MailjetViewComponent.prototype.sendDialogRef;
    /** @type {?} */
    MailjetViewComponent.prototype.templateDialogRef;
    /** @type {?} */
    MailjetViewComponent.prototype.newTemplate;
    /** @type {?} */
    MailjetViewComponent.prototype.data;
    /** @type {?} */
    MailjetViewComponent.prototype.stats;
    /** @type {?} */
    MailjetViewComponent.prototype.mailjetUser;
    /** @type {?} */
    MailjetViewComponent.prototype.statusColors;
    /** @type {?} */
    MailjetViewComponent.prototype.statsExpanded;
    /** @type {?} */
    MailjetViewComponent.prototype.contactsExpanded;
    /** @type {?} */
    MailjetViewComponent.prototype.templatesExpanded;
    /** @type {?} */
    MailjetViewComponent.prototype.emailsExpanded;
    /** @type {?} */
    MailjetViewComponent.prototype.statsProcessing;
    /** @type {?} */
    MailjetViewComponent.prototype.timeUnits;
    /** @type {?} */
    MailjetViewComponent.prototype.loadingError;
    /**
     * @type {?}
     * @private
     */
    MailjetViewComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    MailjetViewComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    MailjetViewComponent.prototype.datePipe;
}
//# sourceMappingURL=data:application/json;base64,