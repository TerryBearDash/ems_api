/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Output, Input, EventEmitter } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
export class SendModalComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.fb = fb;
        this.type = 'simple';
        this.confirmed = new EventEmitter();
        this.cancelled = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get templateVariablesControl() {
        return ((/** @type {?} */ (this.sendForm.get('variables'))));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refreshForm();
    }
    /**
     * @return {?}
     */
    addTemplateVariable() {
        this.templateVariablesControl.push(this.fb.group({
            name: [null, Validators.required],
            value: [null, Validators.required]
        }));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeTemplateVariable(index) {
        this.templateVariablesControl.removeAt(index);
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    refreshForm(type) {
        if (type) {
            this.type = type;
        }
        if (this.type === 'simple') {
            this.sendForm = this.fb.group({
                to: [this.to ? this.to : '', Validators.required],
                subject: [this.subject ? this.subject : '', Validators.required],
                body: [''],
                variables: this.fb.array([])
            });
        }
        else {
            if (!this.templateId) {
                this.templateId = this.templates && this.templates.length ? this.templates[0].ID : '';
            }
            this.sendForm = this.fb.group({
                to: [this.to ? this.to : '', Validators.required],
                subject: [this.subject ? this.subject : '', Validators.required],
                template: [this.templateId, Validators.required],
                variables: this.fb.array([])
            });
        }
    }
    /**
     * @return {?}
     */
    send() {
        if (this.sendForm.valid) {
            /** @type {?} */
            const data = Object.assign({}, { type: this.type }, this.sendForm.value);
            this.confirmed.emit(data);
        }
    }
}
SendModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-send-modal',
                template: "<ng-template #sendDialog>\r\n  <mat-toolbar class=\"mailjet-theme\">\r\n    <mat-icon>\r\n      send\r\n    </mat-icon>\r\n    <h1>Send an email</h1>\r\n  </mat-toolbar>\r\n  <div fxLayout=\"column\">\r\n    <form fxLayout=\"column\" [formGroup]=\"sendForm\" (submit)=\"send()\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n        <mat-button-toggle-group #messageTypeGroup=\"matButtonToggleGroup\" [value]=\"type\" (valueChange)=\"refreshForm($event)\">\r\n          <mat-button-toggle value=\"simple\">Simple</mat-button-toggle>\r\n          <mat-button-toggle value=\"template\" [disabled]=\"! templates?.length\">Template</mat-button-toggle>\r\n        </mat-button-toggle-group>\r\n      </div>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"Subject\" formControlName=\"subject\" required>\r\n        <mat-error>This field is required.</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf=\"type === 'simple'\">\r\n        <textarea matInput placeholder=\"Body\" formControlName=\"body\"></textarea>\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf=\"type === 'template'\">\r\n        <mat-select placeholder=\"Template\" formControlName=\"template\">\r\n          <mat-option *ngFor=\"let template of templates\" [value]=\"template.ID\">\r\n            {{ template.Name }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"To\" formControlName=\"to\" required>\r\n        <mat-error>This field is required.</mat-error>\r\n      </mat-form-field>\r\n      <div fxLayout=\"column\" class=\"template-variables\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n          <span [matBadge]=\"sendForm.controls['variables']?.value?.length || 0\" matBadgeOverlap=\"false\">Template variables</span>\r\n          <span fxFlex>\r\n          </span>\r\n          <button mat-icon-button type=\"button\" (click)=\"addTemplateVariable()\">\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n        </div>\r\n        <div fxLayout=\"row\" *ngFor=\"let creds of sendForm.get('variables')['controls']; let i = index\" formArrayName=\"variables\">\r\n          <ng-container [formGroupName]=\"i\">\r\n            <mat-form-field>\r\n              <input matInput placeholder=\"Name\" formControlName=\"name\" required>\r\n              <mat-error>This field is required.</mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <input matInput placeholder=\"Value\" formControlName=\"value\" required>\r\n              <mat-error>This field is required.</mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n          <button mat-icon-button type=\"button\" (click)=\"removeTemplateVariable(i)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" [style.marginTop.px]=\"15\">\r\n        <button mat-raised-button type=\"submit\" class=\"mailjet-theme\">Send</button>\r\n        <button mat-raised-button type=\"button\" (click)=\"cancelled.emit()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n",
                styles: [".mailjet-theme{background:#ffa726;color:#fff}mat-toolbar mat-icon{margin:8px}form{padding:10px 15px;width:300px}form mat-button-toggle-group{margin-bottom:15px}form mat-form-field{margin:0 5px}form .template-variables{margin-top:15px}form .template-variables mat-form-field{width:100px}form button{margin:5px}form::ng-deep .mat-badge-content{color:#fff;background:#ffa726}"]
            }] }
];
/** @nocollapse */
SendModalComponent.ctorParameters = () => [
    { type: FormBuilder }
];
SendModalComponent.propDecorators = {
    to: [{ type: Input }],
    templateId: [{ type: Input }],
    templates: [{ type: Input }],
    subject: [{ type: Input }],
    type: [{ type: Input }],
    confirmed: [{ type: Output }],
    cancelled: [{ type: Output }],
    template: [{ type: ViewChild, args: ['sendDialog',] }]
};
if (false) {
    /** @type {?} */
    SendModalComponent.prototype.sendForm;
    /** @type {?} */
    SendModalComponent.prototype.to;
    /** @type {?} */
    SendModalComponent.prototype.templateId;
    /** @type {?} */
    SendModalComponent.prototype.templates;
    /** @type {?} */
    SendModalComponent.prototype.subject;
    /** @type {?} */
    SendModalComponent.prototype.type;
    /** @type {?} */
    SendModalComponent.prototype.confirmed;
    /** @type {?} */
    SendModalComponent.prototype.cancelled;
    /** @type {?} */
    SendModalComponent.prototype.template;
    /**
     * @type {?}
     * @private
     */
    SendModalComponent.prototype.fb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbWF0ZXJpYS9tYWlsamV0LyIsInNvdXJjZXMiOlsiZGlhbG9ncy9zZW5kLW1vZGFsL3NlbmQtbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULFNBQVMsRUFDVCxXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFDTCxZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFhLFdBQVcsRUFBRSxVQUFVLEVBQWEsTUFBTSxnQkFBZ0IsQ0FBQztBQU8vRSxNQUFNLE9BQU8sa0JBQWtCOzs7O0lBZ0I3QixZQUFvQixFQUFlO1FBQWYsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQVYxQixTQUFJLEdBQUcsUUFBUSxDQUFDO1FBRWYsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0IsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFPRixDQUFDOzs7O0lBSnhDLElBQUksd0JBQXdCO1FBQzFCLE9BQU8sQ0FBQyxtQkFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBYSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7OztJQUlELFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7OztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUNoQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNaLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQ2pDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO1NBQ25DLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCxzQkFBc0IsQ0FBQyxLQUFLO1FBQzFCLElB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dCxcclxuICBPbkluaXQsXHJcbiAgVmlld0NoaWxkLFxyXG4gIFRlbXBsYXRlUmVmLFxyXG4gIE91dHB1dCxcclxuICBJbnB1dCxcclxuICBFdmVudEVtaXR0ZXJcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQnVpbGRlciwgVmFsaWRhdG9ycywgRm9ybUFycmF5IH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdtYWlsamV0LXNlbmQtbW9kYWwnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zZW5kLW1vZGFsLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9zZW5kLW1vZGFsLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFNlbmRNb2RhbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgc2VuZEZvcm06IEZvcm1Hcm91cDtcclxuICBASW5wdXQoKSB0bzogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHRlbXBsYXRlSWQ6IG51bWJlcjtcclxuICBASW5wdXQoKSB0ZW1wbGF0ZXM6IGFueTtcclxuICBASW5wdXQoKSBzdWJqZWN0OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgdHlwZSA9ICdzaW1wbGUnO1xyXG5cclxuICBAT3V0cHV0KCkgY29uZmlybWVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBjYW5jZWxsZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQFZpZXdDaGlsZCgnc2VuZERpYWxvZycpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICBnZXQgdGVtcGxhdGVWYXJpYWJsZXNDb250cm9sKCk6IEZvcm1BcnJheSB7XHJcbiAgICByZXR1cm4gKHRoaXMuc2VuZEZvcm0uZ2V0KCd2YXJpYWJsZXMnKSBhcyBGb3JtQXJyYXkpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmYjogRm9ybUJ1aWxkZXIpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMucmVmcmVzaEZvcm0oKTtcclxuICB9XHJcblxyXG4gIGFkZFRlbXBsYXRlVmFyaWFibGUoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlVmFyaWFibGVzQ29udHJvbC5wdXNoKFxyXG4gICAgICB0aGlzLmZiLmdyb3VwKHtcclxuICAgICAgICBuYW1lOiBbbnVsbCwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgdmFsdWU6IFtudWxsLCBWYWxpZGF0b3JzLnJlcXVpcmVkXVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVRlbXBsYXRlVmFyaWFibGUoaW5kZXgpIHtcclxuICAgIHRoaXMudGVtcGxhdGVWYXJpYWJsZXNDb250cm9sLnJlbW92ZUF0KGluZGV4KTtcclxuICB9XHJcblxyXG4gIHJlZnJlc2hGb3JtKHR5cGU/KSB7XHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ3NpbXBsZScpIHtcclxuICAgICAgdGhpcy5zZW5kRm9ybSA9IHRoaXMuZmIuZ3JvdXAoe1xyXG4gICAgICAgIHRvOiBbdGhpcy50byA/IHRoaXMudG8gOiAnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgc3ViamVjdDogW3RoaXMuc3ViamVjdCA/IHRoaXMuc3ViamVjdCA6ICcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgICBib2R5OiBbJyddLFxyXG4gICAgICAgIHZhcmlhYmxlczogdGhpcy5mYi5hcnJheShbXSlcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoISB0aGlzLnRlbXBsYXRlSWQpIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlSWQgPSB0aGlzLnRlbXBsYXRlcyAmJiB0aGlzLnRlbXBsYXRlcy5sZW5ndGggPyB0aGlzLnRlbXBsYXRlc1swXS5JRCA6ICcnO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2VuZEZvcm0gPSB0aGlzLmZiLmdyb3VwKHtcclxuICAgICAgICB0bzogW3RoaXMudG8gPyB0aGlzLnRvIDogJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxyXG4gICAgICAgIHN1YmplY3Q6IFt0aGlzLnN1YmplY3QgPyB0aGlzLnN1YmplY3QgOiAnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgdGVtcGxhdGU6IFt0aGlzLnRlbXBsYXRlSWQsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxyXG4gICAgICAgIHZhcmlhYmxlczogdGhpcy5mYi5hcnJheShbXSlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZW5kKCkge1xyXG4gICAgaWYgKHRoaXMuc2VuZEZvcm0udmFsaWQpIHtcclxuICAgICAgY29uc3QgZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHt0eXBlOiB0aGlzLnR5cGV9LCB0aGlzLnNlbmRGb3JtLnZhbHVlKTtcclxuICAgICAgdGhpcy5jb25maXJtZWQuZW1pdChkYXRhKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19