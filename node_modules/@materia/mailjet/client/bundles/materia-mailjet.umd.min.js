!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common"),require("@angular/common/http"),require("@angular/forms"),require("@angular/flex-layout"),require("ngx-echarts"),require("@materia/addons"),require("@angular/material"),require("@angular/platform-browser"),require("@angular/core")):"function"==typeof define&&define.amd?define("@materia/mailjet",["exports","@angular/common","@angular/common/http","@angular/forms","@angular/flex-layout","ngx-echarts","@materia/addons","@angular/material","@angular/platform-browser","@angular/core"],e):e((t.materia=t.materia||{},t.materia.mailjet={}),t.ng.common,t.ng.common.http,t.ng.forms,t.ng["flex-layout"],t.ngxEcharts,t.addons,t.ng.material,t.ng.platformBrowser,t.ng.core)}(this,function(t,e,n,a,r,o,i,s,l,m){"use strict";function p(t,e,n,a){var r,o=arguments.length,i=o<3?e:null===a?a=Object.getOwnPropertyDescriptor(e,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,n,a);else for(var s=t.length-1;0<=s;s--)(r=t[s])&&(i=(o<3?r(i):3<o?r(e,n,i):r(e,n))||i);return 3<o&&i&&Object.defineProperty(e,n,i),i}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var a,r,o=n.call(t),i=[];try{for(;(void 0===e||0<e--)&&!(a=o.next()).done;)i.push(a.value)}catch(s){r={error:s}}finally{try{a&&!a.done&&(n=o["return"])&&n.call(o)}finally{if(r)throw r.error}}return i}function u(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}var c=(g.prototype.ngOnInit=function(){this.refreshTemplateForm()},g.prototype.refreshTemplateForm=function(){this.templateForm=this.fb.group({name:["",a.Validators.required],author:[this.user?this.user.Username:"",a.Validators.required],templateType:["transactional",a.Validators.required]})},g.prototype.confirm=function(){this.confirmed.emit(this.templateForm.value)},g.prototype.cancel=function(){this.cancelled.emit()},g.decorators=[{type:m.Component,args:[{selector:"mailjet-template-editor",template:'<ng-template #templateDialog>\r\n  <mat-toolbar class="mailjet-theme">\r\n    <mat-icon>\r\n      chrome_reader_mode\r\n    </mat-icon>\r\n    <h1>{{ edition ? \'Edit\' : \'New\' }} template</h1>\r\n  </mat-toolbar>\r\n  <form fxLayout="column" [formGroup]="templateForm">\r\n    <mat-form-field>\r\n      <input matInput placeholder="Template name" formControlName="name">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input matInput placeholder="Author" formControlName="author">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <mat-select placeholder="Template type" formControlName="templateType">\r\n        <mat-option value="marketing">\r\n          Marketing\r\n        </mat-option>\r\n        <mat-option value="transactional">\r\n          Transactional\r\n        </mat-option>\r\n        <mat-option value="automation">\r\n          Automation\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <div fxLayout="row" fxLayoutAlign="center center">\r\n      <button mat-raised-button class="mailjet-theme" (click)="confirm()">Confirm</button>\r\n      <button mat-raised-button (click)="cancel()">Cancel</button>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n',styles:["button{margin:5px}.mailjet-theme{background:#ffa726;color:#fff}form{padding:10px 15px}mat-icon{margin:8px}mat-form-field{width:180px}"]}]}],g.ctorParameters=function(){return[{type:a.FormBuilder}]},g.propDecorators={edition:[{type:m.Input}],settings:[{type:m.Input}],user:[{type:m.Input}],cancelled:[{type:m.Output}],confirmed:[{type:m.Output}],template:[{type:m.ViewChild,args:["templateDialog"]}]},g);function g(t){this.fb=t,this.cancelled=new m.EventEmitter,this.confirmed=new m.EventEmitter}var f=(Object.defineProperty(h.prototype,"templateVariablesControl",{get:function(){return this.sendForm.get("variables")},enumerable:!0,configurable:!0}),h.prototype.ngOnInit=function(){this.refreshForm()},h.prototype.addTemplateVariable=function(){this.templateVariablesControl.push(this.fb.group({name:[null,a.Validators.required],value:[null,a.Validators.required]}))},h.prototype.removeTemplateVariable=function(t){this.templateVariablesControl.removeAt(t)},h.prototype.refreshForm=function(t){t&&(this.type=t),"simple"===this.type?this.sendForm=this.fb.group({to:[this.to?this.to:"",a.Validators.required],subject:[this.subject?this.subject:"",a.Validators.required],body:[""],variables:this.fb.array([])}):(this.templateId||(this.templateId=this.templates&&this.templates.length?this.templates[0].ID:""),this.sendForm=this.fb.group({to:[this.to?this.to:"",a.Validators.required],subject:[this.subject?this.subject:"",a.Validators.required],template:[this.templateId,a.Validators.required],variables:this.fb.array([])}))},h.prototype.send=function(){if(this.sendForm.valid){var t=Object.assign({},{type:this.type},this.sendForm.value);this.confirmed.emit(t)}},h.decorators=[{type:m.Component,args:[{selector:"mailjet-send-modal",template:'<ng-template #sendDialog>\r\n  <mat-toolbar class="mailjet-theme">\r\n    <mat-icon>\r\n      send\r\n    </mat-icon>\r\n    <h1>Send an email</h1>\r\n  </mat-toolbar>\r\n  <div fxLayout="column">\r\n    <form fxLayout="column" [formGroup]="sendForm" (submit)="send()">\r\n      <div fxLayout="row" fxLayoutAlign="center center">\r\n        <mat-button-toggle-group #messageTypeGroup="matButtonToggleGroup" [value]="type" (valueChange)="refreshForm($event)">\r\n          <mat-button-toggle value="simple">Simple</mat-button-toggle>\r\n          <mat-button-toggle value="template" [disabled]="! templates?.length">Template</mat-button-toggle>\r\n        </mat-button-toggle-group>\r\n      </div>\r\n      <mat-form-field>\r\n        <input matInput placeholder="Subject" formControlName="subject" required>\r\n        <mat-error>This field is required.</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf="type === \'simple\'">\r\n        <textarea matInput placeholder="Body" formControlName="body"></textarea>\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf="type === \'template\'">\r\n        <mat-select placeholder="Template" formControlName="template">\r\n          <mat-option *ngFor="let template of templates" [value]="template.ID">\r\n            {{ template.Name }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <input matInput placeholder="To" formControlName="to" required>\r\n        <mat-error>This field is required.</mat-error>\r\n      </mat-form-field>\r\n      <div fxLayout="column" class="template-variables">\r\n        <div fxLayout="row" fxLayoutAlign="start center">\r\n          <span [matBadge]="sendForm.controls[\'variables\']?.value?.length || 0" matBadgeOverlap="false">Template variables</span>\r\n          <span fxFlex>\r\n          </span>\r\n          <button mat-icon-button type="button" (click)="addTemplateVariable()">\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n        </div>\r\n        <div fxLayout="row" *ngFor="let creds of sendForm.get(\'variables\')[\'controls\']; let i = index" formArrayName="variables">\r\n          <ng-container [formGroupName]="i">\r\n            <mat-form-field>\r\n              <input matInput placeholder="Name" formControlName="name" required>\r\n              <mat-error>This field is required.</mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <input matInput placeholder="Value" formControlName="value" required>\r\n              <mat-error>This field is required.</mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n          <button mat-icon-button type="button" (click)="removeTemplateVariable(i)">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div fxLayout="row" fxLayoutAlign="start center" [style.marginTop.px]="15">\r\n        <button mat-raised-button type="submit" class="mailjet-theme">Send</button>\r\n        <button mat-raised-button type="button" (click)="cancelled.emit()">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n',styles:[".mailjet-theme{background:#ffa726;color:#fff}mat-toolbar mat-icon{margin:8px}form{padding:10px 15px;width:300px}form mat-button-toggle-group{margin-bottom:15px}form mat-form-field{margin:0 5px}form .template-variables{margin-top:15px}form .template-variables mat-form-field{width:100px}form button{margin:5px}form::ng-deep .mat-badge-content{color:#fff;background:#ffa726}"]}]}],h.ctorParameters=function(){return[{type:a.FormBuilder}]},h.propDecorators={to:[{type:m.Input}],templateId:[{type:m.Input}],templates:[{type:m.Input}],subject:[{type:m.Input}],type:[{type:m.Input}],confirmed:[{type:m.Output}],cancelled:[{type:m.Output}],template:[{type:m.ViewChild,args:["sendDialog"]}]},h);function h(t){this.fb=t,this.type="simple",this.confirmed=new m.EventEmitter,this.cancelled=new m.EventEmitter}var y=(x.prototype.ngOnInit=function(){this.statsExpanded=!0,this.settings.secret&&this.settings.apikey&&(this.statsProcessing=!0)},x.prototype.openSendDialog=function(t){this.sendSubject="[TEST] Subject",this.sendType=t,this.sendModalComponent.refreshForm(t),this.sendDialogRef=this.dialog.open(this.sendModalComponent.template,{panelClass:"no-padding"})},x.prototype.openSendToDialog=function(t){this.sendSubject="[TEST] Subject",this.sendTo=t,this.sendType="simple",this.sendModalComponent.refreshForm(),this.sendDialogRef=this.dialog.open(this.sendModalComponent.template,{panelClass:"no-padding"})},x.prototype.send=function(t){"simple"===t.type?this._sendSimpleMessage(t):this._sendTemplateMessage(t)},x.prototype.closeSendDialog=function(){this.sendDialogRef.close()},x.prototype.statsTimelineChange=function(t){(t&&"lastWeek"===t||"lastMonth"===t)&&this.init(t)},x.prototype.reload=function(){this.stats={},this.init("lastWeek")},x.prototype.init=function(e){var n=this,a=this._getTimeline(e);return this.statsProcessing=!0,this.loadingError=!1,this.getStats({FromTS:a}).then(function(t){return t&&t.length?(t=n._fillStats(t,a),n.data=[n.getSerie("MessageSentCount","Sent",t),n.getSerie("MessageOpenedCount","Opened",t),n.getSerie("MessageClickedCount","Clicked",t),n.getSerie("MessageSpamCount","Spam",t),n.getSerie("MessageHardBouncedCount","Bounce",t),n.getSerie("MessageBlockedCount","Blocked",t)],n.stats[e]=n.data,setTimeout(function(){n.statsProcessing=!1},1e3)):(n.data=[],n.statsProcessing=!1),n.runQuery("mailjet_message","list",{FromTS:a,limit:100})}).then(function(t){return n.emails=u(t.data.reverse()),n.nbEmails=t.count,n.runQuery("mailjet_contact","list",{FromTS:a,limit:100})}).then(function(t){return n.contacts=t.data,n.getMailjetUser()}).then(function(){n.loadTemplates()})["catch"](function(t){n.loadingError=!0,n.statsProcessing=!1})},x.prototype.openMailjetTemplateEditor=function(t){this.openInBrowser.emit("https://app.mailjet.com/template/"+t.ID+"/"+(1===t.EditMode?"build":"html"))},x.prototype.openTemplateEditor=function(t){this.newTemplate=t,this.templateEditor.refreshTemplateForm(),this.templateDialogRef=this.dialog.open(this.templateEditor.template,{panelClass:"no-padding"})},x.prototype.closeTemplateEditor=function(){this.templateDialogRef.close()},x.prototype.saveTemplate=function(t){this.newTemplate&&this._createNewTemplate(t)},x.prototype.loadTemplates=function(){var r=this;Promise.all([this.runQuery("mailjet_template","findAll",{OwnerType:"user",Limit:100}),this.runQuery("mailjet_template","findAll",{OwnerType:"apikey",Limit:100})]).then(function(t){var e=d(t,2),n=e[0],a=e[1];r.templates=u(n.data,a.data)})},x.prototype.openMailjetSignup=function(){this.openInBrowser.emit("https://app.mailjet.com/signup")},x.prototype.openMailjetApikeyPage=function(){this.openInBrowser.emit("https://app.mailjet.com/account/api_keys")},x.prototype._createNewTemplate=function(t){var n=this;this.runQuery("mailjet_template","create",{Name:t.name,Author:t.author,Purposes:t.templateType,Locale:this.mailjetUser.Locale}).then(function(t){var e=t.data[0];n.runQuery("mailjet_template","updateContent",{ID:e.ID,"Html-part":'<html>\n      <body>\n        <h1 style="text-align: center; font-weight: 300; color: #0D47A1; margin: 20px;">\n          Template generated via Materia Designer\n        </h1>\n        <p style=" font-size: 10px; margin-top: 50px; margin-left: 10px;">\n          This email was sent to [[EMAIL_TO]],\n          <a style="text-decoration: none; color: inherit" href="[[UNSUB_LINK_'+n.mailjetUser.Locale.split("_")[1]+']]" target="_blank">\n          click here to unsubscribe\n          </a>.\n        </p>\n      </body>\n    </html>',Headers:{From:n.settings.name+" <"+n.settings.from+">",Subject:"Subject","Reply-To":n.settings.from}}).then(function(t){n.templateDialogRef.close(),n.loadTemplates(),n.openMailjetTemplateEditor(e)})})},x.prototype._fillStats=function(t,e){var n=this,a=this._getTimeUnits(e);this.timeUnits=a.map(function(t){return n.datePipe.transform(t,"shortDate")});var o=[];return a.forEach(function(a){var r=!1;t.forEach(function(t){var e=new Date(a);e.setHours(0,0,0,0);var n=new Date(t.Timeslice);n.setHours(0,0,0,0),e.toISOString()===n.toISOString()&&(r=!0,o.push(t))}),r||o.push({MessageSentCount:0,MessageSpamCount:0,MessageOpenedCount:0,MessageClickedCount:0,MessageHardBouncedCount:0,MessageBlockedCount:0,Timeslice:a})}),o},x.prototype._getTimeUnits=function(t){for(var e=new Date(t),n=[],a=((new Date).getTime()-e.getTime())/864e5,r=0;r<a;r++){var o=new Date(t);o.setDate(e.getDate()+r),n.push(o.toISOString())}return n},x.prototype._getTimeline=function(t){if("lastWeek"===t){var e=new Date;return e.setDate((new Date).getDate()-7),e.toISOString()}if("lastMonth"===t){var n=new Date;return n.setMonth((new Date).getMonth()-1),n.toISOString()}if("last3Month"===t){var a=new Date;return a.setMonth((new Date).getMonth()-3),a.toISOString()}},x.prototype._sendSimpleMessage=function(t){var e=this;this.runQuery("mailjet_message","send",{subject:t.subject,body:t.body,to:t.to,error_reporting:!0}).then(function(){e.sendDialogRef.close(),e.snackbarSuccess.emit("Email successfully send"),e.reload()})["catch"](function(t){return e.snackbarError.emit(t)})},x.prototype._sendTemplateMessage=function(t){var e=this,n={};t.variables.forEach(function(t){return n[t.name]=t.value}),this.runQuery("mailjet_message","sendTemplate",{templateId:t.template,subject:t.subject,to:t.to,variables:Object.keys(n).length?n:null,error_reporting:!0}).then(function(){e.sendDialogRef.close(),e.snackbarSuccess.emit("Email successfully send"),e.reload()})["catch"](function(t){return e.snackbarError.emit(t)})},x.prototype.runQuery=function(t,e,n){return this.http.post(this.baseUrl+"/entities/"+t+"/queries/"+e,n).toPromise()},x.prototype.getMailjetUser=function(){var e=this;return this.runQuery("mailjet_user","list").then(function(t){return e.mailjetUser=t.data[0],e.mailjetUser})},x.prototype.getStats=function(t){var e=t?Object.assign({},t,{CounterResolution:"Day",CounterTiming:"Message",CounterSource:"APIKey"}):{CounterResolution:"Day",CounterTiming:"Message",CounterSource:"APIKey"};return this.runQuery("mailjet_statistic","find",e).then(function(t){return t.data})},x.prototype.getSerie=function(e,t,n){var a=[];return n.forEach(function(t){a.push(t[e])}),{name:t,data:a,type:"line",color:this.statusColors[t.toLowerCase()]}},x.decorators=[{type:m.Component,args:[{selector:"mailjet-view",template:'<div fxLayout="column" fxFlex>\r\n  <mat-card fxFlex fxLayout="column">\r\n    <mailjet-header\r\n      [settings]="settings"\r\n      [error]="loadingError"\r\n      (sendDialogOpened)="openSendDialog(\'simple\')"\r\n      (settingsOpened)="openSetup.emit()"\r\n      (timelineChanged)="statsTimelineChange($event)">\r\n    </mailjet-header>\r\n    <mat-divider></mat-divider>\r\n    <div fxFlex fxLayout="column">\r\n      <mat-card-content fxFlex fxLayout="column">\r\n        <ng-container *ngIf="settings && settings.from && settings.apikey; else noSettingsTemplate">\r\n          <ng-container *ngIf="! loadingError; else loadingErrorTemplate">\r\n          <mat-accordion fxFlex fxLayout="column">\r\n            <mat-expansion-panel #stats [expanded]="statsExpanded" (opened)="statsExpanded = true" (closed)="statsExpanded = false" [ngClass]="{\'flexed\': statsExpanded}">\r\n              <mat-expansion-panel-header>\r\n                <div fxLayout="row" fxLayoutAlign="center center">\r\n                  <mat-icon style="margin-right: 10px;">timeline</mat-icon>\r\n                  <h2>Statistics</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <div fxFlex fxLayout="row">\r\n                <mailjet-statistic [data]="data" [xAbsis]="timeUnits" [expanded]="statsExpanded" [loading]="statsProcessing"></mailjet-statistic>\r\n              </div>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)="emailsExpanded = true" (closed)="emailsExpanded = false" [ngClass]="{\'flexed\': emailsExpanded}">\r\n              <mat-expansion-panel-header fxLayout="row" fxLayoutAlign="center center">\r\n                <div fxLayout="row" fxLayoutAlign="center center">\r\n                  <mat-icon style="margin-right: 10px;">email</mat-icon>\r\n                  <h2 [matBadge]="nbEmails || 0" matBadgeOverlap="false">Emails sent</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n                <mat-list *ngIf="emails && emails.length">\r\n                  <mat-list-item class="list-title">\r\n                    <div style="width: 100%;" fxLayout="row" fxLayoutAlign="center center">\r\n                      <span fxFlex>Email</span>\r\n                      <span fxFlex fxLayout="row" style="margin-left: 10px;">ArrivedAt\r\n                      </span>\r\n                      <span fxFlex>Subject\r\n                      </span>\r\n                      <span>Status\r\n                      </span>\r\n                    </div>\r\n                  </mat-list-item>\r\n                  <mat-list-item *ngFor="let email of emails">\r\n                    <div style="width: 100%;" fxLayout="row" fxLayoutAlign="start center">\r\n                      <span fxFlex>{{ email.ContactAlt }}</span>\r\n                      <span fxFlex fxLayout="row" style="margin-left: 10px;">\r\n                        {{ email.ArrivedAt | date:\'medium\' }}\r\n                      </span>\r\n                      <span fxFlex>{{ email.Subject }}\r\n                      </span>\r\n                      <span fxLayout="row" [style.color]="statusColors[email.Status]" style="font-weight: bold;">{{ email.Status }}</span>\r\n                    </div>\r\n                    <mat-divider></mat-divider>\r\n                  </mat-list-item>\r\n                </mat-list>\r\n                <div *ngIf="emails && emails.length == 0" fxFlex fxLayout="column" fxLayoutAlign="center center">\r\n                  <p style="margin-bottom: 15px;">\r\n                    <strong>No email has been sent during this period</strong>\r\n                  </p>\r\n                  <button mat-button color="primary" (click)="openSendDialog(\'simple\')">Send a test email now</button>\r\n                </div>\r\n              </ng-template>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)="contactsExpanded = true" (closed)="contactsExpanded = false" [ngClass]="{\'flexed\': contactsExpanded}">\r\n              <mat-expansion-panel-header fxLayout="row" fxLayoutAlign="center center">\r\n                <div fxLayout="row" fxLayoutAlign="center center">\r\n                  <mat-icon style="margin-right: 10px;">contact_mail</mat-icon>\r\n                  <h2 [matBadge]="contacts?.length || 0" matBadgeOverlap="false">Contacts</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n              <mat-list *ngIf="contacts && contacts.length">\r\n                <mat-list-item class="list-title">\r\n                    <div style="width: 100%;" fxLayout="row" fxLayoutAlign="center center">\r\n                        <span fxFlex>Email</span>\r\n                        <span fxFlex>CreatedAt\r\n                        </span>\r\n                        <span style="width: 50px;">\r\n                        </span>\r\n                    </div>\r\n                </mat-list-item>\r\n                <mat-list-item *ngFor="let contact of contacts">\r\n                  <div style="width: 100%;" fxLayout="row" fxLayoutAlign="center center">\r\n                    <span fxFlex>{{ contact.Email }}</span>\r\n                    <span fxFlex>{{ contact.CreatedAt | date }}\r\n                    </span>\r\n                    <button mat-icon-button>\r\n                      <mat-icon matTooltip="Send an email" (click)="openSendToDialog(contact.Email)">send</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                  <mat-divider></mat-divider>\r\n                </mat-list-item>\r\n              </mat-list>\r\n            </ng-template>\r\n            <div fxFlex fxLayout="column" fxLayoutAlign="center center" *ngIf="contacts && !contacts.length">\r\n              <span>You haven\'t any contacts yet</span>\r\n            </div>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)="templatesExpanded = true" (closed)="templatesExpanded = false" [ngClass]="{\'flexed\': templatesExpanded}">\r\n              <mat-expansion-panel-header fxLayout="row" fxLayoutAlign="center center">\r\n                <div fxLayout="row" fxLayoutAlign="center center">\r\n                  <mat-icon style="margin-right: 10px;">chrome_reader_mode</mat-icon>\r\n                  <h2 [matBadge]="templates?.length || 0" matBadgeOverlap="false">Templates</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n              <mat-list *ngIf="templates && templates.length">\r\n                <mat-list-item class="list-title">\r\n                    <div style="width: 100%;" fxLayout="row" fxLayoutAlign="center center">\r\n                        <span fxFlex>Name</span>\r\n                        <span fxFlex>Author\r\n                        </span>\r\n                        <span fxFlex>CreatedAt\r\n                        </span>\r\n                        <span style="width: 100px;">\r\n                          <button mat-mini-fab *ngIf="templatesExpanded" style="margin: 5px;" matTooltip="New template">\r\n                            <mat-icon (click)="openTemplateEditor(true)">\r\n                              add\r\n                            </mat-icon>\r\n                          </button>\r\n                        </span>\r\n                    </div>\r\n                </mat-list-item>\r\n                <mat-divider></mat-divider>\r\n                <mat-list-item *ngFor="let template of templates">\r\n                  <div style="width: 100%;" fxLayout="row" fxLayoutAlign="center center">\r\n                    <span fxFlex>{{ template.Name }}</span>\r\n                    <span fxFlex>{{ template.Author }}\r\n                    </span>\r\n                    <span fxFlex>{{ template.CreatedAt | date }}\r\n                    </span>\r\n                    <button mat-icon-button>\r\n                        <mat-icon matTooltip="Send" (click)="openSendDialog(\'template\'); templateSelected = template.ID;">send</mat-icon>\r\n                      </button>\r\n                    <button mat-icon-button>\r\n                      <mat-icon matTooltip="Edit" (click)="openMailjetTemplateEditor(template)">edit</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                  <mat-divider></mat-divider>\r\n                </mat-list-item>\r\n              </mat-list>\r\n              <div fxFlex fxLayout="column" fxLayoutAlign="center center" *ngIf="! templates || (templates && ! templates.length)">\r\n                <p style="margin-bottom: 15px;">\r\n                  <strong>You haven\'t created any template yet</strong>\r\n                </p>\r\n                <button mat-button color="primary" (click)="openTemplateEditor(true)">\r\n                  Create my first template\r\n                </button>\r\n              </div>\r\n              </ng-template>\r\n            </mat-expansion-panel>\r\n          </mat-accordion>\r\n        </ng-container>\r\n      </ng-container>\r\n      </mat-card-content>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n<mailjet-template-editor [edition]="!newTemplate" [user]="mailjetUser" [settings]="settings" (confirmed)="saveTemplate($event)" (cancelled)="closeTemplateEditor()">\r\n</mailjet-template-editor>\r\n<mailjet-send-modal [templates]="templates" [templateId]="templateSelected" [to]="sendTo" [subject]="sendSubject" [type]="sendType" (cancelled)="closeSendDialog()" (confirmed)="send($event)"></mailjet-send-modal>\r\n<ng-template #loadingErrorTemplate>\r\n\t<mat-card-content fxLayout="column" fxFlex fxLayoutAlign="center center" [style.margin]="\'50px\'" [style.background]="\'#F44336\'" [style.color]="\'white\'">\r\n\t\t<span style="font-size: 15px; margin: 10px;">\r\n\t\t\tThere was a problem loading your mailjet account...\r\n\t\t</span>\r\n\t\t<span style="font-size: 15px; margin: 10px;">\r\n\t\t\tThis is probably an error in your mailjet settings:\r\n\t\t</span>\r\n\t\t<button mat-raised-button (click)="openSetup.emit()">OPEN SETTINGS</button>\r\n\t</mat-card-content>\r\n</ng-template>\r\n<ng-template #noSettingsTemplate>\r\n  <mat-card-content fxFlex fxLayout="column" fxLayoutAlign="center center" *ngIf="! settings || ! settings.from || ! settings.apikey" style="padding: 15px;">\r\n    <p>You need a Mailjet account to use this addon.</p>\r\n    <button mat-raised-button (click)="openMailjetSignup()" class="mailjet-button">SIGNUP TO MAILJET</button>\r\n    <p style="margin-top: 45px;">Already have a Mailjet account ? Please fill the settings with your <span class="link" (click)="openInBrowser.emit(\'https://app.mailjet.com/account/api_keys\')">Mailjet API keys</span>:</p>\r\n    <button mat-raised-button (click)="openSetup.emit()" class="mailjet-button">ADDON SETTINGS</button>\r\n  </mat-card-content>\r\n</ng-template>\r\n',styles:[":host{flex:1 1 0;display:flex;height:100%}:host::ng-deep .mat-expansion-panel-content{display:flex;flex:1;flex-direction:column}:host::ng-deep .mat-expansion-panel-body{display:flex;flex-direction:column;flex:1;overflow-y:auto;overflow-x:hidden}:host::ng-deep mat-list{margin:0 24px}:host::ng-deep .mat-badge-content{color:#fff;background:#ffa726}.mailjet-button{color:#fff;background:#ffa726}.link{text-decoration:underline;cursor:pointer;color:#ffa726}mat-expansion-panel{width:100%;min-height:48px}mat-card{margin:8px;padding:0}mat-card mat-divider{position:relative}mat-card button{margin:0 5px}mat-card-content{overflow:hidden;margin:0}.list-title{font-weight:500;background:#fafafa}.flexed{flex:1;display:flex;flex-direction:column}.settings-link{cursor:pointer;text-decoration:underline}.template-actions{padding:0 24px;min-height:40px}"]}]}],x.ctorParameters=function(){return[{type:n.HttpClient},{type:s.MatDialog},{type:e.DatePipe}]},x.propDecorators={app:[{type:m.Input}],settings:[{type:m.Input}],baseUrl:[{type:m.Input}],openSetup:[{type:m.Output}],openInBrowser:[{type:m.Output}],snackbarSuccess:[{type:m.Output}],snackbarError:[{type:m.Output}],templateEditor:[{type:m.ViewChild,args:[c]}],sendModalComponent:[{type:m.ViewChild,args:[f]}]},x=p([i.AddonView("@materia/mailjet"),function L(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}("design:paramtypes",[n.HttpClient,s.MatDialog,e.DatePipe])],x));function x(t,e,n){this.http=t,this.dialog=e,this.datePipe=n,this.openSetup=new m.EventEmitter,this.openInBrowser=new m.EventEmitter,this.snackbarSuccess=new m.EventEmitter,this.snackbarError=new m.EventEmitter,this.emails=[],this.stats={},this.statusColors={sent:"#2196F3",opened:"#4CAF50",clicked:"#8BC34A",spam:"#FFC107",bounce:"#F44336",blocked:"black"},this.loadingError=!1}var b=(v.decorators=[{type:m.Component,args:[{selector:"mailjet-header",template:'<img src="https://raw.githubusercontent.com/materiahq/materia-website-content/master/logo/addons/mailjet.jpg">\r\n<div class="settings-detail" fxFlex *ngIf="settings && settings.from && settings.apikey">\r\n  Emails are sent from\r\n  <strong>{{settings.from}}</strong> with\r\n  <strong>Mailjet</strong>\r\n  <br>using the following Mailjet APIKey:\r\n  <strong>{{settings.apikey.substr(0, 5) + \'*****\' + settings.apikey.substr(-5, 5)}}\r\n  </strong>\r\n  <br>\r\n  <a class="settings-link" (click)="settingsOpened.emit()">Edit the settings</a>\r\n</div>\r\n<div class="settings-detail" fxFlex *ngIf="settings && (! settings.from || !settings.apikey)">\r\n  You need to configure this addon to send email in your application.\r\n  <br>\r\n  <a class="settings-link" (click)="settingsOpened.emit()">Configure it now!</a>\r\n</div>\r\n<div fxLayout="column" fxLayoutAlign="start center" *ngIf="settings && settings.from && settings.apikey && ! error">\r\n  <button mat-raised-button color="primary" (click)="sendDialogOpened.emit()">Send a test email</button>\r\n</div>\r\n<div fxLayout="column">\r\n  <mat-button-toggle-group #statsButtonGroup="matButtonToggleGroup" value="lastWeek" (valueChange)="timelineChanged.emit($event)" *ngIf="settings && settings.from && settings.apikey && ! error">\r\n    <mat-button-toggle value="lastWeek">Week</mat-button-toggle>\r\n    <mat-button-toggle value="lastMonth">Month</mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n</div>\r\n',changeDetection:m.ChangeDetectionStrategy.OnPush,styles:[":host{display:flex;flex-direction:row;height:84px;min-height:84px}.settings-detail{padding-top:15px;margin-left:20px}.settings-detail .settings-link{cursor:pointer;text-decoration:underline}.mat-button-toggle-checked{background-color:#fff;color:#ffa726;border:1px solid #ffa726}button,mat-button-toggle-group{margin:10px}img{height:84px}"]}]}],v.propDecorators={settings:[{type:m.Input}],error:[{type:m.Input}],settingsOpened:[{type:m.Output}],sendDialogOpened:[{type:m.Output}],timelineChanged:[{type:m.Output}]},v);function v(){this.settingsOpened=new m.EventEmitter,this.sendDialogOpened=new m.EventEmitter,this.timelineChanged=new m.EventEmitter}var w=(j.prototype.ngOnChanges=function(t){var n=this;t&&this.data&&(this.data.forEach(function(t){if(t.data&&t.data.length){var e=n.counts[t.name.toLowerCase()]=0;t.data.forEach(function(t){e+=t}),n.counts[t.name.toLowerCase()]=e}}),this.legend=this.data.map(function(t){return t.name}),this.chartOptions=Object.assign({},{legend:{top:"top",left:"center",data:this.legend},grid:{left:"3%",right:"3%",bottom:"1%",containLabel:!0},tooltip:{trigger:"axis"},xAxis:{boundaryGap:!1,type:"category",data:this.xAbsis},yAxis:{type:"value"},series:this.data}))},j.decorators=[{type:m.Component,args:[{selector:"mailjet-statistic",template:'<div fxFlex fxLayout="row" *ngIf="! loading && data && data.length">\r\n  <div fxLayout="column" fxLayoutAlign="start center" style="padding: 5px 24px; overflow: auto;">\r\n    <mailjet-stats-counter backgroundColor="#2196F3" width="80" height="60" color="white" label="Sent" [count]="counts[\'sent\']"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor="#4CAF50" width="80" height="60" color="white" label="Opened" [count]="counts[\'opened\']"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor="#8BC34A" width="80" height="60" color="white" label="Clicked" [count]="counts[\'clicked\']"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor="#FFC107" width="80" height="60" color="white" label="Spam" [count]="counts[\'spam\']"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor="#F44336" width="80" height="60" color="white" label="Bounce" [count]="counts[\'bounce\']"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor="black" width="80" height="60" color="white" label="Blocked" [count]="counts[\'blocked\']"></mailjet-stats-counter>\r\n  </div>\r\n  <div fxFlex fxLayout="column" class="chart-section">\r\n    <div class="chart-container">\r\n      <div *ngIf="xAbsis && data" style="height: 100%; width: 100%;" echarts\r\n        [options]="chartOptions">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div fxFlex fxLayout="row" fxLayoutAlign="center center" *ngIf="loading">\r\n  <mat-progress-spinner mode="indeterminate"></mat-progress-spinner>\r\n</div>\r\n<div fxFlex fxLayout="row" fxLayoutAlign="center center" *ngIf=" ! loading && data && ! data.length">\r\n  <p>No statistics for this period</p>\r\n</div>\r\n',styles:[":host{display:flex;width:100%;flex:1}.chart-section{position:relative}.chart-container{position:absolute;top:0;bottom:15px;left:24px;right:24px;display:flex}"]}]}],j.ctorParameters=function(){return[]},j.propDecorators={data:[{type:m.Input}],loading:[{type:m.Input}],expanded:[{type:m.Input}],xAbsis:[{type:m.Input}]},j);function j(){this.counts={sent:0,opened:0,clicked:0,spam:0,bounced:0,blocked:0}}var C=(M.decorators=[{type:m.Component,args:[{selector:"mailjet-stats-counter",template:'<div fxLayout="column" fxLayoutAlign="center center"\r\n  [style.background]="backgroundColor"\r\n  [style.color]="color"\r\n  [style.height.px]="height"\r\n  [style.width.px]="width"\r\n>\r\n  <div class="count">{{ count || 0 }}</div>\r\n  <div class="label">{{ label }}</div>\r\n</div>',styles:["div{text-align:center}.count{font-size:1.5em}.label{font-size:1em}"]}]}],M.propDecorators={backgroundColor:[{type:m.Input}],color:[{type:m.Input}],count:[{type:m.Input}],label:[{type:m.Input}],width:[{type:m.Input}],height:[{type:m.Input}]},M);function M(){}var T=(S.prototype.transform=function(t){return this.sanitized.bypassSecurityTrustHtml(t)},S.decorators=[{type:m.Pipe,args:[{name:"safeTemplate"}]}],S.ctorParameters=function(){return[{type:l.DomSanitizer}]},S);function S(t){this.sanitized=t}var E=[s.MatButtonModule,s.MatRippleModule,s.MatSnackBarModule,s.MatCardModule,s.MatIconModule,s.MatDialogModule,s.MatInputModule,s.MatTabsModule,s.MatSelectModule,s.MatOptionModule,s.MatExpansionModule,s.MatDividerModule,s.MatListModule,s.MatButtonToggleModule,s.MatTooltipModule,s.MatProgressSpinnerModule,s.MatBadgeModule,s.MatSelectModule,s.MatOptionModule,s.MatToolbarModule,r.FlexLayoutModule,o.NgxEchartsModule],k=(I.decorators=[{type:m.NgModule,args:[{imports:u([e.CommonModule,a.FormsModule,a.ReactiveFormsModule,n.HttpClientModule],E),declarations:[y,T,C,w,b,c,f],exports:[y]}]}],I=p([i.Addon("@materia/mailjet")],I));function I(){}t.MailjetViewComponent=y,t.UI_MODULES=E,t.MailjetModule=k,t.ɵg=b,t.ɵf=w,t.ɵc=y,t.ɵe=C,t.ɵi=f,t.ɵh=c,t.ɵb=f,t.ɵa=c,t.ɵd=T,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=materia-mailjet.umd.min.js.map