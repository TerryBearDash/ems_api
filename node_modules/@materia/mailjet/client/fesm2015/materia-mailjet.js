import { __decorate, __metadata } from 'tslib';
import { DatePipe, CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { FormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { FlexLayoutModule } from '@angular/flex-layout';
import { NgxEchartsModule } from 'ngx-echarts';
import { AddonView, Addon } from '@materia/addons';
import { MatDialog, MatButtonModule, MatRippleModule, MatSnackBarModule, MatCardModule, MatIconModule, MatDialogModule, MatInputModule, MatTabsModule, MatSelectModule, MatOptionModule, MatExpansionModule, MatDividerModule, MatListModule, MatButtonToggleModule, MatTooltipModule, MatProgressSpinnerModule, MatBadgeModule, MatToolbarModule } from '@angular/material';
import { DomSanitizer } from '@angular/platform-browser';
import { Component, Input, Output, ViewChild, EventEmitter, ChangeDetectionStrategy, Pipe, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TemplateEditorComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.fb = fb;
        this.cancelled = new EventEmitter();
        this.confirmed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refreshTemplateForm();
    }
    /**
     * @return {?}
     */
    refreshTemplateForm() {
        this.templateForm = this.fb.group({
            name: ['', Validators.required],
            author: [this.user ? this.user.Username : '', Validators.required],
            templateType: ['transactional', Validators.required]
        });
    }
    /**
     * @return {?}
     */
    confirm() {
        this.confirmed.emit(this.templateForm.value);
    }
    /**
     * @return {?}
     */
    cancel() {
        this.cancelled.emit();
    }
}
TemplateEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-template-editor',
                template: "<ng-template #templateDialog>\r\n  <mat-toolbar class=\"mailjet-theme\">\r\n    <mat-icon>\r\n      chrome_reader_mode\r\n    </mat-icon>\r\n    <h1>{{ edition ? 'Edit' : 'New' }} template</h1>\r\n  </mat-toolbar>\r\n  <form fxLayout=\"column\" [formGroup]=\"templateForm\">\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Template name\" formControlName=\"name\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Author\" formControlName=\"author\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <mat-select placeholder=\"Template type\" formControlName=\"templateType\">\r\n        <mat-option value=\"marketing\">\r\n          Marketing\r\n        </mat-option>\r\n        <mat-option value=\"transactional\">\r\n          Transactional\r\n        </mat-option>\r\n        <mat-option value=\"automation\">\r\n          Automation\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n      <button mat-raised-button class=\"mailjet-theme\" (click)=\"confirm()\">Confirm</button>\r\n      <button mat-raised-button (click)=\"cancel()\">Cancel</button>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n",
                styles: ["button{margin:5px}.mailjet-theme{background:#ffa726;color:#fff}form{padding:10px 15px}mat-icon{margin:8px}mat-form-field{width:180px}"]
            }] }
];
/** @nocollapse */
TemplateEditorComponent.ctorParameters = () => [
    { type: FormBuilder }
];
TemplateEditorComponent.propDecorators = {
    edition: [{ type: Input }],
    settings: [{ type: Input }],
    user: [{ type: Input }],
    cancelled: [{ type: Output }],
    confirmed: [{ type: Output }],
    template: [{ type: ViewChild, args: ['templateDialog',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SendModalComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.fb = fb;
        this.type = 'simple';
        this.confirmed = new EventEmitter();
        this.cancelled = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get templateVariablesControl() {
        return ((/** @type {?} */ (this.sendForm.get('variables'))));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refreshForm();
    }
    /**
     * @return {?}
     */
    addTemplateVariable() {
        this.templateVariablesControl.push(this.fb.group({
            name: [null, Validators.required],
            value: [null, Validators.required]
        }));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeTemplateVariable(index) {
        this.templateVariablesControl.removeAt(index);
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    refreshForm(type) {
        if (type) {
            this.type = type;
        }
        if (this.type === 'simple') {
            this.sendForm = this.fb.group({
                to: [this.to ? this.to : '', Validators.required],
                subject: [this.subject ? this.subject : '', Validators.required],
                body: [''],
                variables: this.fb.array([])
            });
        }
        else {
            if (!this.templateId) {
                this.templateId = this.templates && this.templates.length ? this.templates[0].ID : '';
            }
            this.sendForm = this.fb.group({
                to: [this.to ? this.to : '', Validators.required],
                subject: [this.subject ? this.subject : '', Validators.required],
                template: [this.templateId, Validators.required],
                variables: this.fb.array([])
            });
        }
    }
    /**
     * @return {?}
     */
    send() {
        if (this.sendForm.valid) {
            /** @type {?} */
            const data = Object.assign({}, { type: this.type }, this.sendForm.value);
            this.confirmed.emit(data);
        }
    }
}
SendModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-send-modal',
                template: "<ng-template #sendDialog>\r\n  <mat-toolbar class=\"mailjet-theme\">\r\n    <mat-icon>\r\n      send\r\n    </mat-icon>\r\n    <h1>Send an email</h1>\r\n  </mat-toolbar>\r\n  <div fxLayout=\"column\">\r\n    <form fxLayout=\"column\" [formGroup]=\"sendForm\" (submit)=\"send()\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n        <mat-button-toggle-group #messageTypeGroup=\"matButtonToggleGroup\" [value]=\"type\" (valueChange)=\"refreshForm($event)\">\r\n          <mat-button-toggle value=\"simple\">Simple</mat-button-toggle>\r\n          <mat-button-toggle value=\"template\" [disabled]=\"! templates?.length\">Template</mat-button-toggle>\r\n        </mat-button-toggle-group>\r\n      </div>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"Subject\" formControlName=\"subject\" required>\r\n        <mat-error>This field is required.</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf=\"type === 'simple'\">\r\n        <textarea matInput placeholder=\"Body\" formControlName=\"body\"></textarea>\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf=\"type === 'template'\">\r\n        <mat-select placeholder=\"Template\" formControlName=\"template\">\r\n          <mat-option *ngFor=\"let template of templates\" [value]=\"template.ID\">\r\n            {{ template.Name }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"To\" formControlName=\"to\" required>\r\n        <mat-error>This field is required.</mat-error>\r\n      </mat-form-field>\r\n      <div fxLayout=\"column\" class=\"template-variables\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n          <span [matBadge]=\"sendForm.controls['variables']?.value?.length || 0\" matBadgeOverlap=\"false\">Template variables</span>\r\n          <span fxFlex>\r\n          </span>\r\n          <button mat-icon-button type=\"button\" (click)=\"addTemplateVariable()\">\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n        </div>\r\n        <div fxLayout=\"row\" *ngFor=\"let creds of sendForm.get('variables')['controls']; let i = index\" formArrayName=\"variables\">\r\n          <ng-container [formGroupName]=\"i\">\r\n            <mat-form-field>\r\n              <input matInput placeholder=\"Name\" formControlName=\"name\" required>\r\n              <mat-error>This field is required.</mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <input matInput placeholder=\"Value\" formControlName=\"value\" required>\r\n              <mat-error>This field is required.</mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n          <button mat-icon-button type=\"button\" (click)=\"removeTemplateVariable(i)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" [style.marginTop.px]=\"15\">\r\n        <button mat-raised-button type=\"submit\" class=\"mailjet-theme\">Send</button>\r\n        <button mat-raised-button type=\"button\" (click)=\"cancelled.emit()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n",
                styles: [".mailjet-theme{background:#ffa726;color:#fff}mat-toolbar mat-icon{margin:8px}form{padding:10px 15px;width:300px}form mat-button-toggle-group{margin-bottom:15px}form mat-form-field{margin:0 5px}form .template-variables{margin-top:15px}form .template-variables mat-form-field{width:100px}form button{margin:5px}form::ng-deep .mat-badge-content{color:#fff;background:#ffa726}"]
            }] }
];
/** @nocollapse */
SendModalComponent.ctorParameters = () => [
    { type: FormBuilder }
];
SendModalComponent.propDecorators = {
    to: [{ type: Input }],
    templateId: [{ type: Input }],
    templates: [{ type: Input }],
    subject: [{ type: Input }],
    type: [{ type: Input }],
    confirmed: [{ type: Output }],
    cancelled: [{ type: Output }],
    template: [{ type: ViewChild, args: ['sendDialog',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
let MailjetViewComponent = class MailjetViewComponent {
    /**
     * @param {?} http
     * @param {?} dialog
     * @param {?} datePipe
     */
    constructor(http, dialog, datePipe) {
        this.http = http;
        this.dialog = dialog;
        this.datePipe = datePipe;
        this.openSetup = new EventEmitter();
        this.openInBrowser = new EventEmitter();
        this.snackbarSuccess = new EventEmitter();
        this.snackbarError = new EventEmitter();
        this.emails = [];
        this.stats = {};
        this.statusColors = {
            sent: '#2196F3',
            opened: '#4CAF50',
            clicked: '#8BC34A',
            spam: '#FFC107',
            bounce: '#F44336',
            blocked: 'black'
        };
        this.loadingError = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.statsExpanded = true;
        if (this.settings.secret && this.settings.apikey) {
            this.statsProcessing = true;
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    openSendDialog(type) {
        this.sendSubject = '[TEST] Subject';
        this.sendType = type;
        this.sendModalComponent.refreshForm(type);
        this.sendDialogRef = this.dialog.open(this.sendModalComponent.template, {
            panelClass: 'no-padding'
        });
    }
    /**
     * @param {?} mail
     * @return {?}
     */
    openSendToDialog(mail) {
        this.sendSubject = '[TEST] Subject';
        this.sendTo = mail;
        this.sendType = 'simple';
        this.sendModalComponent.refreshForm();
        this.sendDialogRef = this.dialog.open(this.sendModalComponent.template, {
            panelClass: 'no-padding'
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    send(data) {
        if (data.type === 'simple') {
            this._sendSimpleMessage(data);
        }
        else {
            this._sendTemplateMessage(data);
        }
    }
    /**
     * @return {?}
     */
    closeSendDialog() {
        this.sendDialogRef.close();
    }
    /**
     * @param {?} timeline
     * @return {?}
     */
    statsTimelineChange(timeline) {
        if (timeline && timeline === 'lastWeek' || timeline === 'lastMonth') {
            this.init(timeline);
        }
    }
    /**
     * @return {?}
     */
    reload() {
        this.stats = {};
        this.init('lastWeek');
    }
    /**
     * @param {?} timeline
     * @return {?}
     */
    init(timeline) {
        /** @type {?} */
        const fromTimestamp = this._getTimeline(timeline);
        this.statsProcessing = true;
        this.loadingError = false;
        return this.getStats({ FromTS: fromTimestamp })
            .then((/**
         * @param {?} stats
         * @return {?}
         */
        stats => {
            if (stats && stats.length) {
                stats = this._fillStats(stats, fromTimestamp);
                this.data = [
                    this.getSerie('MessageSentCount', 'Sent', stats),
                    this.getSerie('MessageOpenedCount', 'Opened', stats),
                    this.getSerie('MessageClickedCount', 'Clicked', stats),
                    this.getSerie('MessageSpamCount', 'Spam', stats),
                    this.getSerie('MessageHardBouncedCount', 'Bounce', stats),
                    this.getSerie('MessageBlockedCount', 'Blocked', stats)
                ];
                this.stats[timeline] = this.data;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.statsProcessing = false;
                }), 1000);
            }
            else {
                this.data = [];
                this.statsProcessing = false;
            }
            return this.runQuery('mailjet_message', 'list', {
                FromTS: fromTimestamp,
                limit: 100
            });
        }))
            .then((/**
         * @param {?} messagesResponse
         * @return {?}
         */
        (messagesResponse) => {
            this.emails = [...messagesResponse.data.reverse()];
            this.nbEmails = messagesResponse.count;
            return this.runQuery('mailjet_contact', 'list', {
                FromTS: fromTimestamp,
                limit: 100
            });
        }))
            .then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.contacts = result.data;
            return this.getMailjetUser();
        }))
            .then((/**
         * @return {?}
         */
        () => {
            this.loadTemplates();
        }))
            .catch((/**
         * @param {?} _
         * @return {?}
         */
        _ => {
            this.loadingError = true;
            this.statsProcessing = false;
        }));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    openMailjetTemplateEditor(template) {
        this.openInBrowser.emit(`https://app.mailjet.com/template/${template.ID}/${template.EditMode === 1 ? 'build' : 'html'}`);
    }
    /**
     * @param {?} newTemplate
     * @return {?}
     */
    openTemplateEditor(newTemplate) {
        this.newTemplate = newTemplate;
        this.templateEditor.refreshTemplateForm();
        this.templateDialogRef = this.dialog.open(this.templateEditor.template, {
            panelClass: 'no-padding'
        });
    }
    /**
     * @return {?}
     */
    closeTemplateEditor() {
        this.templateDialogRef.close();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    saveTemplate(data) {
        if (this.newTemplate) {
            this._createNewTemplate(data);
        }
    }
    /**
     * @return {?}
     */
    loadTemplates() {
        Promise.all([
            this.runQuery('mailjet_template', 'findAll', {
                OwnerType: 'user',
                Limit: 100
            }),
            this.runQuery('mailjet_template', 'findAll', {
                OwnerType: 'apikey',
                Limit: 100
            })
        ]).then((/**
         * @param {?} __0
         * @return {?}
         */
        ([templateResult1, templateResult2]) => {
            this.templates = [...templateResult1.data, ...templateResult2.data];
        }));
    }
    /**
     * @return {?}
     */
    openMailjetSignup() {
        this.openInBrowser.emit('https://app.mailjet.com/signup');
    }
    /**
     * @return {?}
     */
    openMailjetApikeyPage() {
        this.openInBrowser.emit('https://app.mailjet.com/account/api_keys');
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    _createNewTemplate(data) {
        this.runQuery('mailjet_template', 'create', {
            Name: data.name,
            Author: data.author,
            Purposes: data.templateType,
            Locale: this.mailjetUser.Locale
        }).then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const newTemplate = result.data[0];
            this.runQuery('mailjet_template', 'updateContent', {
                ID: newTemplate.ID,
                'Html-part': `<html>
      <body>
        <h1 style="text-align: center; font-weight: 300; color: #0D47A1; margin: 20px;">
          Template generated via Materia Designer
        </h1>
        <p style=" font-size: 10px; margin-top: 50px; margin-left: 10px;">
          This email was sent to [[EMAIL_TO]],
          <a style="text-decoration: none; color: inherit" href="[[UNSUB_LINK_${this.mailjetUser.Locale.split('_')[1]}]]" target="_blank">
          click here to unsubscribe
          </a>.
        </p>
      </body>
    </html>`,
                Headers: {
                    From: `${this.settings.name} <${this.settings.from}>`,
                    Subject: 'Subject',
                    'Reply-To': this.settings.from
                }
            }).then((/**
             * @param {?} _
             * @return {?}
             */
            _ => {
                this.templateDialogRef.close();
                this.loadTemplates();
                this.openMailjetTemplateEditor(newTemplate);
            }));
        }));
    }
    /**
     * @private
     * @param {?} stats
     * @param {?} fromTs
     * @return {?}
     */
    _fillStats(stats, fromTs) {
        /** @type {?} */
        const timeUnits = this._getTimeUnits(fromTs);
        this.timeUnits = timeUnits.map((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            return this.datePipe.transform(d, 'shortDate');
        }));
        /** @type {?} */
        const newStats = [];
        timeUnits.forEach((/**
         * @param {?} timeUnit
         * @return {?}
         */
        timeUnit => {
            /** @type {?} */
            let match = false;
            stats.forEach((/**
             * @param {?} stat
             * @return {?}
             */
            stat => {
                /** @type {?} */
                const timeUnitDate = new Date(timeUnit);
                timeUnitDate.setHours(0, 0, 0, 0);
                /** @type {?} */
                const statDate = new Date(stat.Timeslice);
                statDate.setHours(0, 0, 0, 0);
                if (timeUnitDate.toISOString() === statDate.toISOString()) {
                    match = true;
                    newStats.push(stat);
                }
            }));
            if (!match) {
                newStats.push({
                    MessageSentCount: 0,
                    MessageSpamCount: 0,
                    MessageOpenedCount: 0,
                    MessageClickedCount: 0,
                    MessageHardBouncedCount: 0,
                    MessageBlockedCount: 0,
                    Timeslice: timeUnit
                });
            }
        }));
        return newStats;
    }
    /**
     * @private
     * @param {?} fromTs
     * @return {?}
     */
    _getTimeUnits(fromTs) {
        /** @type {?} */
        const firstDate = new Date(fromTs);
        /** @type {?} */
        const lastDate = new Date();
        /** @type {?} */
        const timeUnits = [];
        /** @type {?} */
        const daysInterval = (lastDate.getTime() - firstDate.getTime()) / (60 * 60 * 24 * 1000);
        for (let i = 0; i < daysInterval; i++) {
            /** @type {?} */
            const currentDate = new Date(fromTs);
            currentDate.setDate(firstDate.getDate() + i);
            timeUnits.push(currentDate.toISOString());
        }
        return timeUnits;
    }
    /**
     * @private
     * @param {?} timeline
     * @return {?}
     */
    _getTimeline(timeline) {
        if (timeline === 'lastWeek') {
            /** @type {?} */
            const lastweek = new Date();
            lastweek.setDate(new Date().getDate() - 7);
            return lastweek.toISOString();
        }
        else if (timeline === 'lastMonth') {
            /** @type {?} */
            const lastmonth = new Date();
            lastmonth.setMonth(new Date().getMonth() - 1);
            return lastmonth.toISOString();
        }
        else if (timeline === 'last3Month') {
            /** @type {?} */
            const last3month = new Date();
            last3month.setMonth(new Date().getMonth() - 3);
            return last3month.toISOString();
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    _sendSimpleMessage(data) {
        this.runQuery('mailjet_message', 'send', {
            subject: data.subject,
            body: data.body,
            to: data.to,
            error_reporting: true
        })
            .then((/**
         * @return {?}
         */
        () => {
            this.sendDialogRef.close();
            this.snackbarSuccess.emit('Email successfully send');
            this.reload();
        }))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => this.snackbarError.emit(err)));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    _sendTemplateMessage(data) {
        /** @type {?} */
        const variables = {};
        data.variables.forEach((/**
         * @param {?} variable
         * @return {?}
         */
        (variable) => variables[variable.name] = variable.value));
        this.runQuery('mailjet_message', 'sendTemplate', {
            templateId: data.template,
            subject: data.subject,
            to: data.to,
            variables: Object.keys(variables).length ? variables : null,
            error_reporting: true
        })
            .then((/**
         * @return {?}
         */
        () => {
            this.sendDialogRef.close();
            this.snackbarSuccess.emit('Email successfully send');
            this.reload();
        }))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => this.snackbarError.emit(err)));
    }
    /**
     * @private
     * @param {?} entity
     * @param {?} query
     * @param {?=} params
     * @return {?}
     */
    runQuery(entity, query, params) {
        return this.http
            .post(`${this.baseUrl}/entities/${entity}/queries/${query}`, params)
            .toPromise();
    }
    /**
     * @private
     * @return {?}
     */
    getMailjetUser() {
        return this.runQuery('mailjet_user', 'list').then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.mailjetUser = result.data[0];
            return this.mailjetUser;
        }));
    }
    /**
     * @private
     * @param {?=} params
     * @return {?}
     */
    getStats(params) {
        /** @type {?} */
        const queryParams = params
            ? Object.assign({}, params, {
                CounterResolution: 'Day',
                CounterTiming: 'Message',
                CounterSource: 'APIKey'
            })
            : {
                CounterResolution: 'Day',
                CounterTiming: 'Message',
                CounterSource: 'APIKey'
            };
        return this.runQuery('mailjet_statistic', 'find', queryParams).then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => result.data));
    }
    /**
     * @private
     * @param {?} name
     * @param {?} displayName
     * @param {?} data
     * @return {?}
     */
    getSerie(name, displayName, data) {
        /** @type {?} */
        const series = [];
        data.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => {
            series.push(row[name]);
        }));
        return {
            name: displayName,
            data: series,
            type: 'line',
            color: this.statusColors[displayName.toLowerCase()]
        };
    }
};
MailjetViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-view',
                template: "<div fxLayout=\"column\" fxFlex>\r\n  <mat-card fxFlex fxLayout=\"column\">\r\n    <mailjet-header\r\n      [settings]=\"settings\"\r\n      [error]=\"loadingError\"\r\n      (sendDialogOpened)=\"openSendDialog('simple')\"\r\n      (settingsOpened)=\"openSetup.emit()\"\r\n      (timelineChanged)=\"statsTimelineChange($event)\">\r\n    </mailjet-header>\r\n    <mat-divider></mat-divider>\r\n    <div fxFlex fxLayout=\"column\">\r\n      <mat-card-content fxFlex fxLayout=\"column\">\r\n        <ng-container *ngIf=\"settings && settings.from && settings.apikey; else noSettingsTemplate\">\r\n          <ng-container *ngIf=\"! loadingError; else loadingErrorTemplate\">\r\n          <mat-accordion fxFlex fxLayout=\"column\">\r\n            <mat-expansion-panel #stats [expanded]=\"statsExpanded\" (opened)=\"statsExpanded = true\" (closed)=\"statsExpanded = false\" [ngClass]=\"{'flexed': statsExpanded}\">\r\n              <mat-expansion-panel-header>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                  <mat-icon style=\"margin-right: 10px;\">timeline</mat-icon>\r\n                  <h2>Statistics</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <div fxFlex fxLayout=\"row\">\r\n                <mailjet-statistic [data]=\"data\" [xAbsis]=\"timeUnits\" [expanded]=\"statsExpanded\" [loading]=\"statsProcessing\"></mailjet-statistic>\r\n              </div>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)=\"emailsExpanded = true\" (closed)=\"emailsExpanded = false\" [ngClass]=\"{'flexed': emailsExpanded}\">\r\n              <mat-expansion-panel-header fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                  <mat-icon style=\"margin-right: 10px;\">email</mat-icon>\r\n                  <h2 [matBadge]=\"nbEmails || 0\" matBadgeOverlap=\"false\">Emails sent</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n                <mat-list *ngIf=\"emails && emails.length\">\r\n                  <mat-list-item class=\"list-title\">\r\n                    <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                      <span fxFlex>Email</span>\r\n                      <span fxFlex fxLayout=\"row\" style=\"margin-left: 10px;\">ArrivedAt\r\n                      </span>\r\n                      <span fxFlex>Subject\r\n                      </span>\r\n                      <span>Status\r\n                      </span>\r\n                    </div>\r\n                  </mat-list-item>\r\n                  <mat-list-item *ngFor=\"let email of emails\">\r\n                    <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                      <span fxFlex>{{ email.ContactAlt }}</span>\r\n                      <span fxFlex fxLayout=\"row\" style=\"margin-left: 10px;\">\r\n                        {{ email.ArrivedAt | date:'medium' }}\r\n                      </span>\r\n                      <span fxFlex>{{ email.Subject }}\r\n                      </span>\r\n                      <span fxLayout=\"row\" [style.color]=\"statusColors[email.Status]\" style=\"font-weight: bold;\">{{ email.Status }}</span>\r\n                    </div>\r\n                    <mat-divider></mat-divider>\r\n                  </mat-list-item>\r\n                </mat-list>\r\n                <div *ngIf=\"emails && emails.length == 0\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                  <p style=\"margin-bottom: 15px;\">\r\n                    <strong>No email has been sent during this period</strong>\r\n                  </p>\r\n                  <button mat-button color=\"primary\" (click)=\"openSendDialog('simple')\">Send a test email now</button>\r\n                </div>\r\n              </ng-template>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)=\"contactsExpanded = true\" (closed)=\"contactsExpanded = false\" [ngClass]=\"{'flexed': contactsExpanded}\">\r\n              <mat-expansion-panel-header fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                  <mat-icon style=\"margin-right: 10px;\">contact_mail</mat-icon>\r\n                  <h2 [matBadge]=\"contacts?.length || 0\" matBadgeOverlap=\"false\">Contacts</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n              <mat-list *ngIf=\"contacts && contacts.length\">\r\n                <mat-list-item class=\"list-title\">\r\n                    <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                        <span fxFlex>Email</span>\r\n                        <span fxFlex>CreatedAt\r\n                        </span>\r\n                        <span style=\"width: 50px;\">\r\n                        </span>\r\n                    </div>\r\n                </mat-list-item>\r\n                <mat-list-item *ngFor=\"let contact of contacts\">\r\n                  <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                    <span fxFlex>{{ contact.Email }}</span>\r\n                    <span fxFlex>{{ contact.CreatedAt | date }}\r\n                    </span>\r\n                    <button mat-icon-button>\r\n                      <mat-icon matTooltip=\"Send an email\" (click)=\"openSendToDialog(contact.Email)\">send</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                  <mat-divider></mat-divider>\r\n                </mat-list-item>\r\n              </mat-list>\r\n            </ng-template>\r\n            <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"contacts && !contacts.length\">\r\n              <span>You haven't any contacts yet</span>\r\n            </div>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel (opened)=\"templatesExpanded = true\" (closed)=\"templatesExpanded = false\" [ngClass]=\"{'flexed': templatesExpanded}\">\r\n              <mat-expansion-panel-header fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                  <mat-icon style=\"margin-right: 10px;\">chrome_reader_mode</mat-icon>\r\n                  <h2 [matBadge]=\"templates?.length || 0\" matBadgeOverlap=\"false\">Templates</h2>\r\n                </div>\r\n              </mat-expansion-panel-header>\r\n              <ng-template matExpansionPanelContent>\r\n              <mat-list *ngIf=\"templates && templates.length\">\r\n                <mat-list-item class=\"list-title\">\r\n                    <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                        <span fxFlex>Name</span>\r\n                        <span fxFlex>Author\r\n                        </span>\r\n                        <span fxFlex>CreatedAt\r\n                        </span>\r\n                        <span style=\"width: 100px;\">\r\n                          <button mat-mini-fab *ngIf=\"templatesExpanded\" style=\"margin: 5px;\" matTooltip=\"New template\">\r\n                            <mat-icon (click)=\"openTemplateEditor(true)\">\r\n                              add\r\n                            </mat-icon>\r\n                          </button>\r\n                        </span>\r\n                    </div>\r\n                </mat-list-item>\r\n                <mat-divider></mat-divider>\r\n                <mat-list-item *ngFor=\"let template of templates\">\r\n                  <div style=\"width: 100%;\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                    <span fxFlex>{{ template.Name }}</span>\r\n                    <span fxFlex>{{ template.Author }}\r\n                    </span>\r\n                    <span fxFlex>{{ template.CreatedAt | date }}\r\n                    </span>\r\n                    <button mat-icon-button>\r\n                        <mat-icon matTooltip=\"Send\" (click)=\"openSendDialog('template'); templateSelected = template.ID;\">send</mat-icon>\r\n                      </button>\r\n                    <button mat-icon-button>\r\n                      <mat-icon matTooltip=\"Edit\" (click)=\"openMailjetTemplateEditor(template)\">edit</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                  <mat-divider></mat-divider>\r\n                </mat-list-item>\r\n              </mat-list>\r\n              <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"! templates || (templates && ! templates.length)\">\r\n                <p style=\"margin-bottom: 15px;\">\r\n                  <strong>You haven't created any template yet</strong>\r\n                </p>\r\n                <button mat-button color=\"primary\" (click)=\"openTemplateEditor(true)\">\r\n                  Create my first template\r\n                </button>\r\n              </div>\r\n              </ng-template>\r\n            </mat-expansion-panel>\r\n          </mat-accordion>\r\n        </ng-container>\r\n      </ng-container>\r\n      </mat-card-content>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n<mailjet-template-editor [edition]=\"!newTemplate\" [user]=\"mailjetUser\" [settings]=\"settings\" (confirmed)=\"saveTemplate($event)\" (cancelled)=\"closeTemplateEditor()\">\r\n</mailjet-template-editor>\r\n<mailjet-send-modal [templates]=\"templates\" [templateId]=\"templateSelected\" [to]=\"sendTo\" [subject]=\"sendSubject\" [type]=\"sendType\" (cancelled)=\"closeSendDialog()\" (confirmed)=\"send($event)\"></mailjet-send-modal>\r\n<ng-template #loadingErrorTemplate>\r\n\t<mat-card-content fxLayout=\"column\" fxFlex fxLayoutAlign=\"center center\" [style.margin]=\"'50px'\" [style.background]=\"'#F44336'\" [style.color]=\"'white'\">\r\n\t\t<span style=\"font-size: 15px; margin: 10px;\">\r\n\t\t\tThere was a problem loading your mailjet account...\r\n\t\t</span>\r\n\t\t<span style=\"font-size: 15px; margin: 10px;\">\r\n\t\t\tThis is probably an error in your mailjet settings:\r\n\t\t</span>\r\n\t\t<button mat-raised-button (click)=\"openSetup.emit()\">OPEN SETTINGS</button>\r\n\t</mat-card-content>\r\n</ng-template>\r\n<ng-template #noSettingsTemplate>\r\n  <mat-card-content fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"! settings || ! settings.from || ! settings.apikey\" style=\"padding: 15px;\">\r\n    <p>You need a Mailjet account to use this addon.</p>\r\n    <button mat-raised-button (click)=\"openMailjetSignup()\" class=\"mailjet-button\">SIGNUP TO MAILJET</button>\r\n    <p style=\"margin-top: 45px;\">Already have a Mailjet account ? Please fill the settings with your <span class=\"link\" (click)=\"openInBrowser.emit('https://app.mailjet.com/account/api_keys')\">Mailjet API keys</span>:</p>\r\n    <button mat-raised-button (click)=\"openSetup.emit()\" class=\"mailjet-button\">ADDON SETTINGS</button>\r\n  </mat-card-content>\r\n</ng-template>\r\n",
                styles: [":host{flex:1 1 0;display:flex;height:100%}:host::ng-deep .mat-expansion-panel-content{display:flex;flex:1;flex-direction:column}:host::ng-deep .mat-expansion-panel-body{display:flex;flex-direction:column;flex:1;overflow-y:auto;overflow-x:hidden}:host::ng-deep mat-list{margin:0 24px}:host::ng-deep .mat-badge-content{color:#fff;background:#ffa726}.mailjet-button{color:#fff;background:#ffa726}.link{text-decoration:underline;cursor:pointer;color:#ffa726}mat-expansion-panel{width:100%;min-height:48px}mat-card{margin:8px;padding:0}mat-card mat-divider{position:relative}mat-card button{margin:0 5px}mat-card-content{overflow:hidden;margin:0}.list-title{font-weight:500;background:#fafafa}.flexed{flex:1;display:flex;flex-direction:column}.settings-link{cursor:pointer;text-decoration:underline}.template-actions{padding:0 24px;min-height:40px}"]
            }] }
];
/** @nocollapse */
MailjetViewComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: MatDialog },
    { type: DatePipe }
];
MailjetViewComponent.propDecorators = {
    app: [{ type: Input }],
    settings: [{ type: Input }],
    baseUrl: [{ type: Input }],
    openSetup: [{ type: Output }],
    openInBrowser: [{ type: Output }],
    snackbarSuccess: [{ type: Output }],
    snackbarError: [{ type: Output }],
    templateEditor: [{ type: ViewChild, args: [TemplateEditorComponent,] }],
    sendModalComponent: [{ type: ViewChild, args: [SendModalComponent,] }]
};
MailjetViewComponent = __decorate([
    AddonView('@materia/mailjet'),
    __metadata("design:paramtypes", [HttpClient,
        MatDialog,
        DatePipe])
], MailjetViewComponent);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MailjetHeaderComponent {
    constructor() {
        this.settingsOpened = new EventEmitter();
        this.sendDialogOpened = new EventEmitter();
        this.timelineChanged = new EventEmitter();
    }
}
MailjetHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-header',
                template: "<img src=\"https://raw.githubusercontent.com/materiahq/materia-website-content/master/logo/addons/mailjet.jpg\">\r\n<div class=\"settings-detail\" fxFlex *ngIf=\"settings && settings.from && settings.apikey\">\r\n  Emails are sent from\r\n  <strong>{{settings.from}}</strong> with\r\n  <strong>Mailjet</strong>\r\n  <br>using the following Mailjet APIKey:\r\n  <strong>{{settings.apikey.substr(0, 5) + '*****' + settings.apikey.substr(-5, 5)}}\r\n  </strong>\r\n  <br>\r\n  <a class=\"settings-link\" (click)=\"settingsOpened.emit()\">Edit the settings</a>\r\n</div>\r\n<div class=\"settings-detail\" fxFlex *ngIf=\"settings && (! settings.from || !settings.apikey)\">\r\n  You need to configure this addon to send email in your application.\r\n  <br>\r\n  <a class=\"settings-link\" (click)=\"settingsOpened.emit()\">Configure it now!</a>\r\n</div>\r\n<div fxLayout=\"column\" fxLayoutAlign=\"start center\" *ngIf=\"settings && settings.from && settings.apikey && ! error\">\r\n  <button mat-raised-button color=\"primary\" (click)=\"sendDialogOpened.emit()\">Send a test email</button>\r\n</div>\r\n<div fxLayout=\"column\">\r\n  <mat-button-toggle-group #statsButtonGroup=\"matButtonToggleGroup\" value=\"lastWeek\" (valueChange)=\"timelineChanged.emit($event)\" *ngIf=\"settings && settings.from && settings.apikey && ! error\">\r\n    <mat-button-toggle value=\"lastWeek\">Week</mat-button-toggle>\r\n    <mat-button-toggle value=\"lastMonth\">Month</mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:flex;flex-direction:row;height:84px;min-height:84px}.settings-detail{padding-top:15px;margin-left:20px}.settings-detail .settings-link{cursor:pointer;text-decoration:underline}.mat-button-toggle-checked{background-color:#fff;color:#ffa726;border:1px solid #ffa726}button,mat-button-toggle-group{margin:10px}img{height:84px}"]
            }] }
];
MailjetHeaderComponent.propDecorators = {
    settings: [{ type: Input }],
    error: [{ type: Input }],
    settingsOpened: [{ type: Output }],
    sendDialogOpened: [{ type: Output }],
    timelineChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MailjetStatisticComponent {
    constructor() {
        this.counts = {
            sent: 0,
            opened: 0,
            clicked: 0,
            spam: 0,
            bounced: 0,
            blocked: 0
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes && this.data) {
            /** @type {?} */
            const data = this.data;
            data.forEach((/**
             * @param {?} d
             * @return {?}
             */
            d => {
                if (d.data && d.data.length) {
                    /** @type {?} */
                    let count = this.counts[d.name.toLowerCase()] = 0;
                    d.data.forEach((/**
                     * @param {?} value
                     * @return {?}
                     */
                    value => {
                        count = count + value;
                    }));
                    this.counts[d.name.toLowerCase()] = count;
                }
            }));
            this.legend = this.data.map((/**
             * @param {?} d
             * @return {?}
             */
            d => d.name));
            this.chartOptions = Object.assign({}, {
                legend: {
                    top: 'top',
                    left: 'center',
                    data: this.legend
                },
                grid: {
                    left: '3%',
                    right: '3%',
                    bottom: '1%',
                    containLabel: true
                },
                tooltip: {
                    trigger: 'axis'
                },
                xAxis: {
                    boundaryGap: false,
                    type: 'category',
                    data: this.xAbsis
                },
                yAxis: {
                    type: 'value'
                },
                series: this.data
            });
        }
    }
}
MailjetStatisticComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-statistic',
                template: "<div fxFlex fxLayout=\"row\" *ngIf=\"! loading && data && data.length\">\r\n  <div fxLayout=\"column\" fxLayoutAlign=\"start center\" style=\"padding: 5px 24px; overflow: auto;\">\r\n    <mailjet-stats-counter backgroundColor=\"#2196F3\" width=\"80\" height=\"60\" color=\"white\" label=\"Sent\" [count]=\"counts['sent']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"#4CAF50\" width=\"80\" height=\"60\" color=\"white\" label=\"Opened\" [count]=\"counts['opened']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"#8BC34A\" width=\"80\" height=\"60\" color=\"white\" label=\"Clicked\" [count]=\"counts['clicked']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"#FFC107\" width=\"80\" height=\"60\" color=\"white\" label=\"Spam\" [count]=\"counts['spam']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"#F44336\" width=\"80\" height=\"60\" color=\"white\" label=\"Bounce\" [count]=\"counts['bounce']\"></mailjet-stats-counter>\r\n    <mailjet-stats-counter backgroundColor=\"black\" width=\"80\" height=\"60\" color=\"white\" label=\"Blocked\" [count]=\"counts['blocked']\"></mailjet-stats-counter>\r\n  </div>\r\n  <div fxFlex fxLayout=\"column\" class=\"chart-section\">\r\n    <div class=\"chart-container\">\r\n      <div *ngIf=\"xAbsis && data\" style=\"height: 100%; width: 100%;\" echarts\r\n        [options]=\"chartOptions\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"loading\">\r\n  <mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\r\n</div>\r\n<div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\" ! loading && data && ! data.length\">\r\n  <p>No statistics for this period</p>\r\n</div>\r\n",
                styles: [":host{display:flex;width:100%;flex:1}.chart-section{position:relative}.chart-container{position:absolute;top:0;bottom:15px;left:24px;right:24px;display:flex}"]
            }] }
];
/** @nocollapse */
MailjetStatisticComponent.ctorParameters = () => [];
MailjetStatisticComponent.propDecorators = {
    data: [{ type: Input }],
    loading: [{ type: Input }],
    expanded: [{ type: Input }],
    xAbsis: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StatsCounterComponent {
}
StatsCounterComponent.decorators = [
    { type: Component, args: [{
                selector: 'mailjet-stats-counter',
                template: "<div fxLayout=\"column\" fxLayoutAlign=\"center center\"\r\n  [style.background]=\"backgroundColor\"\r\n  [style.color]=\"color\"\r\n  [style.height.px]=\"height\"\r\n  [style.width.px]=\"width\"\r\n>\r\n  <div class=\"count\">{{ count || 0 }}</div>\r\n  <div class=\"label\">{{ label }}</div>\r\n</div>",
                styles: ["div{text-align:center}.count{font-size:1.5em}.label{font-size:1em}"]
            }] }
];
StatsCounterComponent.propDecorators = {
    backgroundColor: [{ type: Input }],
    color: [{ type: Input }],
    count: [{ type: Input }],
    label: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SafeTemplatePipe {
    /**
     * @param {?} sanitized
     */
    constructor(sanitized) {
        this.sanitized = sanitized;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        /** @type {?} */
        const newVal = this.sanitized.bypassSecurityTrustHtml(value);
        return newVal;
    }
}
SafeTemplatePipe.decorators = [
    { type: Pipe, args: [{ name: 'safeTemplate' },] }
];
/** @nocollapse */
SafeTemplatePipe.ctorParameters = () => [
    { type: DomSanitizer }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UI_MODULES = [
    MatButtonModule,
    MatRippleModule,
    MatSnackBarModule,
    MatCardModule,
    MatIconModule,
    MatDialogModule,
    MatInputModule,
    MatTabsModule,
    MatSelectModule,
    MatOptionModule,
    MatExpansionModule,
    MatDividerModule,
    MatListModule,
    MatButtonToggleModule,
    MatTooltipModule,
    MatProgressSpinnerModule,
    MatBadgeModule,
    MatSelectModule,
    MatOptionModule,
    MatToolbarModule,
    FlexLayoutModule,
    NgxEchartsModule
];
let MailjetModule = class MailjetModule {
};
MailjetModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    HttpClientModule,
                    ...UI_MODULES
                ],
                declarations: [
                    MailjetViewComponent,
                    SafeTemplatePipe,
                    StatsCounterComponent,
                    MailjetStatisticComponent,
                    MailjetHeaderComponent,
                    TemplateEditorComponent,
                    SendModalComponent
                ],
                exports: [MailjetViewComponent]
            },] }
];
MailjetModule = __decorate([
    Addon('@materia/mailjet')
], MailjetModule);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MailjetViewComponent, UI_MODULES, MailjetModule, MailjetHeaderComponent as ɵg, MailjetStatisticComponent as ɵf, MailjetViewComponent as ɵc, StatsCounterComponent as ɵe, SendModalComponent as ɵi, TemplateEditorComponent as ɵh, SendModalComponent as ɵb, TemplateEditorComponent as ɵa, SafeTemplatePipe as ɵd };

//# sourceMappingURL=materia-mailjet.js.map