/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Output, Input, EventEmitter } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
var SendModalComponent = /** @class */ (function () {
    function SendModalComponent(fb) {
        this.fb = fb;
        this.type = 'simple';
        this.confirmed = new EventEmitter();
        this.cancelled = new EventEmitter();
    }
    Object.defineProperty(SendModalComponent.prototype, "templateVariablesControl", {
        get: /**
         * @return {?}
         */
        function () {
            return ((/** @type {?} */ (this.sendForm.get('variables'))));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SendModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.refreshForm();
    };
    /**
     * @return {?}
     */
    SendModalComponent.prototype.addTemplateVariable = /**
     * @return {?}
     */
    function () {
        this.templateVariablesControl.push(this.fb.group({
            name: [null, Validators.required],
            value: [null, Validators.required]
        }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SendModalComponent.prototype.removeTemplateVariable = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.templateVariablesControl.removeAt(index);
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    SendModalComponent.prototype.refreshForm = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type) {
            this.type = type;
        }
        if (this.type === 'simple') {
            this.sendForm = this.fb.group({
                to: [this.to ? this.to : '', Validators.required],
                subject: [this.subject ? this.subject : '', Validators.required],
                body: [''],
                variables: this.fb.array([])
            });
        }
        else {
            if (!this.templateId) {
                this.templateId = this.templates && this.templates.length ? this.templates[0].ID : '';
            }
            this.sendForm = this.fb.group({
                to: [this.to ? this.to : '', Validators.required],
                subject: [this.subject ? this.subject : '', Validators.required],
                template: [this.templateId, Validators.required],
                variables: this.fb.array([])
            });
        }
    };
    /**
     * @return {?}
     */
    SendModalComponent.prototype.send = /**
     * @return {?}
     */
    function () {
        if (this.sendForm.valid) {
            /** @type {?} */
            var data = Object.assign({}, { type: this.type }, this.sendForm.value);
            this.confirmed.emit(data);
        }
    };
    SendModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mailjet-send-modal',
                    template: "<ng-template #sendDialog>\r\n  <mat-toolbar class=\"mailjet-theme\">\r\n    <mat-icon>\r\n      send\r\n    </mat-icon>\r\n    <h1>Send an email</h1>\r\n  </mat-toolbar>\r\n  <div fxLayout=\"column\">\r\n    <form fxLayout=\"column\" [formGroup]=\"sendForm\" (submit)=\"send()\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n        <mat-button-toggle-group #messageTypeGroup=\"matButtonToggleGroup\" [value]=\"type\" (valueChange)=\"refreshForm($event)\">\r\n          <mat-button-toggle value=\"simple\">Simple</mat-button-toggle>\r\n          <mat-button-toggle value=\"template\" [disabled]=\"! templates?.length\">Template</mat-button-toggle>\r\n        </mat-button-toggle-group>\r\n      </div>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"Subject\" formControlName=\"subject\" required>\r\n        <mat-error>This field is required.</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf=\"type === 'simple'\">\r\n        <textarea matInput placeholder=\"Body\" formControlName=\"body\"></textarea>\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf=\"type === 'template'\">\r\n        <mat-select placeholder=\"Template\" formControlName=\"template\">\r\n          <mat-option *ngFor=\"let template of templates\" [value]=\"template.ID\">\r\n            {{ template.Name }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"To\" formControlName=\"to\" required>\r\n        <mat-error>This field is required.</mat-error>\r\n      </mat-form-field>\r\n      <div fxLayout=\"column\" class=\"template-variables\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n          <span [matBadge]=\"sendForm.controls['variables']?.value?.length || 0\" matBadgeOverlap=\"false\">Template variables</span>\r\n          <span fxFlex>\r\n          </span>\r\n          <button mat-icon-button type=\"button\" (click)=\"addTemplateVariable()\">\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n        </div>\r\n        <div fxLayout=\"row\" *ngFor=\"let creds of sendForm.get('variables')['controls']; let i = index\" formArrayName=\"variables\">\r\n          <ng-container [formGroupName]=\"i\">\r\n            <mat-form-field>\r\n              <input matInput placeholder=\"Name\" formControlName=\"name\" required>\r\n              <mat-error>This field is required.</mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <input matInput placeholder=\"Value\" formControlName=\"value\" required>\r\n              <mat-error>This field is required.</mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n          <button mat-icon-button type=\"button\" (click)=\"removeTemplateVariable(i)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" [style.marginTop.px]=\"15\">\r\n        <button mat-raised-button type=\"submit\" class=\"mailjet-theme\">Send</button>\r\n        <button mat-raised-button type=\"button\" (click)=\"cancelled.emit()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ng-template>\r\n",
                    styles: [".mailjet-theme{background:#ffa726;color:#fff}mat-toolbar mat-icon{margin:8px}form{padding:10px 15px;width:300px}form mat-button-toggle-group{margin-bottom:15px}form mat-form-field{margin:0 5px}form .template-variables{margin-top:15px}form .template-variables mat-form-field{width:100px}form button{margin:5px}form::ng-deep .mat-badge-content{color:#fff;background:#ffa726}"]
                }] }
    ];
    /** @nocollapse */
    SendModalComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    SendModalComponent.propDecorators = {
        to: [{ type: Input }],
        templateId: [{ type: Input }],
        templates: [{ type: Input }],
        subject: [{ type: Input }],
        type: [{ type: Input }],
        confirmed: [{ type: Output }],
        cancelled: [{ type: Output }],
        template: [{ type: ViewChild, args: ['sendDialog',] }]
    };
    return SendModalComponent;
}());
export { SendModalComponent };
if (false) {
    /** @type {?} */
    SendModalComponent.prototype.sendForm;
    /** @type {?} */
    SendModalComponent.prototype.to;
    /** @type {?} */
    SendModalComponent.prototype.templateId;
    /** @type {?} */
    SendModalComponent.prototype.templates;
    /** @type {?} */
    SendModalComponent.prototype.subject;
    /** @type {?} */
    SendModalComponent.prototype.type;
    /** @type {?} */
    SendModalComponent.prototype.confirmed;
    /** @type {?} */
    SendModalComponent.prototype.cancelled;
    /** @type {?} */
    SendModalComponent.prototype.template;
    /**
     * @type {?}
     * @private
     */
    SendModalComponent.prototype.fb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbWF0ZXJpYS9tYWlsamV0LyIsInNvdXJjZXMiOlsiZGlhbG9ncy9zZW5kLW1vZGFsL3NlbmQtbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULFNBQVMsRUFDVCxXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFDTCxZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFhLFdBQVcsRUFBRSxVQUFVLEVBQWEsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvRTtJQXFCRSw0QkFBb0IsRUFBZTtRQUFmLE9BQUUsR0FBRixFQUFFLENBQWE7UUFWMUIsU0FBSSxHQUFHLFFBQVEsQ0FBQztRQUVmLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9CLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBT0YsQ0FBQztJQUp4QyxzQkFBSSx3REFBd0I7Ozs7UUFBNUI7WUFDRSxPQUFPLENBQUMsbUJBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQWEsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7OztPQUFBOzs7O0lBSUQscUNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFRCxnREFBbUI7OztJQUFuQjtRQUNFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQ2hDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ1osSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDakMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUM7U0FDbkMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7OztJQUVELG1EQUFzQjs7OztJQUF0QixV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dUNBQXlDOztJQUN6QyxzQ0FBb0Q7Ozs7O0lBTXhDLGdDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIE9uSW5pdCxcclxuICBWaWV3Q2hpbGQsXHJcbiAgVGVtcGxhdGVSZWYsXHJcbiAgT3V0cHV0LFxyXG4gIElucHV0LFxyXG4gIEV2ZW50RW1pdHRlclxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1CdWlsZGVyLCBWYWxpZGF0b3JzLCBGb3JtQXJyYXkgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ21haWxqZXQtc2VuZC1tb2RhbCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3NlbmQtbW9kYWwuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3NlbmQtbW9kYWwuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2VuZE1vZGFsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBzZW5kRm9ybTogRm9ybUdyb3VwO1xyXG4gIEBJbnB1dCgpIHRvOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgdGVtcGxhdGVJZDogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHRlbXBsYXRlczogYW55O1xyXG4gIEBJbnB1dCgpIHN1YmplY3Q6IHN0cmluZztcclxuICBASW5wdXQoKSB0eXBlID0gJ3NpbXBsZSc7XHJcblxyXG4gIEBPdXRwdXQoKSBjb25maXJtZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGNhbmNlbGxlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAVmlld0NoaWxkKCdzZW5kRGlhbG9nJykgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gIGdldCB0ZW1wbGF0ZVZhcmlhYmxlc0NvbnRyb2woKTogRm9ybUFycmF5IHtcclxuICAgIHJldHVybiAodGhpcy5zZW5kRm9ybS5nZXQoJ3ZhcmlhYmxlcycpIGFzIEZvcm1BcnJheSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZiOiBGb3JtQnVpbGRlcikgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5yZWZyZXNoRm9ybSgpO1xyXG4gIH1cclxuXHJcbiAgYWRkVGVtcGxhdGVWYXJpYWJsZSgpIHtcclxuICAgIHRoaXMudGVtcGxhdGVWYXJpYWJsZXNDb250cm9sLnB1c2goXHJcbiAgICAgIHRoaXMuZmIuZ3JvdXAoe1xyXG4gICAgICAgIG5hbWU6IFtudWxsLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgICB2YWx1ZTogW251bGwsIFZhbGlkYXRvcnMucmVxdWlyZWRdXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlVGVtcGxhdGVWYXJpYWJsZShpbmRleCkge1xyXG4gICAgdGhpcy50ZW1wbGF0ZVZhcmlhYmxlc0NvbnRyb2wucmVtb3ZlQXQoaW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgcmVmcmVzaEZvcm0odHlwZT8pIHtcclxuICAgIGlmICh0eXBlKSB7XHJcbiAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy50eXBlID09PSAnc2ltcGxlJykge1xyXG4gICAgICB0aGlzLnNlbmRGb3JtID0gdGhpcy5mYi5ncm91cCh7XHJcbiAgICAgICAgdG86IFt0aGlzLnRvID8gdGhpcy50byA6ICcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgICBzdWJqZWN0OiBbdGhpcy5zdWJqZWN0ID8gdGhpcy5zdWJqZWN0IDogJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxyXG4gICAgICAgIGJvZHk6IFsnJ10sXHJcbiAgICAgICAgdmFyaWFibGVzOiB0aGlzLmZiLmFycmF5KFtdKVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICghIHRoaXMudGVtcGxhdGVJZCkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVJZCA9IHRoaXMudGVtcGxhdGVzICYmIHRoaXMudGVtcGxhdGVzLmxlbmd0aCA/IHRoaXMudGVtcGxhdGVzWzBdLklEIDogJyc7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zZW5kRm9ybSA9IHRoaXMuZmIuZ3JvdXAoe1xyXG4gICAgICAgIHRvOiBbdGhpcy50byA/IHRoaXMudG8gOiAnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgc3ViamVjdDogW3RoaXMuc3ViamVjdCA/IHRoaXMuc3ViamVjdCA6ICcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgICB0ZW1wbGF0ZTogW3RoaXMudGVtcGxhdGVJZCwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgdmFyaWFibGVzOiB0aGlzLmZiLmFycmF5KFtdKVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNlbmQoKSB7XHJcbiAgICBpZiAodGhpcy5zZW5kRm9ybS52YWxpZCkge1xyXG4gICAgICBjb25zdCBkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwge3R5cGU6IHRoaXMudHlwZX0sIHRoaXMuc2VuZEZvcm0udmFsdWUpO1xyXG4gICAgICB0aGlzLmNvbmZpcm1lZC5lbWl0KGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=