/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Output, EventEmitter, ViewChild, TemplateRef, Input } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
export class SignupFormComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.fb = fb;
        this.signup = new EventEmitter();
        this.cancel = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.profileFields && changes.profileFields.currentValue) {
            this.initForm();
        }
    }
    /**
     * @return {?}
     */
    initForm() {
        this.signupForm = this.fb.group(Object.assign({}, {
            email: ['', Validators.required],
            password: ['', Validators.required]
        }, this.getProfileFormGroup()));
    }
    /**
     * @return {?}
     */
    getProfileFormGroup() {
        if (!this.profileFields) {
            return {};
        }
        const /** @type {?} */ result = {};
        this.profileFields.forEach(field => {
            if (field.required) {
                result[field.name] = ['', Validators.required];
            }
            else {
                result[field.name] = '';
            }
        });
        return result;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initForm();
    }
    /**
     * @return {?}
     */
    signupClick() {
        this.signup.emit(this.signupForm.value);
    }
}
SignupFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-signup-form',
                template: `<ng-template #template>
	<mat-card fxLayout="column">
		<mat-toolbar>Create a new user</mat-toolbar>
	
		<form [formGroup]="signupForm" fxLayout="column" style="padding: 24px;">
			<mat-form-field>
				<input formControlName="email" matInput placeholder="Email" required type="email" name="email">
			</mat-form-field>
	
			<mat-form-field>
				<input formControlName="password" matInput placeholder="Password" required type="password" name="password">
			</mat-form-field>
			<div *ngIf="profileFields.length > 0">
				<materia-param-input [showCheckbox]="false" [form]="signupForm" [param]="param" *ngFor="let param of profileFields"></materia-param-input>
			</div>

			<div>
				<button (click)="signup.emit(signupForm.value)" mat-raised-button color="primary">Create</button>
				<button (click)="cancel.emit()" mat-raised-button>Cancel</button>
			</div>
		</form>
	</mat-card>
</ng-template>`,
                styles: [`mat-card{width:300px;margin:0p;padding:0}`]
            },] },
];
/** @nocollapse */
SignupFormComponent.ctorParameters = () => [
    { type: FormBuilder, },
];
SignupFormComponent.propDecorators = {
    "signup": [{ type: Output },],
    "cancel": [{ type: Output },],
    "template": [{ type: ViewChild, args: ['template',] },],
    "profileFields": [{ type: Input },],
};
function SignupFormComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    SignupFormComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    SignupFormComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    SignupFormComponent.propDecorators;
    /** @type {?} */
    SignupFormComponent.prototype.signup;
    /** @type {?} */
    SignupFormComponent.prototype.cancel;
    /** @type {?} */
    SignupFormComponent.prototype.template;
    /** @type {?} */
    SignupFormComponent.prototype.signupForm;
    /** @type {?} */
    SignupFormComponent.prototype.profileFields;
    /** @type {?} */
    SignupFormComponent.prototype.fb;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbnVwLWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG1hdGVyaWEvdXNlcnMvIiwic291cmNlcyI6WyJzaWdudXAtZm9ybS9zaWdudXAtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBNkJwRSxNQUFNOzs7O0lBVUosWUFBb0IsRUFBZTtRQUFmLE9BQUUsR0FBRixFQUFFLENBQWE7c0JBVEcsSUFBSSxZQUFZLEVBQUU7c0JBQ2pCLElBQUksWUFBWSxFQUFFO0tBUWxCOzs7OztJQUV2QyxXQUFXLENBQUMsT0FBTztRQUNqQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNoRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakI7S0FDRjs7OztJQUNPLFFBQVE7UUFDZCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ2hELEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQ2hDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO1NBQ3BDLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDOzs7OztJQUcxQixtQkFBbUI7UUFDekIsRUFBRSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7U0FBRTtRQUN4Qyx1QkFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNuQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNoRDtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2FBQ3pCO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7Ozs7SUFHaEIsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUNqQjs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3pDOzs7WUF0RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQXNCRztnQkFDYixNQUFNLEVBQUUsQ0FBQywyQ0FBMkMsQ0FBQzthQUN0RDs7OztZQTVCUSxXQUFXOzs7dUJBOEJqQixNQUFNO3VCQUNOLE1BQU07eUJBRU4sU0FBUyxTQUFDLFVBQVU7OEJBSXBCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIFZpZXdDaGlsZCxcbiAgVGVtcGxhdGVSZWYsXG4gIElucHV0LFxuICBPbkNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgVmFsaWRhdG9ycywgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtYXRlcmlhLXNpZ251cC1mb3JtJyxcbiAgdGVtcGxhdGU6IGA8bmctdGVtcGxhdGUgI3RlbXBsYXRlPlxuXHQ8bWF0LWNhcmQgZnhMYXlvdXQ9XCJjb2x1bW5cIj5cblx0XHQ8bWF0LXRvb2xiYXI+Q3JlYXRlIGEgbmV3IHVzZXI8L21hdC10b29sYmFyPlxuXHRcblx0XHQ8Zm9ybSBbZm9ybUdyb3VwXT1cInNpZ251cEZvcm1cIiBmeExheW91dD1cImNvbHVtblwiIHN0eWxlPVwicGFkZGluZzogMjRweDtcIj5cblx0XHRcdDxtYXQtZm9ybS1maWVsZD5cblx0XHRcdFx0PGlucHV0IGZvcm1Db250cm9sTmFtZT1cImVtYWlsXCIgbWF0SW5wdXQgcGxhY2Vob2xkZXI9XCJFbWFpbFwiIHJlcXVpcmVkIHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJlbWFpbFwiPlxuXHRcdFx0PC9tYXQtZm9ybS1maWVsZD5cblx0XG5cdFx0XHQ8bWF0LWZvcm0tZmllbGQ+XG5cdFx0XHRcdDxpbnB1dCBmb3JtQ29udHJvbE5hbWU9XCJwYXNzd29yZFwiIG1hdElucHV0IHBsYWNlaG9sZGVyPVwiUGFzc3dvcmRcIiByZXF1aXJlZCB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPVwicGFzc3dvcmRcIj5cblx0XHRcdDwvbWF0LWZvcm0tZmllbGQ+XG5cdFx0XHQ8ZGl2ICpuZ0lmPVwicHJvZmlsZUZpZWxkcy5sZW5ndGggPiAwXCI+XG5cdFx0XHRcdDxtYXRlcmlhLXBhcmFtLWlucHV0IFtzaG93Q2hlY2tib3hdPVwiZmFsc2VcIiBbZm9ybV09XCJzaWdudXBGb3JtXCIgW3BhcmFtXT1cInBhcmFtXCIgKm5nRm9yPVwibGV0IHBhcmFtIG9mIHByb2ZpbGVGaWVsZHNcIj48L21hdGVyaWEtcGFyYW0taW5wdXQ+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PGJ1dHRvbiAoY2xpY2spPVwic2lnbnVwLmVtaXQoc2lnbnVwRm9ybS52YWx1ZSlcIiBtYXQtcmFpc2VkLWJ1dHRvbiBjb2xvcj1cInByaW1hcnlcIj5DcmVhdGU8L2J1dHRvbj5cblx0XHRcdFx0PGJ1dHRvbiAoY2xpY2spPVwiY2FuY2VsLmVtaXQoKVwiIG1hdC1yYWlzZWQtYnV0dG9uPkNhbmNlbDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9mb3JtPlxuXHQ8L21hdC1jYXJkPlxuPC9uZy10ZW1wbGF0ZT5gLFxuICBzdHlsZXM6IFtgbWF0LWNhcmR7d2lkdGg6MzAwcHg7bWFyZ2luOjBwO3BhZGRpbmc6MH1gXVxufSlcbmV4cG9ydCBjbGFzcyBTaWdudXBGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBAT3V0cHV0KCkgc2lnbnVwOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGNhbmNlbDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlJykgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgc2lnbnVwRm9ybTogRm9ybUdyb3VwO1xuXG4gIEBJbnB1dCgpIHByb2ZpbGVGaWVsZHM6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZiOiBGb3JtQnVpbGRlcikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMucHJvZmlsZUZpZWxkcyAmJiBjaGFuZ2VzLnByb2ZpbGVGaWVsZHMuY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLmluaXRGb3JtKCk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgaW5pdEZvcm0oKSB7XG4gICAgdGhpcy5zaWdudXBGb3JtID0gdGhpcy5mYi5ncm91cChPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICBlbWFpbDogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgIHBhc3N3b3JkOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdXG4gICAgfSwgdGhpcy5nZXRQcm9maWxlRm9ybUdyb3VwKCkpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJvZmlsZUZvcm1Hcm91cCgpIHtcbiAgICBpZiAoISB0aGlzLnByb2ZpbGVGaWVsZHMpIHsgcmV0dXJuIHt9OyB9XG4gICAgY29uc3QgcmVzdWx0OiBhbnkgPSB7fTtcbiAgICB0aGlzLnByb2ZpbGVGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBpZiAoZmllbGQucmVxdWlyZWQpIHtcbiAgICAgICAgcmVzdWx0W2ZpZWxkLm5hbWVdID0gWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtmaWVsZC5uYW1lXSA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmluaXRGb3JtKCk7XG4gIH1cblxuICBzaWdudXBDbGljaygpIHtcbiAgICB0aGlzLnNpZ251cC5lbWl0KHRoaXMuc2lnbnVwRm9ybS52YWx1ZSk7XG4gIH1cbn1cbiJdfQ==