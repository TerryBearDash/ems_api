/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Validators, FormBuilder } from '@angular/forms';
import { AddonSetup } from '@materia/addons';
import { HttpClient } from '@angular/common/http';
/**
 * @record
 */
export function IUserManagementSetup() { }
function IUserManagementSetup_tsickle_Closure_declarations() {
    /** @type {?} */
    IUserManagementSetup.prototype.method;
    /** @type {?} */
    IUserManagementSetup.prototype.user_profile_enabled;
    /** @type {?} */
    IUserManagementSetup.prototype.user_profile_entity;
    /** @type {?} */
    IUserManagementSetup.prototype.email_verification;
    /** @type {?} */
    IUserManagementSetup.prototype.email_addon;
}
let UserManagementSetupComponent = class UserManagementSetupComponent {
    /**
     * @param {?} fb
     * @param {?} http
     */
    constructor(fb, http) {
        this.fb = fb;
        this.http = http;
        this.save = new EventEmitter();
        this.cancel = new EventEmitter();
        this.emailAddons = [];
    }
    /**
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    getSettingsProperty(property, defaultValue) {
        return (this.settings && this.settings[property]) || defaultValue;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.http
            .get(this.baseUrl + '/infos')
            .toPromise()
            .then(res => {
            this.loginForm = this.fb.group({
                method: [
                    this.getSettingsProperty('method', 'session'),
                    Validators.required
                ],
                user_profile_enabled: [
                    this.getSettingsProperty('user_profile_enabled', false)
                ],
                user_profile_entity: [
                    this.getSettingsProperty('user_profile_entity', null)
                ],
                email_verification: [
                    this.getSettingsProperty('email_verification', false)
                ],
                email_addon: [this.getSettingsProperty('email_addon', false)],
            });
            this.entities = res.entities.filter(entity => !entity.fromAddon);
            this.emailAddons = res.addons.filter(addon => addon.package === '@materia/sendgrid' ||
                addon.package === '@materia/mailjet');
            if (this.emailAddons.length === 0) {
                this.loginForm.get('email_verification').disable();
                this.loginForm.get('email_addon').disable();
            }
            if (!this.settings || !this.settings.email_verification) {
                this.loginForm.get('email_addon').disable();
            }
            if (!this.settings || !this.settings.user_profile_enabled) {
                this.loginForm.get('user_profile_entity').disable();
            }
            if (this.entities.length === 0) {
                this.loginForm.get('user_profile_enabled').setValue(false);
                this.loginForm.get('user_profile_entity').setValue(null);
                this.loginForm.get('user_profile_enabled').disable();
                this.loginForm.get('user_profile_entity').disable();
            }
            this.loginForm
                .get('user_profile_enabled')
                .valueChanges.subscribe(val => {
                if (val) {
                    this.loginForm.get('user_profile_entity').enable();
                }
                else {
                    this.loginForm.get('user_profile_entity').disable();
                }
            });
            this.loginForm.get('email_verification').valueChanges.subscribe(val => {
                if (val) {
                    this.loginForm.get('email_addon').enable();
                }
                else {
                    this.loginForm.get('email_addon').disable();
                }
            });
        });
    }
    /**
     * @return {?}
     */
    finish() {
        if (this.loginForm.valid) {
            this.save.emit(this.loginForm.value);
        }
    }
    /**
     * @return {?}
     */
    close() {
        this.cancel.emit();
    }
};
UserManagementSetupComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-user-management-setup',
                template: `<form *ngIf="loginForm" [formGroup]="loginForm" style="max-width: 400px">
	<h2 mat-dialog-title fxLayout="row">
		<span fxFlex style="position: relative; top: 3px; left: 5px;">User Management - Setup</span>
		<button (click)="close()" tabindex="-1" mat-icon-button>
			<mat-icon>close</mat-icon>
		</button>
	</h2>
	<mat-dialog-content>
		<div fxLayout="column">
			<h3>
				Authentication method
			</h3>
			<mat-radio-group formControlName="method" fxLayout="column">
				<mat-radio-button value="token">Token based authentication (mobile ready)</mat-radio-button>
				<mat-radio-button value="session">Session based authentication</mat-radio-button>
			</mat-radio-group>
			
			<h3>
				<mat-checkbox formControlName="user_profile_enabled">User profile</mat-checkbox>
			</h3>
			<mat-form-field *ngIf="entities && entities.length > 0; else noEntities">
				<mat-select placeholder="Select the user profile entity" formControlName="user_profile_entity">
					<mat-option *ngFor="let e of entities" [value]="e.name">{{ e.name }}</mat-option>
				</mat-select>
			</mat-form-field>
			<ng-template #noEntities>
				<div class="warning">
					No entity found. You need an entity to add custom fields to your users.
				</div>
			</ng-template>
		
			<h3>
				<mat-checkbox formControlName="email_verification">Emails enabled</mat-checkbox>
			</h3>

			<mat-form-field *ngIf="emailAddons && emailAddons.length > 0; else noEmailAddon">
				<mat-select placeholder="Select your emailing addon" formControlName="email_addon">
					<mat-option *ngFor="let e of emailAddons" [value]="e.package">{{ e.name }}</mat-option>
				</mat-select>
			</mat-form-field>

			<ng-template #noEmailAddon>
				<div class="warning">You need
					<strong>Sendgrid</strong> or
					<strong>Mailjet</strong> addon installed
					<br>to send email from your Materia Application such as a signup email</div>
			</ng-template>
		</div>
	</mat-dialog-content>
	<mat-dialog-actions>
		<button mat-raised-button color="primary" (click)="finish()">Save</button>
		<button mat-raised-button (click)="close()">Cancel</button>
	</mat-dialog-actions>
</form>`,
                styles: [`mat-form-field{width:100%;margin:0 5px}.mat-dialog-content{margin:0;padding:0 24px}.mat-dialog-actions{padding:12px 24px}h3{margin-top:16px;margin-bottom:8px}.warning{margin:16px 0;padding:8px;border:1px solid #f44336;color:#f44336}`],
                providers: [FormBuilder]
            },] },
];
/** @nocollapse */
UserManagementSetupComponent.ctorParameters = () => [
    { type: FormBuilder, },
    { type: HttpClient, },
];
UserManagementSetupComponent.propDecorators = {
    "app": [{ type: Input },],
    "settings": [{ type: Input },],
    "baseUrl": [{ type: Input },],
    "token": [{ type: Input },],
    "save": [{ type: Output },],
    "cancel": [{ type: Output },],
};
UserManagementSetupComponent = tslib_1.__decorate([
    AddonSetup('@materia/users'),
    tslib_1.__metadata("design:paramtypes", [FormBuilder, HttpClient])
], UserManagementSetupComponent);
export { UserManagementSetupComponent };
function UserManagementSetupComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    UserManagementSetupComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    UserManagementSetupComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    UserManagementSetupComponent.propDecorators;
    /** @type {?} */
    UserManagementSetupComponent.prototype.app;
    /** @type {?} */
    UserManagementSetupComponent.prototype.settings;
    /** @type {?} */
    UserManagementSetupComponent.prototype.baseUrl;
    /** @type {?} */
    UserManagementSetupComponent.prototype.token;
    /** @type {?} */
    UserManagementSetupComponent.prototype.save;
    /** @type {?} */
    UserManagementSetupComponent.prototype.cancel;
    /** @type {?} */
    UserManagementSetupComponent.prototype.loginForm;
    /** @type {?} */
    UserManagementSetupComponent.prototype.entities;
    /** @type {?} */
    UserManagementSetupComponent.prototype.emailAddons;
    /** @type {?} */
    UserManagementSetupComponent.prototype.fb;
    /** @type {?} */
    UserManagementSetupComponent.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,