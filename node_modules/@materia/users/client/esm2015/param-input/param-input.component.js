/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';
const /** @type {?} */ DefaultComponent = Object.freeze({
    text: 'text',
    number: 'text',
    date: 'date',
    float: 'text',
    boolean: 'switch'
});
export class ParamInputComponent {
    constructor() {
        this.showAsterisk = true;
        this.showCheckbox = true;
        this.changed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get requiredError() {
        return (this.form.get(this.param.name) &&
            this.form.get(this.param.name).hasError('required'));
    }
    /**
     * @return {?}
     */
    get checkboxName() {
        return `${this.param.name}_check`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.type = this.param.type;
        if (!this.label) {
            this.label = this.param.name;
            if (this.param.required && this.showAsterisk) {
                this.label += '*';
            }
        }
        if (this.param && this.param.component) {
            if (this.param.component === 'input') {
                if (this.param.type === 'text' || this.param.type === 'string') {
                    this.actualComponent = 'text';
                }
                else if (this.param.type === 'number') {
                    this.actualComponent = 'number';
                }
                else {
                    this.actualComponent = this.param.component;
                }
            }
            else {
                if (this.param.component === 'datePicker') {
                    this.actualComponent = 'date';
                }
                else if (this.param.component === 'timePicker') {
                    this.actualComponent = 'time';
                }
                else if (this.param.component === 'dateTimePicker') {
                    this.actualComponent = 'datetime-local';
                }
                else {
                    this.actualComponent = this.param.component;
                }
            }
        }
        else {
            this.actualComponent = DefaultComponent[this.type];
        }
        if (this.showCheckbox && !this.param.required) {
            this.form.get(this.param.name).valueChanges.subscribe(val => {
                if (val) {
                    this.form.get(this.checkboxName).setValue(true);
                }
                else {
                    this.form.get(this.checkboxName).setValue(false);
                }
            });
        }
    }
}
ParamInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-param-input',
                template: `<div [formGroup]="form" fxLayout="row">
	<div fxLayout="row" fxFlex>
		<mat-checkbox [formControlName]="checkboxName" *ngIf=" ! param.required && showCheckbox && type !== 'boolean'">
		</mat-checkbox>
		<mat-form-field *ngIf="type != 'boolean' && actualComponent != 'markdown' && actualComponent != 'article'" fxFlex>
			<input *ngIf="type != 'boolean' && type != 'date' && type != 'float' && actualComponent != 'textarea'" tabindex="0" matInput
			 [formControlName]="param.name" [placeholder]="label" [type]="actualComponent" />
			<input *ngIf="type == 'float'" matInput tabindex="0" type="number" step="any" [placeholder]="label" [formControlName]="param.name"
			/>
			<textarea *ngIf="actualComponent == 'textarea'" tabindex="0" matInput [placeholder]="label" [formControlName]="param.name"></textarea>
			<input *ngIf="type == 'date'" matInput tabindex="0" [formControlName]="param.name" [matDatepicker]="picker" [placeholder]="param.name">
			<mat-datepicker-toggle *ngIf="type == 'date'" matSuffix [for]="picker"></mat-datepicker-toggle>
			<mat-datepicker #picker></mat-datepicker>
			<mat-error *ngIf="requiredError">
				{{param.name}} is
				<strong>required</strong>
			</mat-error>
		</mat-form-field>
		<mat-checkbox *ngIf="type == 'boolean'" tabindex="0" [formControlName]="param.name" style="top: 0;">{{label}}</mat-checkbox>
		<div class="markdown" *ngIf="actualComponent == 'markdown'" fxLayout="column" fxFlex>
			<label>{{label}}</label>
			<textarea tabindex="0" [formControlName]="param.name" simplemde="{spellChecker: false, toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', 'image', 'table']}"></textarea>
		</div>
	</div>
</div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
ParamInputComponent.ctorParameters = () => [];
ParamInputComponent.propDecorators = {
    "param": [{ type: Input },],
    "disabled": [{ type: Input },],
    "form": [{ type: Input },],
    "label": [{ type: Input },],
    "showAsterisk": [{ type: Input },],
    "showCheckbox": [{ type: Input },],
    "changed": [{ type: Output },],
};
function ParamInputComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ParamInputComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ParamInputComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ParamInputComponent.propDecorators;
    /** @type {?} */
    ParamInputComponent.prototype.param;
    /** @type {?} */
    ParamInputComponent.prototype.disabled;
    /** @type {?} */
    ParamInputComponent.prototype.form;
    /** @type {?} */
    ParamInputComponent.prototype.label;
    /** @type {?} */
    ParamInputComponent.prototype.showAsterisk;
    /** @type {?} */
    ParamInputComponent.prototype.showCheckbox;
    /** @type {?} */
    ParamInputComponent.prototype.type;
    /** @type {?} */
    ParamInputComponent.prototype.actualComponent;
    /** @type {?} */
    ParamInputComponent.prototype.changed;
}

//# sourceMappingURL=data:application/json;base64,