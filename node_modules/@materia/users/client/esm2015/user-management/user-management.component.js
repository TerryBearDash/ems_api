/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { MatDialog, MatSnackBar } from '@angular/material';
import { AddonView } from '@materia/addons';
import { HttpClient } from '@angular/common/http';
import { SignupFormComponent } from '../signup-form/signup-form.component';
/**
 * @record
 */
export function User() { }
function User_tsickle_Closure_declarations() {
    /** @type {?} */
    User.prototype.email;
    /** @type {?} */
    User.prototype.gravatar;
    /** @type {?} */
    User.prototype.name;
}
let UserManagementViewComponent = class UserManagementViewComponent {
    /**
     * @param {?} dialog
     * @param {?} http
     * @param {?} snackbar
     */
    constructor(dialog, http, snackbar) {
        this.dialog = dialog;
        this.http = http;
        this.snackbar = snackbar;
        this.openSetup = new EventEmitter();
        this.loading = true;
        this.users = [];
        this.nbUsers = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refreshList();
        this.refreshConnectedUser();
        this.getProfileParams();
    }
    /**
     * @return {?}
     */
    getProfileParams() {
        if (this.settings &&
            this.settings.user_profile_enabled &&
            this.settings.user_profile_entity) {
            return this.http
                .get(`${this.baseUrl}/infos`)
                .toPromise()
                .then(res => {
                const /** @type {?} */ profileEntity = res.entities.find(entity => entity.name === this.settings.user_profile_entity);
                this.profileFields = profileEntity.fields.filter(field => field.name !== 'id_user' &&
                    (!field.primary || (field.primary && !field.autoIncrement)));
            })
                .catch(e => {
                this.profileFields = [];
            });
        }
        else {
            this.profileFields = [];
            return Promise.resolve();
        }
    }
    /**
     * @return {?}
     */
    refreshList() {
        this.loading = true;
        this.http
            .post(`${this.baseUrl}/entities/user/queries/listWithGravatar`, {})
            .subscribe(res => {
            this.users = res.data;
            this.nbUsers = res.count;
            this.loading = false;
        });
    }
    /**
     * @return {?}
     */
    refreshConnectedUser() {
        this.http.get(`${this.apiUrl}/user/me`).subscribe(res => {
            this.me = res;
        }, () => (this.me = null));
    }
    /**
     * @return {?}
     */
    configureEmails() {
        this.displayEmailSettings = true;
    }
    /**
     * @return {?}
     */
    hideEmailSettings() {
        this.displayEmailSettings = false;
    }
    /**
     * @return {?}
     */
    openSignupDialog() {
        this.signupDialog = this.dialog.open(this.signupDialogComp.template, {
            panelClass: 'no-padding'
        });
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    saveEmailSettings(settings) {
        this.http
            .post(`${this.baseUrl}/addons/@materia/users/setup`, settings)
            .subscribe(res => {
            this.snackbar.open('Settings saved!', null, {
                duration: 3000
            });
            this.hideEmailSettings();
            this.settings = settings;
        });
    }
    /**
     * @return {?}
     */
    closeSignupDialog() {
        this.signupDialog.close();
    }
    /**
     * @param {?} user
     * @return {?}
     */
    signup(user) {
        this.http.post(`${this.apiUrl}/user/signup`, user).subscribe(() => {
            this.closeSignupDialog();
            this.refreshList();
            this.refreshConnectedUser();
        });
    }
    /**
     * @return {?}
     */
    logout() {
        this.http.post(`${this.apiUrl}/user/logout`, {}).subscribe(() => {
            this.refreshConnectedUser();
        }, () => this.refreshConnectedUser());
    }
};
UserManagementViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-user-management',
                template: `<div fxLayout="column" fxFlex>
	<div *ngIf="me" style="padding: 8px 16px; background-color: #4CAF50; color: white;">
		Currently connected as {{me.email}} (<a style="text-decoration: underline; cursor: pointer;" (click)="logout()">Logout</a>)
	</div>
	<div fxLayout="row" fxFlex>
		<mat-card fxLayout="column" fxFlex *ngIf="!loading; else loadingUsers">
			<mat-toolbar fxLayout="row" fxLayoutAlign="start center">
				<mat-icon>people</mat-icon>
				<span>
					Users
				</span>
				<span fxFlex></span>
				<button *ngIf="!displayEmailSettings && settings.email_verification && settings.email_addon" style="margin-right: 8px;" (click)="configureEmails()" mat-button>Configure emails</button>
				<button mat-mini-fab (click)="openSignupDialog()" matTooltip="New User" matTooltipPosition="left" style="width: 31px; height: 31px;">
					<mat-icon style="position: relative; top: -6px; left: -4px;">add</mat-icon>
				</button>
			</mat-toolbar>
			<div *ngIf="users && users.length; else noUser" style="border-top: 1px solid #EEE; overflow-y: auto;" fxLayout="column" fxFlex>
				<div fxLayout="row" fxLayoutAlign="start center" *ngFor="let user of users" style="border-bottom: 1px solid #EEE; cursor: pointer;min-height: 40px">
					<img [src]="user.gravatar" class="avatar" style="margin: 0 8px; width:32px; height:32px;border-radius: 100%" />
					<div style="color: #999; padding-top: 0">{{user.email}}</div>
				</div>
			</div>
			<ng-template #noUser>
				<div fxFlex fxLayout="column" fxLayoutAlign="center center" class="no-users">
					<span>There is no users registered yet</span>
					<div>
						<button (click)="openSignupDialog()" mat-raised-button color="primary" [style.margin]="'15px'" [style.color]="'white'">Create
							a user</button>
					</div>
				</div>
			</ng-template>
		</mat-card>
		<ng-template #loadingUsers>
			<mat-card fxLayout="column" fxFlex fxLayoutAlign="center center">
				<mat-spinner></mat-spinner>
			</mat-card>
		</ng-template>
		<div style="margin: 8px;" *ngIf="displayEmailSettings" fxLayout="column" fxFlex>
			<mat-toolbar fxLayout="row" fxLayoutAlign="start center">
				<button mat-icon-button (click)="hideEmailSettings()" matTooltip="Hide email settings" matTooltipPosition="right">
					<mat-icon>arrow_back</mat-icon>
				</button>
				<mat-icon>mail</mat-icon>
				<span>
					Emails
				</span>
				<span fxFlex></span>
			</mat-toolbar>
			<materia-user-management-email-settings [settings]="settings" [baseUrl]="baseUrl"
				(hide)="hideEmailSettings()" (save)="saveEmailSettings($event)" fxFlex style="overflow-y: auto;">
			</materia-user-management-email-settings>
		</div>
	</div>
</div>
<materia-signup-form #signupFormTemplate [profileFields]="profileFields" (signup)="signup($event)" (cancel)="closeSignupDialog()"></materia-signup-form>`,
                styles: [`:host{flex:1 1 0}mat-card{margin:8px;padding:0}mat-icon{margin:2px 8px}.no-users{font-style:italic}`],
                providers: []
            },] },
];
/** @nocollapse */
UserManagementViewComponent.ctorParameters = () => [
    { type: MatDialog, },
    { type: HttpClient, },
    { type: MatSnackBar, },
];
UserManagementViewComponent.propDecorators = {
    "app": [{ type: Input },],
    "settings": [{ type: Input },],
    "baseUrl": [{ type: Input },],
    "apiUrl": [{ type: Input },],
    "openSetup": [{ type: Output },],
    "signupDialogComp": [{ type: ViewChild, args: [SignupFormComponent,] },],
};
UserManagementViewComponent = tslib_1.__decorate([
    AddonView('@materia/users'),
    tslib_1.__metadata("design:paramtypes", [MatDialog,
        HttpClient,
        MatSnackBar])
], UserManagementViewComponent);
export { UserManagementViewComponent };
function UserManagementViewComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    UserManagementViewComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    UserManagementViewComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    UserManagementViewComponent.propDecorators;
    /** @type {?} */
    UserManagementViewComponent.prototype.app;
    /** @type {?} */
    UserManagementViewComponent.prototype.settings;
    /** @type {?} */
    UserManagementViewComponent.prototype.baseUrl;
    /** @type {?} */
    UserManagementViewComponent.prototype.apiUrl;
    /** @type {?} */
    UserManagementViewComponent.prototype.openSetup;
    /** @type {?} */
    UserManagementViewComponent.prototype.signupDialogComp;
    /** @type {?} */
    UserManagementViewComponent.prototype.loading;
    /** @type {?} */
    UserManagementViewComponent.prototype.me;
    /** @type {?} */
    UserManagementViewComponent.prototype.users;
    /** @type {?} */
    UserManagementViewComponent.prototype.nbUsers;
    /** @type {?} */
    UserManagementViewComponent.prototype.signupDialog;
    /** @type {?} */
    UserManagementViewComponent.prototype.profileFields;
    /** @type {?} */
    UserManagementViewComponent.prototype.displayEmailSettings;
    /** @type {?} */
    UserManagementViewComponent.prototype.dialog;
    /** @type {?} */
    UserManagementViewComponent.prototype.http;
    /** @type {?} */
    UserManagementViewComponent.prototype.snackbar;
}

//# sourceMappingURL=data:application/json;base64,