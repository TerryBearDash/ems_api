{"version":3,"sources":["null","ng://@materia/users/signup-form/signup-form.component.ts","ng://@materia/users/user-management/user-management.component.ts","ng://@materia/users/user-management-setup/user-management-setup.component.ts","ng://@materia/users/param-input/param-input.component.ts","ng://@materia/users/emails-settings/email-settings.component.ts","ng://@materia/users/user-management.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","SignupFormComponent","fb","this","EventEmitter","prototype","ngOnChanges","changes","profileFields","currentValue","initForm","signupForm","group","assign","email","Validators","required","password","getProfileFormGroup","result","forEach","field","name","ngOnInit","signupClick","signup","emit","value","Component","args","selector","template","styles","FormBuilder","Output","ViewChild","Input","UserManagementViewComponent","dialog","http","snackbar","refreshList","refreshConnectedUser","getProfileParams","_this","settings","user_profile_enabled","user_profile_entity","get","baseUrl","toPromise","then","res","profileEntity","entities","find","entity","fields","filter","primary","autoIncrement","catch","e","Promise","resolve","loading","post","subscribe","users","data","nbUsers","count","apiUrl","me","configureEmails","displayEmailSettings","hideEmailSettings","openSignupDialog","signupDialog","open","signupDialogComp","panelClass","saveEmailSettings","duration","closeSignupDialog","close","user","logout","providers","MatDialog","HttpClient","MatSnackBar","AddonView","UserManagementSetupComponent","getSettingsProperty","property","defaultValue","loginForm","method","email_verification","email_addon","fromAddon","emailAddons","addons","addon","package","disable","setValue","valueChanges","val","enable","finish","valid","save","cancel","AddonSetup","DefaultComponent","freeze","text","number","date","float","boolean","ParamInputComponent","form","param","hasError","type","label","showAsterisk","component","actualComponent","showCheckbox","checkboxName","EmailSettingsComponent","emailForm","static_salt","template_signup","redirect_signup","subject_signup","subject_lost_password","subject_change_email","template_lost_password","redirect_lost_password","template_change_email","redirect_change_email","refreshTemplates","limit","templates","row","OwnerId","map","Name","id","ID","hide","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","FlexLayoutModule","MatRippleModule","MatButtonModule","MatSnackBarModule","MatCardModule","MatIconModule","MatDialogModule","MatInputModule","MatTooltipModule","MatCheckboxModule","MatSelectModule","MatToolbarModule","MatDatepickerModule","MatNativeDateModule","MatExpansionModule","MatListModule","MatRadioModule","MatStepperModule","MatProgressSpinnerModule","declarations","exports","entryComponents","UserManagementModule","Addon"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  ViewChild,\n  TemplateRef,\n  Input,\n  OnChanges\n} from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'materia-signup-form',\n  template: `<ng-template #template>\n\t<mat-card fxLayout=\"column\">\n\t\t<mat-toolbar>Create a new user</mat-toolbar>\n\t\n\t\t<form [formGroup]=\"signupForm\" fxLayout=\"column\" style=\"padding: 24px;\">\n\t\t\t<mat-form-field>\n\t\t\t\t<input formControlName=\"email\" matInput placeholder=\"Email\" required type=\"email\" name=\"email\">\n\t\t\t</mat-form-field>\n\t\n\t\t\t<mat-form-field>\n\t\t\t\t<input formControlName=\"password\" matInput placeholder=\"Password\" required type=\"password\" name=\"password\">\n\t\t\t</mat-form-field>\n\t\t\t<div *ngIf=\"profileFields.length > 0\">\n\t\t\t\t<materia-param-input [showCheckbox]=\"false\" [form]=\"signupForm\" [param]=\"param\" *ngFor=\"let param of profileFields\"></materia-param-input>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<button (click)=\"signup.emit(signupForm.value)\" mat-raised-button color=\"primary\">Create</button>\n\t\t\t\t<button (click)=\"cancel.emit()\" mat-raised-button>Cancel</button>\n\t\t\t</div>\n\t\t</form>\n\t</mat-card>\n</ng-template>`,\n  styles: [`mat-card{width:300px;margin:0p;padding:0}`]\n})\nexport class SignupFormComponent implements OnInit, OnChanges {\n  @Output() signup: EventEmitter<any> = new EventEmitter();\n  @Output() cancel: EventEmitter<void> = new EventEmitter();\n\n  @ViewChild('template') template: TemplateRef<any>;\n\n  signupForm: FormGroup;\n\n  @Input() profileFields: any;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnChanges(changes) {\n    if (changes.profileFields && changes.profileFields.currentValue) {\n      this.initForm();\n    }\n  }\n  private initForm() {\n    this.signupForm = this.fb.group(Object.assign({}, {\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    }, this.getProfileFormGroup()));\n  }\n\n  private getProfileFormGroup() {\n    if (! this.profileFields) { return {}; }\n    const result: any = {};\n    this.profileFields.forEach(field => {\n      if (field.required) {\n        result[field.name] = ['', Validators.required];\n      } else {\n        result[field.name] = '';\n      }\n    });\n    return result;\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  signupClick() {\n    this.signup.emit(this.signupForm.value);\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild\n} from '@angular/core';\nimport { MatDialog, MatDialogRef, MatSnackBar } from '@angular/material';\nimport { AddonView } from '@materia/addons';\nimport { HttpClient } from '@angular/common/http';\n\nimport { SignupFormComponent } from '../signup-form/signup-form.component';\n\nexport interface User {\n  email: string;\n  gravatar: string;\n  name: string;\n}\n@AddonView('@materia/users')\n@Component({\n  selector: 'materia-user-management',\n  template: `<div fxLayout=\"column\" fxFlex>\n\t<div *ngIf=\"me\" style=\"padding: 8px 16px; background-color: #4CAF50; color: white;\">\n\t\tCurrently connected as {{me.email}} (<a style=\"text-decoration: underline; cursor: pointer;\" (click)=\"logout()\">Logout</a>)\n\t</div>\n\t<div fxLayout=\"row\" fxFlex>\n\t\t<mat-card fxLayout=\"column\" fxFlex *ngIf=\"!loading; else loadingUsers\">\n\t\t\t<mat-toolbar fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\t\t\t\t<mat-icon>people</mat-icon>\n\t\t\t\t<span>\n\t\t\t\t\tUsers\n\t\t\t\t</span>\n\t\t\t\t<span fxFlex></span>\n\t\t\t\t<button *ngIf=\"!displayEmailSettings && settings.email_verification && settings.email_addon\" style=\"margin-right: 8px;\" (click)=\"configureEmails()\" mat-button>Configure emails</button>\n\t\t\t\t<button mat-mini-fab (click)=\"openSignupDialog()\" matTooltip=\"New User\" matTooltipPosition=\"left\" style=\"width: 31px; height: 31px;\">\n\t\t\t\t\t<mat-icon style=\"position: relative; top: -6px; left: -4px;\">add</mat-icon>\n\t\t\t\t</button>\n\t\t\t</mat-toolbar>\n\t\t\t<div *ngIf=\"users && users.length; else noUser\" style=\"border-top: 1px solid #EEE; overflow-y: auto;\" fxLayout=\"column\" fxFlex>\n\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngFor=\"let user of users\" style=\"border-bottom: 1px solid #EEE; cursor: pointer;min-height: 40px\">\n\t\t\t\t\t<img [src]=\"user.gravatar\" class=\"avatar\" style=\"margin: 0 8px; width:32px; height:32px;border-radius: 100%\" />\n\t\t\t\t\t<div style=\"color: #999; padding-top: 0\">{{user.email}}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ng-template #noUser>\n\t\t\t\t<div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"no-users\">\n\t\t\t\t\t<span>There is no users registered yet</span>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button (click)=\"openSignupDialog()\" mat-raised-button color=\"primary\" [style.margin]=\"'15px'\" [style.color]=\"'white'\">Create\n\t\t\t\t\t\t\ta user</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t</mat-card>\n\t\t<ng-template #loadingUsers>\n\t\t\t<mat-card fxLayout=\"column\" fxFlex fxLayoutAlign=\"center center\">\n\t\t\t\t<mat-spinner></mat-spinner>\n\t\t\t</mat-card>\n\t\t</ng-template>\n\t\t<div style=\"margin: 8px;\" *ngIf=\"displayEmailSettings\" fxLayout=\"column\" fxFlex>\n\t\t\t<mat-toolbar fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\t\t\t\t<button mat-icon-button (click)=\"hideEmailSettings()\" matTooltip=\"Hide email settings\" matTooltipPosition=\"right\">\n\t\t\t\t\t<mat-icon>arrow_back</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<mat-icon>mail</mat-icon>\n\t\t\t\t<span>\n\t\t\t\t\tEmails\n\t\t\t\t</span>\n\t\t\t\t<span fxFlex></span>\n\t\t\t</mat-toolbar>\n\t\t\t<materia-user-management-email-settings [settings]=\"settings\" [baseUrl]=\"baseUrl\"\n\t\t\t\t(hide)=\"hideEmailSettings()\" (save)=\"saveEmailSettings($event)\" fxFlex style=\"overflow-y: auto;\">\n\t\t\t</materia-user-management-email-settings>\n\t\t</div>\n\t</div>\n</div>\n<materia-signup-form #signupFormTemplate [profileFields]=\"profileFields\" (signup)=\"signup($event)\" (cancel)=\"closeSignupDialog()\"></materia-signup-form>`,\n  styles: [`:host{flex:1 1 0}mat-card{margin:8px;padding:0}mat-icon{margin:2px 8px}.no-users{font-style:italic}`],\n  providers: []\n})\nexport class UserManagementViewComponent implements OnInit {\n  @Input()\n  app;\n  @Input()\n  settings;\n\n  @Input()\n  baseUrl;\n  @Input()\n  apiUrl;\n\n  @Output()\n  openSetup = new EventEmitter<void>();\n\n  @ViewChild(SignupFormComponent)\n  signupDialogComp: SignupFormComponent;\n\n  loading = true;\n  me: any;\n  users: User[] = [];\n  nbUsers = 0;\n  signupDialog: MatDialogRef<any>;\n  profileFields: any[];\n  displayEmailSettings: boolean;\n\n  constructor(\n    private dialog: MatDialog,\n    private http: HttpClient,\n    private snackbar: MatSnackBar\n  ) {}\n\n  ngOnInit() {\n    this.refreshList();\n    this.refreshConnectedUser();\n    this.getProfileParams();\n  }\n\n  getProfileParams() {\n    if (\n      this.settings &&\n      this.settings.user_profile_enabled &&\n      this.settings.user_profile_entity\n    ) {\n      return this.http\n        .get<any>(`${this.baseUrl}/infos`)\n        .toPromise()\n        .then(res => {\n          const profileEntity = res.entities.find(\n            entity => entity.name === this.settings.user_profile_entity\n          );\n          this.profileFields = profileEntity.fields.filter(\n            field =>\n              field.name !== 'id_user' &&\n              (!field.primary || (field.primary && !field.autoIncrement))\n          );\n        })\n        .catch(e => {\n          this.profileFields = [];\n        });\n    } else {\n      this.profileFields = [];\n      return Promise.resolve();\n    }\n  }\n\n  refreshList() {\n    this.loading = true;\n    this.http\n      .post<any>(`${this.baseUrl}/entities/user/queries/listWithGravatar`, {})\n      .subscribe(res => {\n        this.users = res.data;\n        this.nbUsers = res.count;\n        this.loading = false;\n      });\n  }\n\n  refreshConnectedUser() {\n    this.http.get<any>(`${this.apiUrl}/user/me`).subscribe(\n      res => {\n        this.me = res;\n      },\n      () => (this.me = null)\n    );\n  }\n\n  configureEmails() {\n    this.displayEmailSettings = true;\n  }\n  hideEmailSettings() {\n    this.displayEmailSettings = false;\n  }\n  openSignupDialog() {\n    this.signupDialog = this.dialog.open(this.signupDialogComp.template, {\n      panelClass: 'no-padding'\n    });\n  }\n\n  saveEmailSettings(settings) {\n    this.http\n      .post<any>(`${this.baseUrl}/addons/@materia/users/setup`, settings)\n      .subscribe(res => {\n        this.snackbar.open('Settings saved!', null, {\n          duration: 3000\n        });\n        this.hideEmailSettings();\n        this.settings = settings;\n      });\n  }\n\n  closeSignupDialog() {\n    this.signupDialog.close();\n  }\n\n  signup(user) {\n    this.http.post<any>(`${this.apiUrl}/user/signup`, user).subscribe(() => {\n      this.closeSignupDialog();\n      this.refreshList();\n      this.refreshConnectedUser();\n    });\n  }\n\n  logout() {\n    this.http.post<any>(`${this.apiUrl}/user/logout`, {}).subscribe(\n      () => {\n        this.refreshConnectedUser();\n      },\n      () => this.refreshConnectedUser()\n    );\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport { AddonSetup } from '@materia/addons';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface IUserManagementSetup {\n  method: string;\n  user_profile_enabled: boolean;\n  user_profile_entity: string;\n  email_verification: boolean;\n  email_addon: string;\n}\n\n@AddonSetup('@materia/users')\n@Component({\n  selector: 'materia-user-management-setup',\n  template: `<form *ngIf=\"loginForm\" [formGroup]=\"loginForm\" style=\"max-width: 400px\">\n\t<h2 mat-dialog-title fxLayout=\"row\">\n\t\t<span fxFlex style=\"position: relative; top: 3px; left: 5px;\">User Management - Setup</span>\n\t\t<button (click)=\"close()\" tabindex=\"-1\" mat-icon-button>\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</h2>\n\t<mat-dialog-content>\n\t\t<div fxLayout=\"column\">\n\t\t\t<h3>\n\t\t\t\tAuthentication method\n\t\t\t</h3>\n\t\t\t<mat-radio-group formControlName=\"method\" fxLayout=\"column\">\n\t\t\t\t<mat-radio-button value=\"token\">Token based authentication (mobile ready)</mat-radio-button>\n\t\t\t\t<mat-radio-button value=\"session\">Session based authentication</mat-radio-button>\n\t\t\t</mat-radio-group>\n\t\t\t\n\t\t\t<h3>\n\t\t\t\t<mat-checkbox formControlName=\"user_profile_enabled\">User profile</mat-checkbox>\n\t\t\t</h3>\n\t\t\t<mat-form-field *ngIf=\"entities && entities.length > 0; else noEntities\">\n\t\t\t\t<mat-select placeholder=\"Select the user profile entity\" formControlName=\"user_profile_entity\">\n\t\t\t\t\t<mat-option *ngFor=\"let e of entities\" [value]=\"e.name\">{{ e.name }}</mat-option>\n\t\t\t\t</mat-select>\n\t\t\t</mat-form-field>\n\t\t\t<ng-template #noEntities>\n\t\t\t\t<div class=\"warning\">\n\t\t\t\t\tNo entity found. You need an entity to add custom fields to your users.\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t\n\t\t\t<h3>\n\t\t\t\t<mat-checkbox formControlName=\"email_verification\">Emails enabled</mat-checkbox>\n\t\t\t</h3>\n\n\t\t\t<mat-form-field *ngIf=\"emailAddons && emailAddons.length > 0; else noEmailAddon\">\n\t\t\t\t<mat-select placeholder=\"Select your emailing addon\" formControlName=\"email_addon\">\n\t\t\t\t\t<mat-option *ngFor=\"let e of emailAddons\" [value]=\"e.package\">{{ e.name }}</mat-option>\n\t\t\t\t</mat-select>\n\t\t\t</mat-form-field>\n\n\t\t\t<ng-template #noEmailAddon>\n\t\t\t\t<div class=\"warning\">You need\n\t\t\t\t\t<strong>Sendgrid</strong> or\n\t\t\t\t\t<strong>Mailjet</strong> addon installed\n\t\t\t\t\t<br>to send email from your Materia Application such as a signup email</div>\n\t\t\t</ng-template>\n\t\t</div>\n\t</mat-dialog-content>\n\t<mat-dialog-actions>\n\t\t<button mat-raised-button color=\"primary\" (click)=\"finish()\">Save</button>\n\t\t<button mat-raised-button (click)=\"close()\">Cancel</button>\n\t</mat-dialog-actions>\n</form>`,\n  styles: [`mat-form-field{width:100%;margin:0 5px}.mat-dialog-content{margin:0;padding:0 24px}.mat-dialog-actions{padding:12px 24px}h3{margin-top:16px;margin-bottom:8px}.warning{margin:16px 0;padding:8px;border:1px solid #f44336;color:#f44336}`],\n  providers: [FormBuilder]\n})\nexport class UserManagementSetupComponent implements OnInit {\n  @Input() app;\n  @Input() settings: IUserManagementSetup;\n  @Input() baseUrl: string;\n  @Input() token: string;\n  @Output() save = new EventEmitter<IUserManagementSetup>();\n  @Output() cancel = new EventEmitter<void>();\n\n  loginForm: FormGroup;\n  entities: any[];\n  emailAddons = [];\n\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n\n  private getSettingsProperty(property, defaultValue) {\n    return (this.settings && this.settings[property]) || defaultValue;\n  }\n\n  ngOnInit() {\n    this.http\n      .get<any>(this.baseUrl + '/infos')\n      .toPromise()\n      .then(res => {\n        this.loginForm = this.fb.group({\n          method: [\n            this.getSettingsProperty('method', 'session'),\n            Validators.required\n          ],\n          user_profile_enabled: [\n            this.getSettingsProperty('user_profile_enabled', false)\n          ],\n          user_profile_entity: [\n            this.getSettingsProperty('user_profile_entity', null)\n          ],\n          email_verification: [\n            this.getSettingsProperty('email_verification', false)\n          ],\n          email_addon: [this.getSettingsProperty('email_addon', false)],\n        });\n        this.entities = res.entities.filter(entity => ! entity.fromAddon);\n        this.emailAddons = res.addons.filter(\n          addon =>\n            addon.package === '@materia/sendgrid' ||\n            addon.package === '@materia/mailjet'\n        );\n\n        if (this.emailAddons.length === 0) {\n          this.loginForm.get('email_verification').disable();\n          this.loginForm.get('email_addon').disable();\n        }\n\n        if ( ! this.settings || ! this.settings.email_verification) {\n          this.loginForm.get('email_addon').disable();\n        }\n\n        if ( ! this.settings || ! this.settings.user_profile_enabled) {\n          this.loginForm.get('user_profile_entity').disable();\n        }\n\n        if (this.entities.length === 0) {\n          this.loginForm.get('user_profile_enabled').setValue(false);\n          this.loginForm.get('user_profile_entity').setValue(null);\n          this.loginForm.get('user_profile_enabled').disable();\n          this.loginForm.get('user_profile_entity').disable();\n        }\n        this.loginForm\n          .get('user_profile_enabled')\n          .valueChanges.subscribe(val => {\n            if (val) {\n              this.loginForm.get('user_profile_entity').enable();\n            } else {\n              this.loginForm.get('user_profile_entity').disable();\n            }\n          });\n\n        this.loginForm.get('email_verification').valueChanges.subscribe(val => {\n          if (val) {\n            this.loginForm.get('email_addon').enable();\n          } else {\n            this.loginForm.get('email_addon').disable();\n          }\n        });\n      });\n  }\n\n  finish() {\n    if (this.loginForm.valid) {\n      this.save.emit(this.loginForm.value);\n    }\n  }\n\n  close() {\n    this.cancel.emit();\n  }\n}\n","import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\n\nimport { FormGroup } from '@angular/forms';\n\nconst DefaultComponent = Object.freeze({\n  text: 'text',\n  number: 'text',\n  date: 'date',\n  float: 'text',\n  boolean: 'switch'\n});\n\n@Component({\n  selector: 'materia-param-input',\n  template: `<div [formGroup]=\"form\" fxLayout=\"row\">\n\t<div fxLayout=\"row\" fxFlex>\n\t\t<mat-checkbox [formControlName]=\"checkboxName\" *ngIf=\" ! param.required && showCheckbox && type !== 'boolean'\">\n\t\t</mat-checkbox>\n\t\t<mat-form-field *ngIf=\"type != 'boolean' && actualComponent != 'markdown' && actualComponent != 'article'\" fxFlex>\n\t\t\t<input *ngIf=\"type != 'boolean' && type != 'date' && type != 'float' && actualComponent != 'textarea'\" tabindex=\"0\" matInput\n\t\t\t [formControlName]=\"param.name\" [placeholder]=\"label\" [type]=\"actualComponent\" />\n\t\t\t<input *ngIf=\"type == 'float'\" matInput tabindex=\"0\" type=\"number\" step=\"any\" [placeholder]=\"label\" [formControlName]=\"param.name\"\n\t\t\t/>\n\t\t\t<textarea *ngIf=\"actualComponent == 'textarea'\" tabindex=\"0\" matInput [placeholder]=\"label\" [formControlName]=\"param.name\"></textarea>\n\t\t\t<input *ngIf=\"type == 'date'\" matInput tabindex=\"0\" [formControlName]=\"param.name\" [matDatepicker]=\"picker\" [placeholder]=\"param.name\">\n\t\t\t<mat-datepicker-toggle *ngIf=\"type == 'date'\" matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n\t\t\t<mat-datepicker #picker></mat-datepicker>\n\t\t\t<mat-error *ngIf=\"requiredError\">\n\t\t\t\t{{param.name}} is\n\t\t\t\t<strong>required</strong>\n\t\t\t</mat-error>\n\t\t</mat-form-field>\n\t\t<mat-checkbox *ngIf=\"type == 'boolean'\" tabindex=\"0\" [formControlName]=\"param.name\" style=\"top: 0;\">{{label}}</mat-checkbox>\n\t\t<div class=\"markdown\" *ngIf=\"actualComponent == 'markdown'\" fxLayout=\"column\" fxFlex>\n\t\t\t<label>{{label}}</label>\n\t\t\t<textarea tabindex=\"0\" [formControlName]=\"param.name\" simplemde=\"{spellChecker: false, toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', 'image', 'table']}\"></textarea>\n\t\t</div>\n\t</div>\n</div>`,\n  styles: [``]\n})\nexport class ParamInputComponent implements OnInit {\n  @Input() param: any;\n  @Input() disabled: boolean;\n\n  @Input() form: FormGroup;\n  @Input() label: string;\n\n  @Input() showAsterisk = true;\n  @Input() showCheckbox = true;\n\n  type: string;\n  actualComponent: string;\n\n  @Output() changed = new EventEmitter<any>();\n\n  get requiredError() {\n    return (\n      this.form.get(this.param.name) &&\n      this.form.get(this.param.name).hasError('required')\n    );\n  }\n\n  get checkboxName() {\n    return `${this.param.name}_check`;\n  }\n\n  constructor() {}\n\n  ngOnInit() {\n    this.type = this.param.type;\n\n    if (!this.label) {\n      this.label = this.param.name;\n      if (this.param.required && this.showAsterisk) {\n        this.label += '*';\n      }\n    }\n\n    if (this.param && this.param.component) {\n      if (this.param.component === 'input') {\n        if (this.param.type === 'text' || this.param.type === 'string') {\n          this.actualComponent = 'text';\n        } else if (this.param.type === 'number') {\n          this.actualComponent = 'number';\n        } else {\n          this.actualComponent = this.param.component;\n        }\n      } else {\n        if (this.param.component === 'datePicker') {\n          this.actualComponent = 'date';\n        } else if (this.param.component === 'timePicker') {\n          this.actualComponent = 'time';\n        } else if (this.param.component === 'dateTimePicker') {\n          this.actualComponent = 'datetime-local';\n        } else {\n          this.actualComponent = this.param.component;\n        }\n      }\n    } else {\n      this.actualComponent = DefaultComponent[this.type];\n    }\n\n    if (this.showCheckbox && !this.param.required) {\n      this.form.get(this.param.name).valueChanges.subscribe(val => {\n        if (val) {\n          this.form.get(this.checkboxName).setValue(true);\n        } else {\n          this.form.get(this.checkboxName).setValue(false);\n        }\n      });\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild\n} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatExpansionPanel } from '@angular/material';\n\n@Component({\n  selector: 'materia-user-management-email-settings',\n  template: `<form [formGroup]=\"emailForm\">\n\t<mat-accordion>\n\t\t<mat-expansion-panel #signupPanel [expanded]=\"true\" fxLayout=\"column\">\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tSignup\n\t\t\t</mat-expansion-panel-header>\n\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_signup\">\n\t\t\t\t</mat-form-field>\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_signup\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_signup\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\n\t\t<mat-expansion-panel #changeEmailPanel>\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tChange email\n\t\t\t</mat-expansion-panel-header>\n\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_change_email\">\n\t\t\t\t</mat-form-field>\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_change_email\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_change_email\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\n\t\t<mat-expansion-panel #lostPasswordPanel fxLayout=\"column\">\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tLost password\n\t\t\t</mat-expansion-panel-header>\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_lost_password\">\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_lost_password\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_lost_password\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\t</mat-accordion>\n\t<div style=\"margin: 16px 0; text-align: center;\">\n\t\t<button mat-raised-button color=\"primary\" (click)=\"saveEmailSettings()\" style=\"margin-right: 8px\">Save</button>\n\t\t<button mat-raised-button (click)=\"hide.emit()\">Cancel</button>\n\t</div>\n</form>`,\n  styles: [`.panel-content{margin:0 24px!important}`]\n})\nexport class EmailSettingsComponent implements OnInit {\n  @Input()\n  settings: any;\n  @Input()\n  baseUrl: string;\n\n  emailForm: FormGroup;\n  templates: Array<{ name: string; id: number }>;\n\n  @Output()\n  hide = new EventEmitter<void>();\n  @Output()\n  save = new EventEmitter<any>();\n\n  @ViewChild('signupPanel')\n  signupPanel: MatExpansionPanel;\n  @ViewChild('changeEmailPanel')\n  changeEmailPanel: MatExpansionPanel;\n  @ViewChild('lostPasswordPanel')\n  lostPasswordPanel: MatExpansionPanel;\n\n  constructor(private http: HttpClient, private form: FormBuilder) {}\n\n  private getSettingsProperty(property, defaultValue) {\n    return (this.settings && this.settings[property]) || defaultValue;\n  }\n  ngOnInit(): void {\n    this.emailForm = this.form.group({\n      method: [\n        this.getSettingsProperty('method', 'session'),\n        Validators.required\n      ],\n      static_salt: [\n        this.getSettingsProperty('static_salt', ''),\n        Validators.required\n      ],\n      user_profile_enabled: [\n        this.getSettingsProperty('user_profile_enabled', 'false')\n      ],\n      user_profile_entity: [\n        this.getSettingsProperty('user_profile_entity', '')\n      ],\n      email_verification: [\n        this.getSettingsProperty('email_verification', false)\n      ],\n      email_addon: [this.getSettingsProperty('email_addon', false)],\n      template_signup: [this.getSettingsProperty('template_signup', '')],\n      redirect_signup: [this.getSettingsProperty('redirect_signup', '')],\n      subject_signup: [this.getSettingsProperty('subject_signup', '')],\n      subject_lost_password: [this.getSettingsProperty('subject_lost_password', '')],\n      subject_change_email: [this.getSettingsProperty('subject_change_email', '')],\n      template_lost_password: [\n        this.getSettingsProperty('template_lost_password', '')\n      ],\n      redirect_lost_password: [\n        this.getSettingsProperty('redirect_lost_password', '')\n      ],\n      template_change_email: [\n        this.getSettingsProperty('template_change_email', '')\n      ],\n      redirect_change_email: [\n        this.getSettingsProperty('redirect_change_email', '')\n      ]\n    });\n\n    this.refreshTemplates();\n  }\n\n  refreshTemplates() {\n    if (this.settings.email_addon === '@materia/mailjet') {\n      this.http\n        .post<any>(`${this.baseUrl}/entities/mailjet_template/queries/list`, {limit: 1000})\n        .subscribe(data => {\n          this.templates = data.data\n            .filter(row => row.OwnerId !== 1)\n            .map(row => {\n              return {\n                name: row.Name,\n                id: row.ID\n              };\n            });\n        });\n    } else if (this.settings.email_addon === '@materia/sendgrid') {\n      this.http\n        .post<any>(\n          `${this.baseUrl}/entities/sendgrid_template/queries/listTemplates`,\n          {}\n        )\n        .subscribe(data => {\n          this.templates = data && data.data && data.data;\n          // TODO...\n        });\n    }\n  }\n  saveEmailSettings() {\n    if (this.emailForm.valid) {\n      this.save.emit(this.emailForm.value);\n    }\n  }\n  cancel() {\n    this.hide.emit();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport {\n  MatButtonModule,\n  MatRippleModule,\n  MatSnackBarModule,\n  MatCardModule,\n  MatIconModule,\n  MatDialogModule,\n  MatInputModule,\n  MatListModule,\n  MatTooltipModule,\n  MatToolbarModule,\n  MatDatepickerModule,\n  MatExpansionModule,\n  MatNativeDateModule,\n  MatRadioModule,\n  MatStepperModule,\n  MatSelectModule,\n  MatCheckboxModule,\n  MatProgressSpinnerModule\n} from '@angular/material';\n\nimport { Addon } from '@materia/addons';\n\nimport { UserManagementViewComponent } from './user-management/user-management.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SignupFormComponent } from './signup-form/signup-form.component';\nimport { UserManagementSetupComponent } from './user-management-setup/user-management-setup.component';\nimport { ParamInputComponent } from './param-input/param-input.component';\nimport { EmailSettingsComponent } from './emails-settings/email-settings.component';\n\n@Addon('@materia/users')\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    FlexLayoutModule,\n    MatRippleModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatCardModule,\n    MatIconModule,\n    MatDialogModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatToolbarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatExpansionModule,\n    MatListModule,\n    MatRadioModule,\n    MatStepperModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    UserManagementViewComponent,\n    EmailSettingsComponent,\n    UserManagementSetupComponent,\n    SignupFormComponent,\n    ParamInputComponent\n  ],\n  exports: [UserManagementViewComponent],\n  entryComponents: []\n})\nexport class UserManagementModule {}\n"]}