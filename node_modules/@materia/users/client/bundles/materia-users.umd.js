(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/material'), require('@materia/addons'), require('@angular/common/http'), require('@angular/common'), require('@angular/flex-layout')) :
    typeof define === 'function' && define.amd ? define('@materia/users', ['exports', '@angular/core', '@angular/forms', '@angular/material', '@materia/addons', '@angular/common/http', '@angular/common', '@angular/flex-layout'], factory) :
    (factory((global.materia = global.materia || {}, global.materia.users = {}),global.ng.core,global.ng.forms,global.ng.material,null,global.ng.common.http,global.ng.common,global.ng['flex-layout']));
}(this, (function (exports,core,forms,material,addons,http,common,flexLayout) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SignupFormComponent = (function () {
        function SignupFormComponent(fb) {
            this.fb = fb;
            this.signup = new core.EventEmitter();
            this.cancel = new core.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        SignupFormComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.profileFields && changes.profileFields.currentValue) {
                    this.initForm();
                }
            };
        /**
         * @return {?}
         */
        SignupFormComponent.prototype.initForm = /**
         * @return {?}
         */
            function () {
                this.signupForm = this.fb.group(Object.assign({}, {
                    email: ['', forms.Validators.required],
                    password: ['', forms.Validators.required]
                }, this.getProfileFormGroup()));
            };
        /**
         * @return {?}
         */
        SignupFormComponent.prototype.getProfileFormGroup = /**
         * @return {?}
         */
            function () {
                if (!this.profileFields) {
                    return {};
                }
                var /** @type {?} */ result = {};
                this.profileFields.forEach(function (field) {
                    if (field.required) {
                        result[field.name] = ['', forms.Validators.required];
                    }
                    else {
                        result[field.name] = '';
                    }
                });
                return result;
            };
        /**
         * @return {?}
         */
        SignupFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initForm();
            };
        /**
         * @return {?}
         */
        SignupFormComponent.prototype.signupClick = /**
         * @return {?}
         */
            function () {
                this.signup.emit(this.signupForm.value);
            };
        SignupFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'materia-signup-form',
                        template: "<ng-template #template>\n\t<mat-card fxLayout=\"column\">\n\t\t<mat-toolbar>Create a new user</mat-toolbar>\n\t\n\t\t<form [formGroup]=\"signupForm\" fxLayout=\"column\" style=\"padding: 24px;\">\n\t\t\t<mat-form-field>\n\t\t\t\t<input formControlName=\"email\" matInput placeholder=\"Email\" required type=\"email\" name=\"email\">\n\t\t\t</mat-form-field>\n\t\n\t\t\t<mat-form-field>\n\t\t\t\t<input formControlName=\"password\" matInput placeholder=\"Password\" required type=\"password\" name=\"password\">\n\t\t\t</mat-form-field>\n\t\t\t<div *ngIf=\"profileFields.length > 0\">\n\t\t\t\t<materia-param-input [showCheckbox]=\"false\" [form]=\"signupForm\" [param]=\"param\" *ngFor=\"let param of profileFields\"></materia-param-input>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<button (click)=\"signup.emit(signupForm.value)\" mat-raised-button color=\"primary\">Create</button>\n\t\t\t\t<button (click)=\"cancel.emit()\" mat-raised-button>Cancel</button>\n\t\t\t</div>\n\t\t</form>\n\t</mat-card>\n</ng-template>",
                        styles: ["mat-card{width:300px;margin:0p;padding:0}"]
                    },] },
        ];
        /** @nocollapse */
        SignupFormComponent.ctorParameters = function () {
            return [
                { type: forms.FormBuilder, },
            ];
        };
        SignupFormComponent.propDecorators = {
            "signup": [{ type: core.Output },],
            "cancel": [{ type: core.Output },],
            "template": [{ type: core.ViewChild, args: ['template',] },],
            "profileFields": [{ type: core.Input },],
        };
        return SignupFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UserManagementViewComponent = (function () {
        function UserManagementViewComponent(dialog, http$$1, snackbar) {
            this.dialog = dialog;
            this.http = http$$1;
            this.snackbar = snackbar;
            this.openSetup = new core.EventEmitter();
            this.loading = true;
            this.users = [];
            this.nbUsers = 0;
        }
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.refreshList();
                this.refreshConnectedUser();
                this.getProfileParams();
            };
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.getProfileParams = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.settings &&
                    this.settings.user_profile_enabled &&
                    this.settings.user_profile_entity) {
                    return this.http
                        .get(this.baseUrl + "/infos")
                        .toPromise()
                        .then(function (res) {
                        var /** @type {?} */ profileEntity = res.entities.find(function (entity) { return entity.name === _this.settings.user_profile_entity; });
                        _this.profileFields = profileEntity.fields.filter(function (field) {
                            return field.name !== 'id_user' &&
                                (!field.primary || (field.primary && !field.autoIncrement));
                        });
                    })
                        .catch(function (e) {
                        _this.profileFields = [];
                    });
                }
                else {
                    this.profileFields = [];
                    return Promise.resolve();
                }
            };
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.refreshList = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.loading = true;
                this.http
                    .post(this.baseUrl + "/entities/user/queries/listWithGravatar", {})
                    .subscribe(function (res) {
                    _this.users = res.data;
                    _this.nbUsers = res.count;
                    _this.loading = false;
                });
            };
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.refreshConnectedUser = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.http.get(this.apiUrl + "/user/me").subscribe(function (res) {
                    _this.me = res;
                }, function () { return (_this.me = null); });
            };
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.configureEmails = /**
         * @return {?}
         */
            function () {
                this.displayEmailSettings = true;
            };
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.hideEmailSettings = /**
         * @return {?}
         */
            function () {
                this.displayEmailSettings = false;
            };
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.openSignupDialog = /**
         * @return {?}
         */
            function () {
                this.signupDialog = this.dialog.open(this.signupDialogComp.template, {
                    panelClass: 'no-padding'
                });
            };
        /**
         * @param {?} settings
         * @return {?}
         */
        UserManagementViewComponent.prototype.saveEmailSettings = /**
         * @param {?} settings
         * @return {?}
         */
            function (settings) {
                var _this = this;
                this.http
                    .post(this.baseUrl + "/addons/@materia/users/setup", settings)
                    .subscribe(function (res) {
                    _this.snackbar.open('Settings saved!', null, {
                        duration: 3000
                    });
                    _this.hideEmailSettings();
                    _this.settings = settings;
                });
            };
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.closeSignupDialog = /**
         * @return {?}
         */
            function () {
                this.signupDialog.close();
            };
        /**
         * @param {?} user
         * @return {?}
         */
        UserManagementViewComponent.prototype.signup = /**
         * @param {?} user
         * @return {?}
         */
            function (user) {
                var _this = this;
                this.http.post(this.apiUrl + "/user/signup", user).subscribe(function () {
                    _this.closeSignupDialog();
                    _this.refreshList();
                    _this.refreshConnectedUser();
                });
            };
        /**
         * @return {?}
         */
        UserManagementViewComponent.prototype.logout = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.http.post(this.apiUrl + "/user/logout", {}).subscribe(function () {
                    _this.refreshConnectedUser();
                }, function () { return _this.refreshConnectedUser(); });
            };
        UserManagementViewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'materia-user-management',
                        template: "<div fxLayout=\"column\" fxFlex>\n\t<div *ngIf=\"me\" style=\"padding: 8px 16px; background-color: #4CAF50; color: white;\">\n\t\tCurrently connected as {{me.email}} (<a style=\"text-decoration: underline; cursor: pointer;\" (click)=\"logout()\">Logout</a>)\n\t</div>\n\t<div fxLayout=\"row\" fxFlex>\n\t\t<mat-card fxLayout=\"column\" fxFlex *ngIf=\"!loading; else loadingUsers\">\n\t\t\t<mat-toolbar fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\t\t\t\t<mat-icon>people</mat-icon>\n\t\t\t\t<span>\n\t\t\t\t\tUsers\n\t\t\t\t</span>\n\t\t\t\t<span fxFlex></span>\n\t\t\t\t<button *ngIf=\"!displayEmailSettings && settings.email_verification && settings.email_addon\" style=\"margin-right: 8px;\" (click)=\"configureEmails()\" mat-button>Configure emails</button>\n\t\t\t\t<button mat-mini-fab (click)=\"openSignupDialog()\" matTooltip=\"New User\" matTooltipPosition=\"left\" style=\"width: 31px; height: 31px;\">\n\t\t\t\t\t<mat-icon style=\"position: relative; top: -6px; left: -4px;\">add</mat-icon>\n\t\t\t\t</button>\n\t\t\t</mat-toolbar>\n\t\t\t<div *ngIf=\"users && users.length; else noUser\" style=\"border-top: 1px solid #EEE; overflow-y: auto;\" fxLayout=\"column\" fxFlex>\n\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngFor=\"let user of users\" style=\"border-bottom: 1px solid #EEE; cursor: pointer;min-height: 40px\">\n\t\t\t\t\t<img [src]=\"user.gravatar\" class=\"avatar\" style=\"margin: 0 8px; width:32px; height:32px;border-radius: 100%\" />\n\t\t\t\t\t<div style=\"color: #999; padding-top: 0\">{{user.email}}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ng-template #noUser>\n\t\t\t\t<div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"no-users\">\n\t\t\t\t\t<span>There is no users registered yet</span>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button (click)=\"openSignupDialog()\" mat-raised-button color=\"primary\" [style.margin]=\"'15px'\" [style.color]=\"'white'\">Create\n\t\t\t\t\t\t\ta user</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t</mat-card>\n\t\t<ng-template #loadingUsers>\n\t\t\t<mat-card fxLayout=\"column\" fxFlex fxLayoutAlign=\"center center\">\n\t\t\t\t<mat-spinner></mat-spinner>\n\t\t\t</mat-card>\n\t\t</ng-template>\n\t\t<div style=\"margin: 8px;\" *ngIf=\"displayEmailSettings\" fxLayout=\"column\" fxFlex>\n\t\t\t<mat-toolbar fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\t\t\t\t<button mat-icon-button (click)=\"hideEmailSettings()\" matTooltip=\"Hide email settings\" matTooltipPosition=\"right\">\n\t\t\t\t\t<mat-icon>arrow_back</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<mat-icon>mail</mat-icon>\n\t\t\t\t<span>\n\t\t\t\t\tEmails\n\t\t\t\t</span>\n\t\t\t\t<span fxFlex></span>\n\t\t\t</mat-toolbar>\n\t\t\t<materia-user-management-email-settings [settings]=\"settings\" [baseUrl]=\"baseUrl\"\n\t\t\t\t(hide)=\"hideEmailSettings()\" (save)=\"saveEmailSettings($event)\" fxFlex style=\"overflow-y: auto;\">\n\t\t\t</materia-user-management-email-settings>\n\t\t</div>\n\t</div>\n</div>\n<materia-signup-form #signupFormTemplate [profileFields]=\"profileFields\" (signup)=\"signup($event)\" (cancel)=\"closeSignupDialog()\"></materia-signup-form>",
                        styles: [":host{flex:1 1 0}mat-card{margin:8px;padding:0}mat-icon{margin:2px 8px}.no-users{font-style:italic}"],
                        providers: []
                    },] },
        ];
        /** @nocollapse */
        UserManagementViewComponent.ctorParameters = function () {
            return [
                { type: material.MatDialog, },
                { type: http.HttpClient, },
                { type: material.MatSnackBar, },
            ];
        };
        UserManagementViewComponent.propDecorators = {
            "app": [{ type: core.Input },],
            "settings": [{ type: core.Input },],
            "baseUrl": [{ type: core.Input },],
            "apiUrl": [{ type: core.Input },],
            "openSetup": [{ type: core.Output },],
            "signupDialogComp": [{ type: core.ViewChild, args: [SignupFormComponent,] },],
        };
        UserManagementViewComponent = __decorate([
            addons.AddonView('@materia/users'),
            __metadata("design:paramtypes", [material.MatDialog,
                http.HttpClient,
                material.MatSnackBar])
        ], UserManagementViewComponent);
        return UserManagementViewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UserManagementSetupComponent = (function () {
        function UserManagementSetupComponent(fb, http$$1) {
            this.fb = fb;
            this.http = http$$1;
            this.save = new core.EventEmitter();
            this.cancel = new core.EventEmitter();
            this.emailAddons = [];
        }
        /**
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        UserManagementSetupComponent.prototype.getSettingsProperty = /**
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
            function (property, defaultValue) {
                return (this.settings && this.settings[property]) || defaultValue;
            };
        /**
         * @return {?}
         */
        UserManagementSetupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.http
                    .get(this.baseUrl + '/infos')
                    .toPromise()
                    .then(function (res) {
                    _this.loginForm = _this.fb.group({
                        method: [
                            _this.getSettingsProperty('method', 'session'),
                            forms.Validators.required
                        ],
                        user_profile_enabled: [
                            _this.getSettingsProperty('user_profile_enabled', false)
                        ],
                        user_profile_entity: [
                            _this.getSettingsProperty('user_profile_entity', null)
                        ],
                        email_verification: [
                            _this.getSettingsProperty('email_verification', false)
                        ],
                        email_addon: [_this.getSettingsProperty('email_addon', false)],
                    });
                    _this.entities = res.entities.filter(function (entity) { return !entity.fromAddon; });
                    _this.emailAddons = res.addons.filter(function (addon) {
                        return addon.package === '@materia/sendgrid' ||
                            addon.package === '@materia/mailjet';
                    });
                    if (_this.emailAddons.length === 0) {
                        _this.loginForm.get('email_verification').disable();
                        _this.loginForm.get('email_addon').disable();
                    }
                    if (!_this.settings || !_this.settings.email_verification) {
                        _this.loginForm.get('email_addon').disable();
                    }
                    if (!_this.settings || !_this.settings.user_profile_enabled) {
                        _this.loginForm.get('user_profile_entity').disable();
                    }
                    if (_this.entities.length === 0) {
                        _this.loginForm.get('user_profile_enabled').setValue(false);
                        _this.loginForm.get('user_profile_entity').setValue(null);
                        _this.loginForm.get('user_profile_enabled').disable();
                        _this.loginForm.get('user_profile_entity').disable();
                    }
                    _this.loginForm
                        .get('user_profile_enabled')
                        .valueChanges.subscribe(function (val) {
                        if (val) {
                            _this.loginForm.get('user_profile_entity').enable();
                        }
                        else {
                            _this.loginForm.get('user_profile_entity').disable();
                        }
                    });
                    _this.loginForm.get('email_verification').valueChanges.subscribe(function (val) {
                        if (val) {
                            _this.loginForm.get('email_addon').enable();
                        }
                        else {
                            _this.loginForm.get('email_addon').disable();
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        UserManagementSetupComponent.prototype.finish = /**
         * @return {?}
         */
            function () {
                if (this.loginForm.valid) {
                    this.save.emit(this.loginForm.value);
                }
            };
        /**
         * @return {?}
         */
        UserManagementSetupComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.cancel.emit();
            };
        UserManagementSetupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'materia-user-management-setup',
                        template: "<form *ngIf=\"loginForm\" [formGroup]=\"loginForm\" style=\"max-width: 400px\">\n\t<h2 mat-dialog-title fxLayout=\"row\">\n\t\t<span fxFlex style=\"position: relative; top: 3px; left: 5px;\">User Management - Setup</span>\n\t\t<button (click)=\"close()\" tabindex=\"-1\" mat-icon-button>\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</h2>\n\t<mat-dialog-content>\n\t\t<div fxLayout=\"column\">\n\t\t\t<h3>\n\t\t\t\tAuthentication method\n\t\t\t</h3>\n\t\t\t<mat-radio-group formControlName=\"method\" fxLayout=\"column\">\n\t\t\t\t<mat-radio-button value=\"token\">Token based authentication (mobile ready)</mat-radio-button>\n\t\t\t\t<mat-radio-button value=\"session\">Session based authentication</mat-radio-button>\n\t\t\t</mat-radio-group>\n\t\t\t\n\t\t\t<h3>\n\t\t\t\t<mat-checkbox formControlName=\"user_profile_enabled\">User profile</mat-checkbox>\n\t\t\t</h3>\n\t\t\t<mat-form-field *ngIf=\"entities && entities.length > 0; else noEntities\">\n\t\t\t\t<mat-select placeholder=\"Select the user profile entity\" formControlName=\"user_profile_entity\">\n\t\t\t\t\t<mat-option *ngFor=\"let e of entities\" [value]=\"e.name\">{{ e.name }}</mat-option>\n\t\t\t\t</mat-select>\n\t\t\t</mat-form-field>\n\t\t\t<ng-template #noEntities>\n\t\t\t\t<div class=\"warning\">\n\t\t\t\t\tNo entity found. You need an entity to add custom fields to your users.\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t\n\t\t\t<h3>\n\t\t\t\t<mat-checkbox formControlName=\"email_verification\">Emails enabled</mat-checkbox>\n\t\t\t</h3>\n\n\t\t\t<mat-form-field *ngIf=\"emailAddons && emailAddons.length > 0; else noEmailAddon\">\n\t\t\t\t<mat-select placeholder=\"Select your emailing addon\" formControlName=\"email_addon\">\n\t\t\t\t\t<mat-option *ngFor=\"let e of emailAddons\" [value]=\"e.package\">{{ e.name }}</mat-option>\n\t\t\t\t</mat-select>\n\t\t\t</mat-form-field>\n\n\t\t\t<ng-template #noEmailAddon>\n\t\t\t\t<div class=\"warning\">You need\n\t\t\t\t\t<strong>Sendgrid</strong> or\n\t\t\t\t\t<strong>Mailjet</strong> addon installed\n\t\t\t\t\t<br>to send email from your Materia Application such as a signup email</div>\n\t\t\t</ng-template>\n\t\t</div>\n\t</mat-dialog-content>\n\t<mat-dialog-actions>\n\t\t<button mat-raised-button color=\"primary\" (click)=\"finish()\">Save</button>\n\t\t<button mat-raised-button (click)=\"close()\">Cancel</button>\n\t</mat-dialog-actions>\n</form>",
                        styles: ["mat-form-field{width:100%;margin:0 5px}.mat-dialog-content{margin:0;padding:0 24px}.mat-dialog-actions{padding:12px 24px}h3{margin-top:16px;margin-bottom:8px}.warning{margin:16px 0;padding:8px;border:1px solid #f44336;color:#f44336}"],
                        providers: [forms.FormBuilder]
                    },] },
        ];
        /** @nocollapse */
        UserManagementSetupComponent.ctorParameters = function () {
            return [
                { type: forms.FormBuilder, },
                { type: http.HttpClient, },
            ];
        };
        UserManagementSetupComponent.propDecorators = {
            "app": [{ type: core.Input },],
            "settings": [{ type: core.Input },],
            "baseUrl": [{ type: core.Input },],
            "token": [{ type: core.Input },],
            "save": [{ type: core.Output },],
            "cancel": [{ type: core.Output },],
        };
        UserManagementSetupComponent = __decorate([
            addons.AddonSetup('@materia/users'),
            __metadata("design:paramtypes", [forms.FormBuilder, http.HttpClient])
        ], UserManagementSetupComponent);
        return UserManagementSetupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ DefaultComponent = Object.freeze({
        text: 'text',
        number: 'text',
        date: 'date',
        float: 'text',
        boolean: 'switch'
    });
    var ParamInputComponent = (function () {
        function ParamInputComponent() {
            this.showAsterisk = true;
            this.showCheckbox = true;
            this.changed = new core.EventEmitter();
        }
        Object.defineProperty(ParamInputComponent.prototype, "requiredError", {
            get: /**
             * @return {?}
             */ function () {
                return (this.form.get(this.param.name) &&
                    this.form.get(this.param.name).hasError('required'));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParamInputComponent.prototype, "checkboxName", {
            get: /**
             * @return {?}
             */ function () {
                return this.param.name + "_check";
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ParamInputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.type = this.param.type;
                if (!this.label) {
                    this.label = this.param.name;
                    if (this.param.required && this.showAsterisk) {
                        this.label += '*';
                    }
                }
                if (this.param && this.param.component) {
                    if (this.param.component === 'input') {
                        if (this.param.type === 'text' || this.param.type === 'string') {
                            this.actualComponent = 'text';
                        }
                        else if (this.param.type === 'number') {
                            this.actualComponent = 'number';
                        }
                        else {
                            this.actualComponent = this.param.component;
                        }
                    }
                    else {
                        if (this.param.component === 'datePicker') {
                            this.actualComponent = 'date';
                        }
                        else if (this.param.component === 'timePicker') {
                            this.actualComponent = 'time';
                        }
                        else if (this.param.component === 'dateTimePicker') {
                            this.actualComponent = 'datetime-local';
                        }
                        else {
                            this.actualComponent = this.param.component;
                        }
                    }
                }
                else {
                    this.actualComponent = DefaultComponent[this.type];
                }
                if (this.showCheckbox && !this.param.required) {
                    this.form.get(this.param.name).valueChanges.subscribe(function (val) {
                        if (val) {
                            _this.form.get(_this.checkboxName).setValue(true);
                        }
                        else {
                            _this.form.get(_this.checkboxName).setValue(false);
                        }
                    });
                }
            };
        ParamInputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'materia-param-input',
                        template: "<div [formGroup]=\"form\" fxLayout=\"row\">\n\t<div fxLayout=\"row\" fxFlex>\n\t\t<mat-checkbox [formControlName]=\"checkboxName\" *ngIf=\" ! param.required && showCheckbox && type !== 'boolean'\">\n\t\t</mat-checkbox>\n\t\t<mat-form-field *ngIf=\"type != 'boolean' && actualComponent != 'markdown' && actualComponent != 'article'\" fxFlex>\n\t\t\t<input *ngIf=\"type != 'boolean' && type != 'date' && type != 'float' && actualComponent != 'textarea'\" tabindex=\"0\" matInput\n\t\t\t [formControlName]=\"param.name\" [placeholder]=\"label\" [type]=\"actualComponent\" />\n\t\t\t<input *ngIf=\"type == 'float'\" matInput tabindex=\"0\" type=\"number\" step=\"any\" [placeholder]=\"label\" [formControlName]=\"param.name\"\n\t\t\t/>\n\t\t\t<textarea *ngIf=\"actualComponent == 'textarea'\" tabindex=\"0\" matInput [placeholder]=\"label\" [formControlName]=\"param.name\"></textarea>\n\t\t\t<input *ngIf=\"type == 'date'\" matInput tabindex=\"0\" [formControlName]=\"param.name\" [matDatepicker]=\"picker\" [placeholder]=\"param.name\">\n\t\t\t<mat-datepicker-toggle *ngIf=\"type == 'date'\" matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n\t\t\t<mat-datepicker #picker></mat-datepicker>\n\t\t\t<mat-error *ngIf=\"requiredError\">\n\t\t\t\t{{param.name}} is\n\t\t\t\t<strong>required</strong>\n\t\t\t</mat-error>\n\t\t</mat-form-field>\n\t\t<mat-checkbox *ngIf=\"type == 'boolean'\" tabindex=\"0\" [formControlName]=\"param.name\" style=\"top: 0;\">{{label}}</mat-checkbox>\n\t\t<div class=\"markdown\" *ngIf=\"actualComponent == 'markdown'\" fxLayout=\"column\" fxFlex>\n\t\t\t<label>{{label}}</label>\n\t\t\t<textarea tabindex=\"0\" [formControlName]=\"param.name\" simplemde=\"{spellChecker: false, toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', 'image', 'table']}\"></textarea>\n\t\t</div>\n\t</div>\n</div>",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        ParamInputComponent.ctorParameters = function () { return []; };
        ParamInputComponent.propDecorators = {
            "param": [{ type: core.Input },],
            "disabled": [{ type: core.Input },],
            "form": [{ type: core.Input },],
            "label": [{ type: core.Input },],
            "showAsterisk": [{ type: core.Input },],
            "showCheckbox": [{ type: core.Input },],
            "changed": [{ type: core.Output },],
        };
        return ParamInputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EmailSettingsComponent = (function () {
        function EmailSettingsComponent(http$$1, form) {
            this.http = http$$1;
            this.form = form;
            this.hide = new core.EventEmitter();
            this.save = new core.EventEmitter();
        }
        /**
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
        EmailSettingsComponent.prototype.getSettingsProperty = /**
         * @param {?} property
         * @param {?} defaultValue
         * @return {?}
         */
            function (property, defaultValue) {
                return (this.settings && this.settings[property]) || defaultValue;
            };
        /**
         * @return {?}
         */
        EmailSettingsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.emailForm = this.form.group({
                    method: [
                        this.getSettingsProperty('method', 'session'),
                        forms.Validators.required
                    ],
                    static_salt: [
                        this.getSettingsProperty('static_salt', ''),
                        forms.Validators.required
                    ],
                    user_profile_enabled: [
                        this.getSettingsProperty('user_profile_enabled', 'false')
                    ],
                    user_profile_entity: [
                        this.getSettingsProperty('user_profile_entity', '')
                    ],
                    email_verification: [
                        this.getSettingsProperty('email_verification', false)
                    ],
                    email_addon: [this.getSettingsProperty('email_addon', false)],
                    template_signup: [this.getSettingsProperty('template_signup', '')],
                    redirect_signup: [this.getSettingsProperty('redirect_signup', '')],
                    subject_signup: [this.getSettingsProperty('subject_signup', '')],
                    subject_lost_password: [this.getSettingsProperty('subject_lost_password', '')],
                    subject_change_email: [this.getSettingsProperty('subject_change_email', '')],
                    template_lost_password: [
                        this.getSettingsProperty('template_lost_password', '')
                    ],
                    redirect_lost_password: [
                        this.getSettingsProperty('redirect_lost_password', '')
                    ],
                    template_change_email: [
                        this.getSettingsProperty('template_change_email', '')
                    ],
                    redirect_change_email: [
                        this.getSettingsProperty('redirect_change_email', '')
                    ]
                });
                this.refreshTemplates();
            };
        /**
         * @return {?}
         */
        EmailSettingsComponent.prototype.refreshTemplates = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.settings.email_addon === '@materia/mailjet') {
                    this.http
                        .post(this.baseUrl + "/entities/mailjet_template/queries/list", { limit: 1000 })
                        .subscribe(function (data) {
                        _this.templates = data.data
                            .filter(function (row) { return row.OwnerId !== 1; })
                            .map(function (row) {
                            return {
                                name: row.Name,
                                id: row.ID
                            };
                        });
                    });
                }
                else if (this.settings.email_addon === '@materia/sendgrid') {
                    this.http
                        .post(this.baseUrl + "/entities/sendgrid_template/queries/listTemplates", {})
                        .subscribe(function (data) {
                        _this.templates = data && data.data && data.data;
                        // TODO...
                    });
                }
            };
        /**
         * @return {?}
         */
        EmailSettingsComponent.prototype.saveEmailSettings = /**
         * @return {?}
         */
            function () {
                if (this.emailForm.valid) {
                    this.save.emit(this.emailForm.value);
                }
            };
        /**
         * @return {?}
         */
        EmailSettingsComponent.prototype.cancel = /**
         * @return {?}
         */
            function () {
                this.hide.emit();
            };
        EmailSettingsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'materia-user-management-email-settings',
                        template: "<form [formGroup]=\"emailForm\">\n\t<mat-accordion>\n\t\t<mat-expansion-panel #signupPanel [expanded]=\"true\" fxLayout=\"column\">\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tSignup\n\t\t\t</mat-expansion-panel-header>\n\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_signup\">\n\t\t\t\t</mat-form-field>\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_signup\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_signup\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\n\t\t<mat-expansion-panel #changeEmailPanel>\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tChange email\n\t\t\t</mat-expansion-panel-header>\n\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_change_email\">\n\t\t\t\t</mat-form-field>\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_change_email\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_change_email\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\n\t\t<mat-expansion-panel #lostPasswordPanel fxLayout=\"column\">\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tLost password\n\t\t\t</mat-expansion-panel-header>\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_lost_password\">\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_lost_password\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_lost_password\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\t</mat-accordion>\n\t<div style=\"margin: 16px 0; text-align: center;\">\n\t\t<button mat-raised-button color=\"primary\" (click)=\"saveEmailSettings()\" style=\"margin-right: 8px\">Save</button>\n\t\t<button mat-raised-button (click)=\"hide.emit()\">Cancel</button>\n\t</div>\n</form>",
                        styles: [".panel-content{margin:0 24px!important}"]
                    },] },
        ];
        /** @nocollapse */
        EmailSettingsComponent.ctorParameters = function () {
            return [
                { type: http.HttpClient, },
                { type: forms.FormBuilder, },
            ];
        };
        EmailSettingsComponent.propDecorators = {
            "settings": [{ type: core.Input },],
            "baseUrl": [{ type: core.Input },],
            "hide": [{ type: core.Output },],
            "save": [{ type: core.Output },],
            "signupPanel": [{ type: core.ViewChild, args: ['signupPanel',] },],
            "changeEmailPanel": [{ type: core.ViewChild, args: ['changeEmailPanel',] },],
            "lostPasswordPanel": [{ type: core.ViewChild, args: ['lostPasswordPanel',] },],
        };
        return EmailSettingsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UserManagementModule = (function () {
        function UserManagementModule() {
        }
        UserManagementModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            http.HttpClientModule,
                            flexLayout.FlexLayoutModule,
                            material.MatRippleModule,
                            material.MatButtonModule,
                            material.MatSnackBarModule,
                            material.MatCardModule,
                            material.MatIconModule,
                            material.MatDialogModule,
                            material.MatInputModule,
                            material.MatTooltipModule,
                            material.MatCheckboxModule,
                            material.MatSelectModule,
                            material.MatToolbarModule,
                            material.MatDatepickerModule,
                            material.MatNativeDateModule,
                            material.MatExpansionModule,
                            material.MatListModule,
                            material.MatRadioModule,
                            material.MatStepperModule,
                            material.MatProgressSpinnerModule
                        ],
                        declarations: [
                            UserManagementViewComponent,
                            EmailSettingsComponent,
                            UserManagementSetupComponent,
                            SignupFormComponent,
                            ParamInputComponent
                        ],
                        exports: [UserManagementViewComponent],
                        entryComponents: []
                    },] },
        ];
        UserManagementModule = __decorate([
            addons.Addon('@materia/users')
        ], UserManagementModule);
        return UserManagementModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.UserManagementViewComponent = UserManagementViewComponent;
    exports.UserManagementModule = UserManagementModule;
    exports.ɵb = EmailSettingsComponent;
    exports.ɵd = ParamInputComponent;
    exports.ɵa = SignupFormComponent;
    exports.ɵc = UserManagementSetupComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,