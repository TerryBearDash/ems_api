import { Component, Output, EventEmitter, ViewChild, Input, NgModule } from '@angular/core';
import { FormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { __decorate, __metadata } from 'tslib';
import { MatDialog, MatSnackBar, MatButtonModule, MatRippleModule, MatSnackBarModule, MatCardModule, MatIconModule, MatDialogModule, MatInputModule, MatListModule, MatTooltipModule, MatToolbarModule, MatDatepickerModule, MatExpansionModule, MatNativeDateModule, MatRadioModule, MatStepperModule, MatSelectModule, MatCheckboxModule, MatProgressSpinnerModule } from '@angular/material';
import { AddonView, AddonSetup, Addon } from '@materia/addons';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { FlexLayoutModule } from '@angular/flex-layout';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SignupFormComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.fb = fb;
        this.signup = new EventEmitter();
        this.cancel = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.profileFields && changes.profileFields.currentValue) {
            this.initForm();
        }
    }
    /**
     * @return {?}
     */
    initForm() {
        this.signupForm = this.fb.group(Object.assign({}, {
            email: ['', Validators.required],
            password: ['', Validators.required]
        }, this.getProfileFormGroup()));
    }
    /**
     * @return {?}
     */
    getProfileFormGroup() {
        if (!this.profileFields) {
            return {};
        }
        const /** @type {?} */ result = {};
        this.profileFields.forEach(field => {
            if (field.required) {
                result[field.name] = ['', Validators.required];
            }
            else {
                result[field.name] = '';
            }
        });
        return result;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initForm();
    }
    /**
     * @return {?}
     */
    signupClick() {
        this.signup.emit(this.signupForm.value);
    }
}
SignupFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-signup-form',
                template: `<ng-template #template>
	<mat-card fxLayout="column">
		<mat-toolbar>Create a new user</mat-toolbar>
	
		<form [formGroup]="signupForm" fxLayout="column" style="padding: 24px;">
			<mat-form-field>
				<input formControlName="email" matInput placeholder="Email" required type="email" name="email">
			</mat-form-field>
	
			<mat-form-field>
				<input formControlName="password" matInput placeholder="Password" required type="password" name="password">
			</mat-form-field>
			<div *ngIf="profileFields.length > 0">
				<materia-param-input [showCheckbox]="false" [form]="signupForm" [param]="param" *ngFor="let param of profileFields"></materia-param-input>
			</div>

			<div>
				<button (click)="signup.emit(signupForm.value)" mat-raised-button color="primary">Create</button>
				<button (click)="cancel.emit()" mat-raised-button>Cancel</button>
			</div>
		</form>
	</mat-card>
</ng-template>`,
                styles: [`mat-card{width:300px;margin:0p;padding:0}`]
            },] },
];
/** @nocollapse */
SignupFormComponent.ctorParameters = () => [
    { type: FormBuilder, },
];
SignupFormComponent.propDecorators = {
    "signup": [{ type: Output },],
    "cancel": [{ type: Output },],
    "template": [{ type: ViewChild, args: ['template',] },],
    "profileFields": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
let UserManagementViewComponent = class UserManagementViewComponent {
    /**
     * @param {?} dialog
     * @param {?} http
     * @param {?} snackbar
     */
    constructor(dialog, http, snackbar) {
        this.dialog = dialog;
        this.http = http;
        this.snackbar = snackbar;
        this.openSetup = new EventEmitter();
        this.loading = true;
        this.users = [];
        this.nbUsers = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refreshList();
        this.refreshConnectedUser();
        this.getProfileParams();
    }
    /**
     * @return {?}
     */
    getProfileParams() {
        if (this.settings &&
            this.settings.user_profile_enabled &&
            this.settings.user_profile_entity) {
            return this.http
                .get(`${this.baseUrl}/infos`)
                .toPromise()
                .then(res => {
                const /** @type {?} */ profileEntity = res.entities.find(entity => entity.name === this.settings.user_profile_entity);
                this.profileFields = profileEntity.fields.filter(field => field.name !== 'id_user' &&
                    (!field.primary || (field.primary && !field.autoIncrement)));
            })
                .catch(e => {
                this.profileFields = [];
            });
        }
        else {
            this.profileFields = [];
            return Promise.resolve();
        }
    }
    /**
     * @return {?}
     */
    refreshList() {
        this.loading = true;
        this.http
            .post(`${this.baseUrl}/entities/user/queries/listWithGravatar`, {})
            .subscribe(res => {
            this.users = res.data;
            this.nbUsers = res.count;
            this.loading = false;
        });
    }
    /**
     * @return {?}
     */
    refreshConnectedUser() {
        this.http.get(`${this.apiUrl}/user/me`).subscribe(res => {
            this.me = res;
        }, () => (this.me = null));
    }
    /**
     * @return {?}
     */
    configureEmails() {
        this.displayEmailSettings = true;
    }
    /**
     * @return {?}
     */
    hideEmailSettings() {
        this.displayEmailSettings = false;
    }
    /**
     * @return {?}
     */
    openSignupDialog() {
        this.signupDialog = this.dialog.open(this.signupDialogComp.template, {
            panelClass: 'no-padding'
        });
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    saveEmailSettings(settings) {
        this.http
            .post(`${this.baseUrl}/addons/@materia/users/setup`, settings)
            .subscribe(res => {
            this.snackbar.open('Settings saved!', null, {
                duration: 3000
            });
            this.hideEmailSettings();
            this.settings = settings;
        });
    }
    /**
     * @return {?}
     */
    closeSignupDialog() {
        this.signupDialog.close();
    }
    /**
     * @param {?} user
     * @return {?}
     */
    signup(user) {
        this.http.post(`${this.apiUrl}/user/signup`, user).subscribe(() => {
            this.closeSignupDialog();
            this.refreshList();
            this.refreshConnectedUser();
        });
    }
    /**
     * @return {?}
     */
    logout() {
        this.http.post(`${this.apiUrl}/user/logout`, {}).subscribe(() => {
            this.refreshConnectedUser();
        }, () => this.refreshConnectedUser());
    }
};
UserManagementViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-user-management',
                template: `<div fxLayout="column" fxFlex>
	<div *ngIf="me" style="padding: 8px 16px; background-color: #4CAF50; color: white;">
		Currently connected as {{me.email}} (<a style="text-decoration: underline; cursor: pointer;" (click)="logout()">Logout</a>)
	</div>
	<div fxLayout="row" fxFlex>
		<mat-card fxLayout="column" fxFlex *ngIf="!loading; else loadingUsers">
			<mat-toolbar fxLayout="row" fxLayoutAlign="start center">
				<mat-icon>people</mat-icon>
				<span>
					Users
				</span>
				<span fxFlex></span>
				<button *ngIf="!displayEmailSettings && settings.email_verification && settings.email_addon" style="margin-right: 8px;" (click)="configureEmails()" mat-button>Configure emails</button>
				<button mat-mini-fab (click)="openSignupDialog()" matTooltip="New User" matTooltipPosition="left" style="width: 31px; height: 31px;">
					<mat-icon style="position: relative; top: -6px; left: -4px;">add</mat-icon>
				</button>
			</mat-toolbar>
			<div *ngIf="users && users.length; else noUser" style="border-top: 1px solid #EEE; overflow-y: auto;" fxLayout="column" fxFlex>
				<div fxLayout="row" fxLayoutAlign="start center" *ngFor="let user of users" style="border-bottom: 1px solid #EEE; cursor: pointer;min-height: 40px">
					<img [src]="user.gravatar" class="avatar" style="margin: 0 8px; width:32px; height:32px;border-radius: 100%" />
					<div style="color: #999; padding-top: 0">{{user.email}}</div>
				</div>
			</div>
			<ng-template #noUser>
				<div fxFlex fxLayout="column" fxLayoutAlign="center center" class="no-users">
					<span>There is no users registered yet</span>
					<div>
						<button (click)="openSignupDialog()" mat-raised-button color="primary" [style.margin]="'15px'" [style.color]="'white'">Create
							a user</button>
					</div>
				</div>
			</ng-template>
		</mat-card>
		<ng-template #loadingUsers>
			<mat-card fxLayout="column" fxFlex fxLayoutAlign="center center">
				<mat-spinner></mat-spinner>
			</mat-card>
		</ng-template>
		<div style="margin: 8px;" *ngIf="displayEmailSettings" fxLayout="column" fxFlex>
			<mat-toolbar fxLayout="row" fxLayoutAlign="start center">
				<button mat-icon-button (click)="hideEmailSettings()" matTooltip="Hide email settings" matTooltipPosition="right">
					<mat-icon>arrow_back</mat-icon>
				</button>
				<mat-icon>mail</mat-icon>
				<span>
					Emails
				</span>
				<span fxFlex></span>
			</mat-toolbar>
			<materia-user-management-email-settings [settings]="settings" [baseUrl]="baseUrl"
				(hide)="hideEmailSettings()" (save)="saveEmailSettings($event)" fxFlex style="overflow-y: auto;">
			</materia-user-management-email-settings>
		</div>
	</div>
</div>
<materia-signup-form #signupFormTemplate [profileFields]="profileFields" (signup)="signup($event)" (cancel)="closeSignupDialog()"></materia-signup-form>`,
                styles: [`:host{flex:1 1 0}mat-card{margin:8px;padding:0}mat-icon{margin:2px 8px}.no-users{font-style:italic}`],
                providers: []
            },] },
];
/** @nocollapse */
UserManagementViewComponent.ctorParameters = () => [
    { type: MatDialog, },
    { type: HttpClient, },
    { type: MatSnackBar, },
];
UserManagementViewComponent.propDecorators = {
    "app": [{ type: Input },],
    "settings": [{ type: Input },],
    "baseUrl": [{ type: Input },],
    "apiUrl": [{ type: Input },],
    "openSetup": [{ type: Output },],
    "signupDialogComp": [{ type: ViewChild, args: [SignupFormComponent,] },],
};
UserManagementViewComponent = __decorate([
    AddonView('@materia/users'),
    __metadata("design:paramtypes", [MatDialog,
        HttpClient,
        MatSnackBar])
], UserManagementViewComponent);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
let UserManagementSetupComponent = class UserManagementSetupComponent {
    /**
     * @param {?} fb
     * @param {?} http
     */
    constructor(fb, http) {
        this.fb = fb;
        this.http = http;
        this.save = new EventEmitter();
        this.cancel = new EventEmitter();
        this.emailAddons = [];
    }
    /**
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    getSettingsProperty(property, defaultValue) {
        return (this.settings && this.settings[property]) || defaultValue;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.http
            .get(this.baseUrl + '/infos')
            .toPromise()
            .then(res => {
            this.loginForm = this.fb.group({
                method: [
                    this.getSettingsProperty('method', 'session'),
                    Validators.required
                ],
                user_profile_enabled: [
                    this.getSettingsProperty('user_profile_enabled', false)
                ],
                user_profile_entity: [
                    this.getSettingsProperty('user_profile_entity', null)
                ],
                email_verification: [
                    this.getSettingsProperty('email_verification', false)
                ],
                email_addon: [this.getSettingsProperty('email_addon', false)],
            });
            this.entities = res.entities.filter(entity => !entity.fromAddon);
            this.emailAddons = res.addons.filter(addon => addon.package === '@materia/sendgrid' ||
                addon.package === '@materia/mailjet');
            if (this.emailAddons.length === 0) {
                this.loginForm.get('email_verification').disable();
                this.loginForm.get('email_addon').disable();
            }
            if (!this.settings || !this.settings.email_verification) {
                this.loginForm.get('email_addon').disable();
            }
            if (!this.settings || !this.settings.user_profile_enabled) {
                this.loginForm.get('user_profile_entity').disable();
            }
            if (this.entities.length === 0) {
                this.loginForm.get('user_profile_enabled').setValue(false);
                this.loginForm.get('user_profile_entity').setValue(null);
                this.loginForm.get('user_profile_enabled').disable();
                this.loginForm.get('user_profile_entity').disable();
            }
            this.loginForm
                .get('user_profile_enabled')
                .valueChanges.subscribe(val => {
                if (val) {
                    this.loginForm.get('user_profile_entity').enable();
                }
                else {
                    this.loginForm.get('user_profile_entity').disable();
                }
            });
            this.loginForm.get('email_verification').valueChanges.subscribe(val => {
                if (val) {
                    this.loginForm.get('email_addon').enable();
                }
                else {
                    this.loginForm.get('email_addon').disable();
                }
            });
        });
    }
    /**
     * @return {?}
     */
    finish() {
        if (this.loginForm.valid) {
            this.save.emit(this.loginForm.value);
        }
    }
    /**
     * @return {?}
     */
    close() {
        this.cancel.emit();
    }
};
UserManagementSetupComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-user-management-setup',
                template: `<form *ngIf="loginForm" [formGroup]="loginForm" style="max-width: 400px">
	<h2 mat-dialog-title fxLayout="row">
		<span fxFlex style="position: relative; top: 3px; left: 5px;">User Management - Setup</span>
		<button (click)="close()" tabindex="-1" mat-icon-button>
			<mat-icon>close</mat-icon>
		</button>
	</h2>
	<mat-dialog-content>
		<div fxLayout="column">
			<h3>
				Authentication method
			</h3>
			<mat-radio-group formControlName="method" fxLayout="column">
				<mat-radio-button value="token">Token based authentication (mobile ready)</mat-radio-button>
				<mat-radio-button value="session">Session based authentication</mat-radio-button>
			</mat-radio-group>
			
			<h3>
				<mat-checkbox formControlName="user_profile_enabled">User profile</mat-checkbox>
			</h3>
			<mat-form-field *ngIf="entities && entities.length > 0; else noEntities">
				<mat-select placeholder="Select the user profile entity" formControlName="user_profile_entity">
					<mat-option *ngFor="let e of entities" [value]="e.name">{{ e.name }}</mat-option>
				</mat-select>
			</mat-form-field>
			<ng-template #noEntities>
				<div class="warning">
					No entity found. You need an entity to add custom fields to your users.
				</div>
			</ng-template>
		
			<h3>
				<mat-checkbox formControlName="email_verification">Emails enabled</mat-checkbox>
			</h3>

			<mat-form-field *ngIf="emailAddons && emailAddons.length > 0; else noEmailAddon">
				<mat-select placeholder="Select your emailing addon" formControlName="email_addon">
					<mat-option *ngFor="let e of emailAddons" [value]="e.package">{{ e.name }}</mat-option>
				</mat-select>
			</mat-form-field>

			<ng-template #noEmailAddon>
				<div class="warning">You need
					<strong>Sendgrid</strong> or
					<strong>Mailjet</strong> addon installed
					<br>to send email from your Materia Application such as a signup email</div>
			</ng-template>
		</div>
	</mat-dialog-content>
	<mat-dialog-actions>
		<button mat-raised-button color="primary" (click)="finish()">Save</button>
		<button mat-raised-button (click)="close()">Cancel</button>
	</mat-dialog-actions>
</form>`,
                styles: [`mat-form-field{width:100%;margin:0 5px}.mat-dialog-content{margin:0;padding:0 24px}.mat-dialog-actions{padding:12px 24px}h3{margin-top:16px;margin-bottom:8px}.warning{margin:16px 0;padding:8px;border:1px solid #f44336;color:#f44336}`],
                providers: [FormBuilder]
            },] },
];
/** @nocollapse */
UserManagementSetupComponent.ctorParameters = () => [
    { type: FormBuilder, },
    { type: HttpClient, },
];
UserManagementSetupComponent.propDecorators = {
    "app": [{ type: Input },],
    "settings": [{ type: Input },],
    "baseUrl": [{ type: Input },],
    "token": [{ type: Input },],
    "save": [{ type: Output },],
    "cancel": [{ type: Output },],
};
UserManagementSetupComponent = __decorate([
    AddonSetup('@materia/users'),
    __metadata("design:paramtypes", [FormBuilder, HttpClient])
], UserManagementSetupComponent);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ DefaultComponent = Object.freeze({
    text: 'text',
    number: 'text',
    date: 'date',
    float: 'text',
    boolean: 'switch'
});
class ParamInputComponent {
    constructor() {
        this.showAsterisk = true;
        this.showCheckbox = true;
        this.changed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get requiredError() {
        return (this.form.get(this.param.name) &&
            this.form.get(this.param.name).hasError('required'));
    }
    /**
     * @return {?}
     */
    get checkboxName() {
        return `${this.param.name}_check`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.type = this.param.type;
        if (!this.label) {
            this.label = this.param.name;
            if (this.param.required && this.showAsterisk) {
                this.label += '*';
            }
        }
        if (this.param && this.param.component) {
            if (this.param.component === 'input') {
                if (this.param.type === 'text' || this.param.type === 'string') {
                    this.actualComponent = 'text';
                }
                else if (this.param.type === 'number') {
                    this.actualComponent = 'number';
                }
                else {
                    this.actualComponent = this.param.component;
                }
            }
            else {
                if (this.param.component === 'datePicker') {
                    this.actualComponent = 'date';
                }
                else if (this.param.component === 'timePicker') {
                    this.actualComponent = 'time';
                }
                else if (this.param.component === 'dateTimePicker') {
                    this.actualComponent = 'datetime-local';
                }
                else {
                    this.actualComponent = this.param.component;
                }
            }
        }
        else {
            this.actualComponent = DefaultComponent[this.type];
        }
        if (this.showCheckbox && !this.param.required) {
            this.form.get(this.param.name).valueChanges.subscribe(val => {
                if (val) {
                    this.form.get(this.checkboxName).setValue(true);
                }
                else {
                    this.form.get(this.checkboxName).setValue(false);
                }
            });
        }
    }
}
ParamInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-param-input',
                template: `<div [formGroup]="form" fxLayout="row">
	<div fxLayout="row" fxFlex>
		<mat-checkbox [formControlName]="checkboxName" *ngIf=" ! param.required && showCheckbox && type !== 'boolean'">
		</mat-checkbox>
		<mat-form-field *ngIf="type != 'boolean' && actualComponent != 'markdown' && actualComponent != 'article'" fxFlex>
			<input *ngIf="type != 'boolean' && type != 'date' && type != 'float' && actualComponent != 'textarea'" tabindex="0" matInput
			 [formControlName]="param.name" [placeholder]="label" [type]="actualComponent" />
			<input *ngIf="type == 'float'" matInput tabindex="0" type="number" step="any" [placeholder]="label" [formControlName]="param.name"
			/>
			<textarea *ngIf="actualComponent == 'textarea'" tabindex="0" matInput [placeholder]="label" [formControlName]="param.name"></textarea>
			<input *ngIf="type == 'date'" matInput tabindex="0" [formControlName]="param.name" [matDatepicker]="picker" [placeholder]="param.name">
			<mat-datepicker-toggle *ngIf="type == 'date'" matSuffix [for]="picker"></mat-datepicker-toggle>
			<mat-datepicker #picker></mat-datepicker>
			<mat-error *ngIf="requiredError">
				{{param.name}} is
				<strong>required</strong>
			</mat-error>
		</mat-form-field>
		<mat-checkbox *ngIf="type == 'boolean'" tabindex="0" [formControlName]="param.name" style="top: 0;">{{label}}</mat-checkbox>
		<div class="markdown" *ngIf="actualComponent == 'markdown'" fxLayout="column" fxFlex>
			<label>{{label}}</label>
			<textarea tabindex="0" [formControlName]="param.name" simplemde="{spellChecker: false, toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', 'image', 'table']}"></textarea>
		</div>
	</div>
</div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
ParamInputComponent.ctorParameters = () => [];
ParamInputComponent.propDecorators = {
    "param": [{ type: Input },],
    "disabled": [{ type: Input },],
    "form": [{ type: Input },],
    "label": [{ type: Input },],
    "showAsterisk": [{ type: Input },],
    "showCheckbox": [{ type: Input },],
    "changed": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EmailSettingsComponent {
    /**
     * @param {?} http
     * @param {?} form
     */
    constructor(http, form) {
        this.http = http;
        this.form = form;
        this.hide = new EventEmitter();
        this.save = new EventEmitter();
    }
    /**
     * @param {?} property
     * @param {?} defaultValue
     * @return {?}
     */
    getSettingsProperty(property, defaultValue) {
        return (this.settings && this.settings[property]) || defaultValue;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.emailForm = this.form.group({
            method: [
                this.getSettingsProperty('method', 'session'),
                Validators.required
            ],
            static_salt: [
                this.getSettingsProperty('static_salt', ''),
                Validators.required
            ],
            user_profile_enabled: [
                this.getSettingsProperty('user_profile_enabled', 'false')
            ],
            user_profile_entity: [
                this.getSettingsProperty('user_profile_entity', '')
            ],
            email_verification: [
                this.getSettingsProperty('email_verification', false)
            ],
            email_addon: [this.getSettingsProperty('email_addon', false)],
            template_signup: [this.getSettingsProperty('template_signup', '')],
            redirect_signup: [this.getSettingsProperty('redirect_signup', '')],
            subject_signup: [this.getSettingsProperty('subject_signup', '')],
            subject_lost_password: [this.getSettingsProperty('subject_lost_password', '')],
            subject_change_email: [this.getSettingsProperty('subject_change_email', '')],
            template_lost_password: [
                this.getSettingsProperty('template_lost_password', '')
            ],
            redirect_lost_password: [
                this.getSettingsProperty('redirect_lost_password', '')
            ],
            template_change_email: [
                this.getSettingsProperty('template_change_email', '')
            ],
            redirect_change_email: [
                this.getSettingsProperty('redirect_change_email', '')
            ]
        });
        this.refreshTemplates();
    }
    /**
     * @return {?}
     */
    refreshTemplates() {
        if (this.settings.email_addon === '@materia/mailjet') {
            this.http
                .post(`${this.baseUrl}/entities/mailjet_template/queries/list`, { limit: 1000 })
                .subscribe(data => {
                this.templates = data.data
                    .filter(row => row.OwnerId !== 1)
                    .map(row => {
                    return {
                        name: row.Name,
                        id: row.ID
                    };
                });
            });
        }
        else if (this.settings.email_addon === '@materia/sendgrid') {
            this.http
                .post(`${this.baseUrl}/entities/sendgrid_template/queries/listTemplates`, {})
                .subscribe(data => {
                this.templates = data && data.data && data.data;
                // TODO...
            });
        }
    }
    /**
     * @return {?}
     */
    saveEmailSettings() {
        if (this.emailForm.valid) {
            this.save.emit(this.emailForm.value);
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.hide.emit();
    }
}
EmailSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'materia-user-management-email-settings',
                template: `<form [formGroup]="emailForm">
	<mat-accordion>
		<mat-expansion-panel #signupPanel [expanded]="true" fxLayout="column">
			<mat-expansion-panel-header>
				Signup
			</mat-expansion-panel-header>

			<div class="panel-content" fxLayout="column">
				<mat-form-field>
					<input matInput placeholder="Subject" formControlName="subject_signup">
				</mat-form-field>

				<mat-form-field>
					<mat-select placeholder="Template" formControlName="template_signup">
						<mat-option *ngFor="let t of templates" [value]="t.id">{{ t.name }} ({{t.id}})</mat-option>
					</mat-select>
				</mat-form-field>
				<mat-form-field>
					<input matInput placeholder="Redirect URL" formControlName="redirect_signup">
				</mat-form-field>
			</div>
		</mat-expansion-panel>

		<mat-expansion-panel #changeEmailPanel>
			<mat-expansion-panel-header>
				Change email
			</mat-expansion-panel-header>

			<div class="panel-content" fxLayout="column">
				<mat-form-field>
					<input matInput placeholder="Subject" formControlName="subject_change_email">
				</mat-form-field>

				<mat-form-field>
					<mat-select placeholder="Template" formControlName="template_change_email">
						<mat-option *ngFor="let t of templates" [value]="t.id">{{ t.name }} ({{t.id}})</mat-option>
					</mat-select>
				</mat-form-field>
				<mat-form-field>
					<input matInput placeholder="Redirect URL" formControlName="redirect_change_email">
				</mat-form-field>
			</div>
		</mat-expansion-panel>

		<mat-expansion-panel #lostPasswordPanel fxLayout="column">
			<mat-expansion-panel-header>
				Lost password
			</mat-expansion-panel-header>
			<div class="panel-content" fxLayout="column">

				<mat-form-field>
					<input matInput placeholder="Subject" formControlName="subject_lost_password">
				</mat-form-field>
				<mat-form-field>
					<mat-select placeholder="Template" formControlName="template_lost_password">
						<mat-option *ngFor="let t of templates" [value]="t.id">{{ t.name }} ({{t.id}})</mat-option>
					</mat-select>
				</mat-form-field>
				<mat-form-field>
					<input matInput placeholder="Redirect URL" formControlName="redirect_lost_password">
				</mat-form-field>
			</div>
		</mat-expansion-panel>
	</mat-accordion>
	<div style="margin: 16px 0; text-align: center;">
		<button mat-raised-button color="primary" (click)="saveEmailSettings()" style="margin-right: 8px">Save</button>
		<button mat-raised-button (click)="hide.emit()">Cancel</button>
	</div>
</form>`,
                styles: [`.panel-content{margin:0 24px!important}`]
            },] },
];
/** @nocollapse */
EmailSettingsComponent.ctorParameters = () => [
    { type: HttpClient, },
    { type: FormBuilder, },
];
EmailSettingsComponent.propDecorators = {
    "settings": [{ type: Input },],
    "baseUrl": [{ type: Input },],
    "hide": [{ type: Output },],
    "save": [{ type: Output },],
    "signupPanel": [{ type: ViewChild, args: ['signupPanel',] },],
    "changeEmailPanel": [{ type: ViewChild, args: ['changeEmailPanel',] },],
    "lostPasswordPanel": [{ type: ViewChild, args: ['lostPasswordPanel',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
let UserManagementModule = class UserManagementModule {
};
UserManagementModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    HttpClientModule,
                    FlexLayoutModule,
                    MatRippleModule,
                    MatButtonModule,
                    MatSnackBarModule,
                    MatCardModule,
                    MatIconModule,
                    MatDialogModule,
                    MatInputModule,
                    MatTooltipModule,
                    MatCheckboxModule,
                    MatSelectModule,
                    MatToolbarModule,
                    MatDatepickerModule,
                    MatNativeDateModule,
                    MatExpansionModule,
                    MatListModule,
                    MatRadioModule,
                    MatStepperModule,
                    MatProgressSpinnerModule
                ],
                declarations: [
                    UserManagementViewComponent,
                    EmailSettingsComponent,
                    UserManagementSetupComponent,
                    SignupFormComponent,
                    ParamInputComponent
                ],
                exports: [UserManagementViewComponent],
                entryComponents: []
            },] },
];
UserManagementModule = __decorate([
    Addon('@materia/users')
], UserManagementModule);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { UserManagementViewComponent, UserManagementModule, EmailSettingsComponent as ɵb, ParamInputComponent as ɵd, SignupFormComponent as ɵa, UserManagementSetupComponent as ɵc };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,