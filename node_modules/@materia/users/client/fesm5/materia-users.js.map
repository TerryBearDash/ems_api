{"version":3,"file":"materia-users.js.map","sources":["ng://@materia/users/signup-form/signup-form.component.ts","ng://@materia/users/user-management/user-management.component.ts","ng://@materia/users/user-management-setup/user-management-setup.component.ts","ng://@materia/users/param-input/param-input.component.ts","ng://@materia/users/emails-settings/email-settings.component.ts","ng://@materia/users/user-management.module.ts"],"sourcesContent":["import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  ViewChild,\n  TemplateRef,\n  Input,\n  OnChanges\n} from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'materia-signup-form',\n  template: `<ng-template #template>\n\t<mat-card fxLayout=\"column\">\n\t\t<mat-toolbar>Create a new user</mat-toolbar>\n\t\n\t\t<form [formGroup]=\"signupForm\" fxLayout=\"column\" style=\"padding: 24px;\">\n\t\t\t<mat-form-field>\n\t\t\t\t<input formControlName=\"email\" matInput placeholder=\"Email\" required type=\"email\" name=\"email\">\n\t\t\t</mat-form-field>\n\t\n\t\t\t<mat-form-field>\n\t\t\t\t<input formControlName=\"password\" matInput placeholder=\"Password\" required type=\"password\" name=\"password\">\n\t\t\t</mat-form-field>\n\t\t\t<div *ngIf=\"profileFields.length > 0\">\n\t\t\t\t<materia-param-input [showCheckbox]=\"false\" [form]=\"signupForm\" [param]=\"param\" *ngFor=\"let param of profileFields\"></materia-param-input>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<button (click)=\"signup.emit(signupForm.value)\" mat-raised-button color=\"primary\">Create</button>\n\t\t\t\t<button (click)=\"cancel.emit()\" mat-raised-button>Cancel</button>\n\t\t\t</div>\n\t\t</form>\n\t</mat-card>\n</ng-template>`,\n  styles: [`mat-card{width:300px;margin:0p;padding:0}`]\n})\nexport class SignupFormComponent implements OnInit, OnChanges {\n  @Output() signup: EventEmitter<any> = new EventEmitter();\n  @Output() cancel: EventEmitter<void> = new EventEmitter();\n\n  @ViewChild('template') template: TemplateRef<any>;\n\n  signupForm: FormGroup;\n\n  @Input() profileFields: any;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnChanges(changes) {\n    if (changes.profileFields && changes.profileFields.currentValue) {\n      this.initForm();\n    }\n  }\n  private initForm() {\n    this.signupForm = this.fb.group(Object.assign({}, {\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    }, this.getProfileFormGroup()));\n  }\n\n  private getProfileFormGroup() {\n    if (! this.profileFields) { return {}; }\n    const result: any = {};\n    this.profileFields.forEach(field => {\n      if (field.required) {\n        result[field.name] = ['', Validators.required];\n      } else {\n        result[field.name] = '';\n      }\n    });\n    return result;\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  signupClick() {\n    this.signup.emit(this.signupForm.value);\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild\n} from '@angular/core';\nimport { MatDialog, MatDialogRef, MatSnackBar } from '@angular/material';\nimport { AddonView } from '@materia/addons';\nimport { HttpClient } from '@angular/common/http';\n\nimport { SignupFormComponent } from '../signup-form/signup-form.component';\n\nexport interface User {\n  email: string;\n  gravatar: string;\n  name: string;\n}\n@AddonView('@materia/users')\n@Component({\n  selector: 'materia-user-management',\n  template: `<div fxLayout=\"column\" fxFlex>\n\t<div *ngIf=\"me\" style=\"padding: 8px 16px; background-color: #4CAF50; color: white;\">\n\t\tCurrently connected as {{me.email}} (<a style=\"text-decoration: underline; cursor: pointer;\" (click)=\"logout()\">Logout</a>)\n\t</div>\n\t<div fxLayout=\"row\" fxFlex>\n\t\t<mat-card fxLayout=\"column\" fxFlex *ngIf=\"!loading; else loadingUsers\">\n\t\t\t<mat-toolbar fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\t\t\t\t<mat-icon>people</mat-icon>\n\t\t\t\t<span>\n\t\t\t\t\tUsers\n\t\t\t\t</span>\n\t\t\t\t<span fxFlex></span>\n\t\t\t\t<button *ngIf=\"!displayEmailSettings && settings.email_verification && settings.email_addon\" style=\"margin-right: 8px;\" (click)=\"configureEmails()\" mat-button>Configure emails</button>\n\t\t\t\t<button mat-mini-fab (click)=\"openSignupDialog()\" matTooltip=\"New User\" matTooltipPosition=\"left\" style=\"width: 31px; height: 31px;\">\n\t\t\t\t\t<mat-icon style=\"position: relative; top: -6px; left: -4px;\">add</mat-icon>\n\t\t\t\t</button>\n\t\t\t</mat-toolbar>\n\t\t\t<div *ngIf=\"users && users.length; else noUser\" style=\"border-top: 1px solid #EEE; overflow-y: auto;\" fxLayout=\"column\" fxFlex>\n\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngFor=\"let user of users\" style=\"border-bottom: 1px solid #EEE; cursor: pointer;min-height: 40px\">\n\t\t\t\t\t<img [src]=\"user.gravatar\" class=\"avatar\" style=\"margin: 0 8px; width:32px; height:32px;border-radius: 100%\" />\n\t\t\t\t\t<div style=\"color: #999; padding-top: 0\">{{user.email}}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ng-template #noUser>\n\t\t\t\t<div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"no-users\">\n\t\t\t\t\t<span>There is no users registered yet</span>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button (click)=\"openSignupDialog()\" mat-raised-button color=\"primary\" [style.margin]=\"'15px'\" [style.color]=\"'white'\">Create\n\t\t\t\t\t\t\ta user</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t</mat-card>\n\t\t<ng-template #loadingUsers>\n\t\t\t<mat-card fxLayout=\"column\" fxFlex fxLayoutAlign=\"center center\">\n\t\t\t\t<mat-spinner></mat-spinner>\n\t\t\t</mat-card>\n\t\t</ng-template>\n\t\t<div style=\"margin: 8px;\" *ngIf=\"displayEmailSettings\" fxLayout=\"column\" fxFlex>\n\t\t\t<mat-toolbar fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\t\t\t\t<button mat-icon-button (click)=\"hideEmailSettings()\" matTooltip=\"Hide email settings\" matTooltipPosition=\"right\">\n\t\t\t\t\t<mat-icon>arrow_back</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<mat-icon>mail</mat-icon>\n\t\t\t\t<span>\n\t\t\t\t\tEmails\n\t\t\t\t</span>\n\t\t\t\t<span fxFlex></span>\n\t\t\t</mat-toolbar>\n\t\t\t<materia-user-management-email-settings [settings]=\"settings\" [baseUrl]=\"baseUrl\"\n\t\t\t\t(hide)=\"hideEmailSettings()\" (save)=\"saveEmailSettings($event)\" fxFlex style=\"overflow-y: auto;\">\n\t\t\t</materia-user-management-email-settings>\n\t\t</div>\n\t</div>\n</div>\n<materia-signup-form #signupFormTemplate [profileFields]=\"profileFields\" (signup)=\"signup($event)\" (cancel)=\"closeSignupDialog()\"></materia-signup-form>`,\n  styles: [`:host{flex:1 1 0}mat-card{margin:8px;padding:0}mat-icon{margin:2px 8px}.no-users{font-style:italic}`],\n  providers: []\n})\nexport class UserManagementViewComponent implements OnInit {\n  @Input()\n  app;\n  @Input()\n  settings;\n\n  @Input()\n  baseUrl;\n  @Input()\n  apiUrl;\n\n  @Output()\n  openSetup = new EventEmitter<void>();\n\n  @ViewChild(SignupFormComponent)\n  signupDialogComp: SignupFormComponent;\n\n  loading = true;\n  me: any;\n  users: User[] = [];\n  nbUsers = 0;\n  signupDialog: MatDialogRef<any>;\n  profileFields: any[];\n  displayEmailSettings: boolean;\n\n  constructor(\n    private dialog: MatDialog,\n    private http: HttpClient,\n    private snackbar: MatSnackBar\n  ) {}\n\n  ngOnInit() {\n    this.refreshList();\n    this.refreshConnectedUser();\n    this.getProfileParams();\n  }\n\n  getProfileParams() {\n    if (\n      this.settings &&\n      this.settings.user_profile_enabled &&\n      this.settings.user_profile_entity\n    ) {\n      return this.http\n        .get<any>(`${this.baseUrl}/infos`)\n        .toPromise()\n        .then(res => {\n          const profileEntity = res.entities.find(\n            entity => entity.name === this.settings.user_profile_entity\n          );\n          this.profileFields = profileEntity.fields.filter(\n            field =>\n              field.name !== 'id_user' &&\n              (!field.primary || (field.primary && !field.autoIncrement))\n          );\n        })\n        .catch(e => {\n          this.profileFields = [];\n        });\n    } else {\n      this.profileFields = [];\n      return Promise.resolve();\n    }\n  }\n\n  refreshList() {\n    this.loading = true;\n    this.http\n      .post<any>(`${this.baseUrl}/entities/user/queries/listWithGravatar`, {})\n      .subscribe(res => {\n        this.users = res.data;\n        this.nbUsers = res.count;\n        this.loading = false;\n      });\n  }\n\n  refreshConnectedUser() {\n    this.http.get<any>(`${this.apiUrl}/user/me`).subscribe(\n      res => {\n        this.me = res;\n      },\n      () => (this.me = null)\n    );\n  }\n\n  configureEmails() {\n    this.displayEmailSettings = true;\n  }\n  hideEmailSettings() {\n    this.displayEmailSettings = false;\n  }\n  openSignupDialog() {\n    this.signupDialog = this.dialog.open(this.signupDialogComp.template, {\n      panelClass: 'no-padding'\n    });\n  }\n\n  saveEmailSettings(settings) {\n    this.http\n      .post<any>(`${this.baseUrl}/addons/@materia/users/setup`, settings)\n      .subscribe(res => {\n        this.snackbar.open('Settings saved!', null, {\n          duration: 3000\n        });\n        this.hideEmailSettings();\n        this.settings = settings;\n      });\n  }\n\n  closeSignupDialog() {\n    this.signupDialog.close();\n  }\n\n  signup(user) {\n    this.http.post<any>(`${this.apiUrl}/user/signup`, user).subscribe(() => {\n      this.closeSignupDialog();\n      this.refreshList();\n      this.refreshConnectedUser();\n    });\n  }\n\n  logout() {\n    this.http.post<any>(`${this.apiUrl}/user/logout`, {}).subscribe(\n      () => {\n        this.refreshConnectedUser();\n      },\n      () => this.refreshConnectedUser()\n    );\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport { AddonSetup } from '@materia/addons';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface IUserManagementSetup {\n  method: string;\n  user_profile_enabled: boolean;\n  user_profile_entity: string;\n  email_verification: boolean;\n  email_addon: string;\n}\n\n@AddonSetup('@materia/users')\n@Component({\n  selector: 'materia-user-management-setup',\n  template: `<form *ngIf=\"loginForm\" [formGroup]=\"loginForm\" style=\"max-width: 400px\">\n\t<h2 mat-dialog-title fxLayout=\"row\">\n\t\t<span fxFlex style=\"position: relative; top: 3px; left: 5px;\">User Management - Setup</span>\n\t\t<button (click)=\"close()\" tabindex=\"-1\" mat-icon-button>\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</h2>\n\t<mat-dialog-content>\n\t\t<div fxLayout=\"column\">\n\t\t\t<h3>\n\t\t\t\tAuthentication method\n\t\t\t</h3>\n\t\t\t<mat-radio-group formControlName=\"method\" fxLayout=\"column\">\n\t\t\t\t<mat-radio-button value=\"token\">Token based authentication (mobile ready)</mat-radio-button>\n\t\t\t\t<mat-radio-button value=\"session\">Session based authentication</mat-radio-button>\n\t\t\t</mat-radio-group>\n\t\t\t\n\t\t\t<h3>\n\t\t\t\t<mat-checkbox formControlName=\"user_profile_enabled\">User profile</mat-checkbox>\n\t\t\t</h3>\n\t\t\t<mat-form-field *ngIf=\"entities && entities.length > 0; else noEntities\">\n\t\t\t\t<mat-select placeholder=\"Select the user profile entity\" formControlName=\"user_profile_entity\">\n\t\t\t\t\t<mat-option *ngFor=\"let e of entities\" [value]=\"e.name\">{{ e.name }}</mat-option>\n\t\t\t\t</mat-select>\n\t\t\t</mat-form-field>\n\t\t\t<ng-template #noEntities>\n\t\t\t\t<div class=\"warning\">\n\t\t\t\t\tNo entity found. You need an entity to add custom fields to your users.\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t\n\t\t\t<h3>\n\t\t\t\t<mat-checkbox formControlName=\"email_verification\">Emails enabled</mat-checkbox>\n\t\t\t</h3>\n\n\t\t\t<mat-form-field *ngIf=\"emailAddons && emailAddons.length > 0; else noEmailAddon\">\n\t\t\t\t<mat-select placeholder=\"Select your emailing addon\" formControlName=\"email_addon\">\n\t\t\t\t\t<mat-option *ngFor=\"let e of emailAddons\" [value]=\"e.package\">{{ e.name }}</mat-option>\n\t\t\t\t</mat-select>\n\t\t\t</mat-form-field>\n\n\t\t\t<ng-template #noEmailAddon>\n\t\t\t\t<div class=\"warning\">You need\n\t\t\t\t\t<strong>Sendgrid</strong> or\n\t\t\t\t\t<strong>Mailjet</strong> addon installed\n\t\t\t\t\t<br>to send email from your Materia Application such as a signup email</div>\n\t\t\t</ng-template>\n\t\t</div>\n\t</mat-dialog-content>\n\t<mat-dialog-actions>\n\t\t<button mat-raised-button color=\"primary\" (click)=\"finish()\">Save</button>\n\t\t<button mat-raised-button (click)=\"close()\">Cancel</button>\n\t</mat-dialog-actions>\n</form>`,\n  styles: [`mat-form-field{width:100%;margin:0 5px}.mat-dialog-content{margin:0;padding:0 24px}.mat-dialog-actions{padding:12px 24px}h3{margin-top:16px;margin-bottom:8px}.warning{margin:16px 0;padding:8px;border:1px solid #f44336;color:#f44336}`],\n  providers: [FormBuilder]\n})\nexport class UserManagementSetupComponent implements OnInit {\n  @Input() app;\n  @Input() settings: IUserManagementSetup;\n  @Input() baseUrl: string;\n  @Input() token: string;\n  @Output() save = new EventEmitter<IUserManagementSetup>();\n  @Output() cancel = new EventEmitter<void>();\n\n  loginForm: FormGroup;\n  entities: any[];\n  emailAddons = [];\n\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n\n  private getSettingsProperty(property, defaultValue) {\n    return (this.settings && this.settings[property]) || defaultValue;\n  }\n\n  ngOnInit() {\n    this.http\n      .get<any>(this.baseUrl + '/infos')\n      .toPromise()\n      .then(res => {\n        this.loginForm = this.fb.group({\n          method: [\n            this.getSettingsProperty('method', 'session'),\n            Validators.required\n          ],\n          user_profile_enabled: [\n            this.getSettingsProperty('user_profile_enabled', false)\n          ],\n          user_profile_entity: [\n            this.getSettingsProperty('user_profile_entity', null)\n          ],\n          email_verification: [\n            this.getSettingsProperty('email_verification', false)\n          ],\n          email_addon: [this.getSettingsProperty('email_addon', false)],\n        });\n        this.entities = res.entities.filter(entity => ! entity.fromAddon);\n        this.emailAddons = res.addons.filter(\n          addon =>\n            addon.package === '@materia/sendgrid' ||\n            addon.package === '@materia/mailjet'\n        );\n\n        if (this.emailAddons.length === 0) {\n          this.loginForm.get('email_verification').disable();\n          this.loginForm.get('email_addon').disable();\n        }\n\n        if ( ! this.settings || ! this.settings.email_verification) {\n          this.loginForm.get('email_addon').disable();\n        }\n\n        if ( ! this.settings || ! this.settings.user_profile_enabled) {\n          this.loginForm.get('user_profile_entity').disable();\n        }\n\n        if (this.entities.length === 0) {\n          this.loginForm.get('user_profile_enabled').setValue(false);\n          this.loginForm.get('user_profile_entity').setValue(null);\n          this.loginForm.get('user_profile_enabled').disable();\n          this.loginForm.get('user_profile_entity').disable();\n        }\n        this.loginForm\n          .get('user_profile_enabled')\n          .valueChanges.subscribe(val => {\n            if (val) {\n              this.loginForm.get('user_profile_entity').enable();\n            } else {\n              this.loginForm.get('user_profile_entity').disable();\n            }\n          });\n\n        this.loginForm.get('email_verification').valueChanges.subscribe(val => {\n          if (val) {\n            this.loginForm.get('email_addon').enable();\n          } else {\n            this.loginForm.get('email_addon').disable();\n          }\n        });\n      });\n  }\n\n  finish() {\n    if (this.loginForm.valid) {\n      this.save.emit(this.loginForm.value);\n    }\n  }\n\n  close() {\n    this.cancel.emit();\n  }\n}\n","import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\n\nimport { FormGroup } from '@angular/forms';\n\nconst DefaultComponent = Object.freeze({\n  text: 'text',\n  number: 'text',\n  date: 'date',\n  float: 'text',\n  boolean: 'switch'\n});\n\n@Component({\n  selector: 'materia-param-input',\n  template: `<div [formGroup]=\"form\" fxLayout=\"row\">\n\t<div fxLayout=\"row\" fxFlex>\n\t\t<mat-checkbox [formControlName]=\"checkboxName\" *ngIf=\" ! param.required && showCheckbox && type !== 'boolean'\">\n\t\t</mat-checkbox>\n\t\t<mat-form-field *ngIf=\"type != 'boolean' && actualComponent != 'markdown' && actualComponent != 'article'\" fxFlex>\n\t\t\t<input *ngIf=\"type != 'boolean' && type != 'date' && type != 'float' && actualComponent != 'textarea'\" tabindex=\"0\" matInput\n\t\t\t [formControlName]=\"param.name\" [placeholder]=\"label\" [type]=\"actualComponent\" />\n\t\t\t<input *ngIf=\"type == 'float'\" matInput tabindex=\"0\" type=\"number\" step=\"any\" [placeholder]=\"label\" [formControlName]=\"param.name\"\n\t\t\t/>\n\t\t\t<textarea *ngIf=\"actualComponent == 'textarea'\" tabindex=\"0\" matInput [placeholder]=\"label\" [formControlName]=\"param.name\"></textarea>\n\t\t\t<input *ngIf=\"type == 'date'\" matInput tabindex=\"0\" [formControlName]=\"param.name\" [matDatepicker]=\"picker\" [placeholder]=\"param.name\">\n\t\t\t<mat-datepicker-toggle *ngIf=\"type == 'date'\" matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n\t\t\t<mat-datepicker #picker></mat-datepicker>\n\t\t\t<mat-error *ngIf=\"requiredError\">\n\t\t\t\t{{param.name}} is\n\t\t\t\t<strong>required</strong>\n\t\t\t</mat-error>\n\t\t</mat-form-field>\n\t\t<mat-checkbox *ngIf=\"type == 'boolean'\" tabindex=\"0\" [formControlName]=\"param.name\" style=\"top: 0;\">{{label}}</mat-checkbox>\n\t\t<div class=\"markdown\" *ngIf=\"actualComponent == 'markdown'\" fxLayout=\"column\" fxFlex>\n\t\t\t<label>{{label}}</label>\n\t\t\t<textarea tabindex=\"0\" [formControlName]=\"param.name\" simplemde=\"{spellChecker: false, toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', 'image', 'table']}\"></textarea>\n\t\t</div>\n\t</div>\n</div>`,\n  styles: [``]\n})\nexport class ParamInputComponent implements OnInit {\n  @Input() param: any;\n  @Input() disabled: boolean;\n\n  @Input() form: FormGroup;\n  @Input() label: string;\n\n  @Input() showAsterisk = true;\n  @Input() showCheckbox = true;\n\n  type: string;\n  actualComponent: string;\n\n  @Output() changed = new EventEmitter<any>();\n\n  get requiredError() {\n    return (\n      this.form.get(this.param.name) &&\n      this.form.get(this.param.name).hasError('required')\n    );\n  }\n\n  get checkboxName() {\n    return `${this.param.name}_check`;\n  }\n\n  constructor() {}\n\n  ngOnInit() {\n    this.type = this.param.type;\n\n    if (!this.label) {\n      this.label = this.param.name;\n      if (this.param.required && this.showAsterisk) {\n        this.label += '*';\n      }\n    }\n\n    if (this.param && this.param.component) {\n      if (this.param.component === 'input') {\n        if (this.param.type === 'text' || this.param.type === 'string') {\n          this.actualComponent = 'text';\n        } else if (this.param.type === 'number') {\n          this.actualComponent = 'number';\n        } else {\n          this.actualComponent = this.param.component;\n        }\n      } else {\n        if (this.param.component === 'datePicker') {\n          this.actualComponent = 'date';\n        } else if (this.param.component === 'timePicker') {\n          this.actualComponent = 'time';\n        } else if (this.param.component === 'dateTimePicker') {\n          this.actualComponent = 'datetime-local';\n        } else {\n          this.actualComponent = this.param.component;\n        }\n      }\n    } else {\n      this.actualComponent = DefaultComponent[this.type];\n    }\n\n    if (this.showCheckbox && !this.param.required) {\n      this.form.get(this.param.name).valueChanges.subscribe(val => {\n        if (val) {\n          this.form.get(this.checkboxName).setValue(true);\n        } else {\n          this.form.get(this.checkboxName).setValue(false);\n        }\n      });\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild\n} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatExpansionPanel } from '@angular/material';\n\n@Component({\n  selector: 'materia-user-management-email-settings',\n  template: `<form [formGroup]=\"emailForm\">\n\t<mat-accordion>\n\t\t<mat-expansion-panel #signupPanel [expanded]=\"true\" fxLayout=\"column\">\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tSignup\n\t\t\t</mat-expansion-panel-header>\n\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_signup\">\n\t\t\t\t</mat-form-field>\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_signup\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_signup\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\n\t\t<mat-expansion-panel #changeEmailPanel>\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tChange email\n\t\t\t</mat-expansion-panel-header>\n\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_change_email\">\n\t\t\t\t</mat-form-field>\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_change_email\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_change_email\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\n\t\t<mat-expansion-panel #lostPasswordPanel fxLayout=\"column\">\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\tLost password\n\t\t\t</mat-expansion-panel-header>\n\t\t\t<div class=\"panel-content\" fxLayout=\"column\">\n\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Subject\" formControlName=\"subject_lost_password\">\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<mat-select placeholder=\"Template\" formControlName=\"template_lost_password\">\n\t\t\t\t\t\t<mat-option *ngFor=\"let t of templates\" [value]=\"t.id\">{{ t.name }} ({{t.id}})</mat-option>\n\t\t\t\t\t</mat-select>\n\t\t\t\t</mat-form-field>\n\t\t\t\t<mat-form-field>\n\t\t\t\t\t<input matInput placeholder=\"Redirect URL\" formControlName=\"redirect_lost_password\">\n\t\t\t\t</mat-form-field>\n\t\t\t</div>\n\t\t</mat-expansion-panel>\n\t</mat-accordion>\n\t<div style=\"margin: 16px 0; text-align: center;\">\n\t\t<button mat-raised-button color=\"primary\" (click)=\"saveEmailSettings()\" style=\"margin-right: 8px\">Save</button>\n\t\t<button mat-raised-button (click)=\"hide.emit()\">Cancel</button>\n\t</div>\n</form>`,\n  styles: [`.panel-content{margin:0 24px!important}`]\n})\nexport class EmailSettingsComponent implements OnInit {\n  @Input()\n  settings: any;\n  @Input()\n  baseUrl: string;\n\n  emailForm: FormGroup;\n  templates: Array<{ name: string; id: number }>;\n\n  @Output()\n  hide = new EventEmitter<void>();\n  @Output()\n  save = new EventEmitter<any>();\n\n  @ViewChild('signupPanel')\n  signupPanel: MatExpansionPanel;\n  @ViewChild('changeEmailPanel')\n  changeEmailPanel: MatExpansionPanel;\n  @ViewChild('lostPasswordPanel')\n  lostPasswordPanel: MatExpansionPanel;\n\n  constructor(private http: HttpClient, private form: FormBuilder) {}\n\n  private getSettingsProperty(property, defaultValue) {\n    return (this.settings && this.settings[property]) || defaultValue;\n  }\n  ngOnInit(): void {\n    this.emailForm = this.form.group({\n      method: [\n        this.getSettingsProperty('method', 'session'),\n        Validators.required\n      ],\n      static_salt: [\n        this.getSettingsProperty('static_salt', ''),\n        Validators.required\n      ],\n      user_profile_enabled: [\n        this.getSettingsProperty('user_profile_enabled', 'false')\n      ],\n      user_profile_entity: [\n        this.getSettingsProperty('user_profile_entity', '')\n      ],\n      email_verification: [\n        this.getSettingsProperty('email_verification', false)\n      ],\n      email_addon: [this.getSettingsProperty('email_addon', false)],\n      template_signup: [this.getSettingsProperty('template_signup', '')],\n      redirect_signup: [this.getSettingsProperty('redirect_signup', '')],\n      subject_signup: [this.getSettingsProperty('subject_signup', '')],\n      subject_lost_password: [this.getSettingsProperty('subject_lost_password', '')],\n      subject_change_email: [this.getSettingsProperty('subject_change_email', '')],\n      template_lost_password: [\n        this.getSettingsProperty('template_lost_password', '')\n      ],\n      redirect_lost_password: [\n        this.getSettingsProperty('redirect_lost_password', '')\n      ],\n      template_change_email: [\n        this.getSettingsProperty('template_change_email', '')\n      ],\n      redirect_change_email: [\n        this.getSettingsProperty('redirect_change_email', '')\n      ]\n    });\n\n    this.refreshTemplates();\n  }\n\n  refreshTemplates() {\n    if (this.settings.email_addon === '@materia/mailjet') {\n      this.http\n        .post<any>(`${this.baseUrl}/entities/mailjet_template/queries/list`, {limit: 1000})\n        .subscribe(data => {\n          this.templates = data.data\n            .filter(row => row.OwnerId !== 1)\n            .map(row => {\n              return {\n                name: row.Name,\n                id: row.ID\n              };\n            });\n        });\n    } else if (this.settings.email_addon === '@materia/sendgrid') {\n      this.http\n        .post<any>(\n          `${this.baseUrl}/entities/sendgrid_template/queries/listTemplates`,\n          {}\n        )\n        .subscribe(data => {\n          this.templates = data && data.data && data.data;\n          // TODO...\n        });\n    }\n  }\n  saveEmailSettings() {\n    if (this.emailForm.valid) {\n      this.save.emit(this.emailForm.value);\n    }\n  }\n  cancel() {\n    this.hide.emit();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport {\n  MatButtonModule,\n  MatRippleModule,\n  MatSnackBarModule,\n  MatCardModule,\n  MatIconModule,\n  MatDialogModule,\n  MatInputModule,\n  MatListModule,\n  MatTooltipModule,\n  MatToolbarModule,\n  MatDatepickerModule,\n  MatExpansionModule,\n  MatNativeDateModule,\n  MatRadioModule,\n  MatStepperModule,\n  MatSelectModule,\n  MatCheckboxModule,\n  MatProgressSpinnerModule\n} from '@angular/material';\n\nimport { Addon } from '@materia/addons';\n\nimport { UserManagementViewComponent } from './user-management/user-management.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SignupFormComponent } from './signup-form/signup-form.component';\nimport { UserManagementSetupComponent } from './user-management-setup/user-management-setup.component';\nimport { ParamInputComponent } from './param-input/param-input.component';\nimport { EmailSettingsComponent } from './emails-settings/email-settings.component';\n\n@Addon('@materia/users')\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    FlexLayoutModule,\n    MatRippleModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatCardModule,\n    MatIconModule,\n    MatDialogModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatToolbarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatExpansionModule,\n    MatListModule,\n    MatRadioModule,\n    MatStepperModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    UserManagementViewComponent,\n    EmailSettingsComponent,\n    UserManagementSetupComponent,\n    SignupFormComponent,\n    ParamInputComponent\n  ],\n  exports: [UserManagementViewComponent],\n  entryComponents: []\n})\nexport class UserManagementModule {}\n"],"names":[],"mappings":"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"}
