/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';
var /** @type {?} */ DefaultComponent = Object.freeze({
    text: 'text',
    number: 'text',
    date: 'date',
    float: 'text',
    boolean: 'switch'
});
var ParamInputComponent = /** @class */ (function () {
    function ParamInputComponent() {
        this.showAsterisk = true;
        this.showCheckbox = true;
        this.changed = new EventEmitter();
    }
    Object.defineProperty(ParamInputComponent.prototype, "requiredError", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.form.get(this.param.name) &&
                this.form.get(this.param.name).hasError('required'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParamInputComponent.prototype, "checkboxName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.param.name + "_check";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ParamInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.type = this.param.type;
        if (!this.label) {
            this.label = this.param.name;
            if (this.param.required && this.showAsterisk) {
                this.label += '*';
            }
        }
        if (this.param && this.param.component) {
            if (this.param.component === 'input') {
                if (this.param.type === 'text' || this.param.type === 'string') {
                    this.actualComponent = 'text';
                }
                else if (this.param.type === 'number') {
                    this.actualComponent = 'number';
                }
                else {
                    this.actualComponent = this.param.component;
                }
            }
            else {
                if (this.param.component === 'datePicker') {
                    this.actualComponent = 'date';
                }
                else if (this.param.component === 'timePicker') {
                    this.actualComponent = 'time';
                }
                else if (this.param.component === 'dateTimePicker') {
                    this.actualComponent = 'datetime-local';
                }
                else {
                    this.actualComponent = this.param.component;
                }
            }
        }
        else {
            this.actualComponent = DefaultComponent[this.type];
        }
        if (this.showCheckbox && !this.param.required) {
            this.form.get(this.param.name).valueChanges.subscribe(function (val) {
                if (val) {
                    _this.form.get(_this.checkboxName).setValue(true);
                }
                else {
                    _this.form.get(_this.checkboxName).setValue(false);
                }
            });
        }
    };
    ParamInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'materia-param-input',
                    template: "<div [formGroup]=\"form\" fxLayout=\"row\">\n\t<div fxLayout=\"row\" fxFlex>\n\t\t<mat-checkbox [formControlName]=\"checkboxName\" *ngIf=\" ! param.required && showCheckbox && type !== 'boolean'\">\n\t\t</mat-checkbox>\n\t\t<mat-form-field *ngIf=\"type != 'boolean' && actualComponent != 'markdown' && actualComponent != 'article'\" fxFlex>\n\t\t\t<input *ngIf=\"type != 'boolean' && type != 'date' && type != 'float' && actualComponent != 'textarea'\" tabindex=\"0\" matInput\n\t\t\t [formControlName]=\"param.name\" [placeholder]=\"label\" [type]=\"actualComponent\" />\n\t\t\t<input *ngIf=\"type == 'float'\" matInput tabindex=\"0\" type=\"number\" step=\"any\" [placeholder]=\"label\" [formControlName]=\"param.name\"\n\t\t\t/>\n\t\t\t<textarea *ngIf=\"actualComponent == 'textarea'\" tabindex=\"0\" matInput [placeholder]=\"label\" [formControlName]=\"param.name\"></textarea>\n\t\t\t<input *ngIf=\"type == 'date'\" matInput tabindex=\"0\" [formControlName]=\"param.name\" [matDatepicker]=\"picker\" [placeholder]=\"param.name\">\n\t\t\t<mat-datepicker-toggle *ngIf=\"type == 'date'\" matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n\t\t\t<mat-datepicker #picker></mat-datepicker>\n\t\t\t<mat-error *ngIf=\"requiredError\">\n\t\t\t\t{{param.name}} is\n\t\t\t\t<strong>required</strong>\n\t\t\t</mat-error>\n\t\t</mat-form-field>\n\t\t<mat-checkbox *ngIf=\"type == 'boolean'\" tabindex=\"0\" [formControlName]=\"param.name\" style=\"top: 0;\">{{label}}</mat-checkbox>\n\t\t<div class=\"markdown\" *ngIf=\"actualComponent == 'markdown'\" fxLayout=\"column\" fxFlex>\n\t\t\t<label>{{label}}</label>\n\t\t\t<textarea tabindex=\"0\" [formControlName]=\"param.name\" simplemde=\"{spellChecker: false, toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', 'image', 'table']}\"></textarea>\n\t\t</div>\n\t</div>\n</div>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    ParamInputComponent.ctorParameters = function () { return []; };
    ParamInputComponent.propDecorators = {
        "param": [{ type: Input },],
        "disabled": [{ type: Input },],
        "form": [{ type: Input },],
        "label": [{ type: Input },],
        "showAsterisk": [{ type: Input },],
        "showCheckbox": [{ type: Input },],
        "changed": [{ type: Output },],
    };
    return ParamInputComponent;
}());
export { ParamInputComponent };
function ParamInputComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ParamInputComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ParamInputComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ParamInputComponent.propDecorators;
    /** @type {?} */
    ParamInputComponent.prototype.param;
    /** @type {?} */
    ParamInputComponent.prototype.disabled;
    /** @type {?} */
    ParamInputComponent.prototype.form;
    /** @type {?} */
    ParamInputComponent.prototype.label;
    /** @type {?} */
    ParamInputComponent.prototype.showAsterisk;
    /** @type {?} */
    ParamInputComponent.prototype.showCheckbox;
    /** @type {?} */
    ParamInputComponent.prototype.type;
    /** @type {?} */
    ParamInputComponent.prototype.actualComponent;
    /** @type {?} */
    ParamInputComponent.prototype.changed;
}

//# sourceMappingURL=data:application/json;base64,