import { IGitWorkingCopy, IGitRemote, IGitBranch, IGitHistory, IGitHistoryDetails, IGitRemoteSuccessResponse } from '@materia/interfaces';
import { App } from '../../lib';
export declare class Git {
    private app;
    client: any;
    workingCopy: IGitWorkingCopy;
    history: IGitHistory[];
    constructor(app: App);
    clone(params: {
        repoPath: string;
        destinationFolder?: string;
        localPath?: string;
        options?: any;
    }): Promise<string>;
    init(): any;
    load(): Promise<any>;
    refreshHistory(): Promise<IGitHistory[]>;
    refreshWorkingCopy(): Promise<IGitWorkingCopy>;
    refreshBranches(): Promise<IGitBranch[]>;
    private _parseBranch;
    refreshRemotes(): Promise<IGitRemote[]>;
    getStatusDiff(statusPath: string): Promise<{
        before: string;
        after: string;
    }>;
    getHistoryDetail(hash: string): Promise<IGitHistoryDetails>;
    getHistoryFileDetail(hash: any, filepath: any): Promise<{
        original: string;
        modified: string;
    }>;
    private getCommit;
    stage(statusPath: string): Promise<IGitWorkingCopy>;
    unstage(statusPath: string): Promise<IGitWorkingCopy>;
    stageAll(): Promise<IGitWorkingCopy>;
    unstageAll(): Promise<IGitWorkingCopy>;
    private refreshRemoteData;
    fetch(force?: boolean, gitState?: any): Promise<IGitRemoteSuccessResponse>;
    commit(summary: string, description?: string): Promise<IGitRemoteSuccessResponse>;
    pull(remote?: string, branch?: string): Promise<IGitRemoteSuccessResponse>;
    push(): Promise<IGitRemoteSuccessResponse>;
    publish(remote: string, branch: string): Promise<IGitRemoteSuccessResponse>;
    copyCheckout(): void;
    setupRemote(config: IGitRemote): Promise<IGitRemote[]>;
    private getLogs;
    createLocalBranch(branchName: any): any;
    checkout(arg: any): any;
    stash(): any;
    stashPop(): any;
    private _fixGitPath;
}
