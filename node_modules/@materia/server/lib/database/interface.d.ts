import { Model, BuildOptions } from 'sequelize';
import { Database } from '../database';
interface SequelizeModel extends Model {
    readonly id: number;
}
export declare type ModelStatic = typeof Model & (new (values?: object, options?: BuildOptions) => SequelizeModel);
/**
 * @class DatabaseInterface
 * @classdesc
 * Contains methods to interact with the database
 */
export declare class DatabaseInterface {
    private database;
    dialectTools: any;
    constructor(database: Database);
    hasDialect(dialect: any): boolean;
    setDialect(dialect: any): void;
    define(entity: any): ModelStatic;
    /**
    Get the tables structures in database
    @returns {Promise<object>}
    */
    showTables(): any;
    /**
    Get an array of indices for a table
    @returns {Promise<object>}
    */
    getIndices(table: any): any;
    /**
    Add a column in a table
    @param {string} - The table's name
    @param {string} - The column's name
    @param {object} - The entity's field
    @returns {Promise}
    */
    addColumn(table: any, column_name: any, field: any): any;
    /**
    Change a column structure in a table
    @param {string} - The table's name
    @param {string} - The column's name
    @param {object} - The entity's field
    @returns {Promise}
    */
    changeColumn(table: any, column_name: any, field: any): any;
    /**
    Remove a column in a table
    @param {string} - The table's name
    @param {string} - The column's name
    @returns {Promise}
    */
    removeColumn(table: any, column_name: any): any;
    /**
    Rename a column in a table
    @param {string} - The table's name
    @param {string} - The column's name
    @param {string} - The column's new name
    @returns {Promise}
    */
    renameColumn(table: any, column_name: any, column_new_name: any): any;
    /**
    Adds a constraint
    @param {string} - The table's name
    @param {string} - The constraint's object:
    `name` for named constraint, `fields` are the fields' name to add in the constraint, `type` can be "primary" or "unique"
    @returns {Promise}
    */
    addConstraint(table: any, constraint: any): any;
    /**
    Drops a constraint
    @param {string} - The table's name
    @param {string} - The constraint's object:
    `name` to drop a named constraint, `field` to drop a field from its constraints, `type` can be "primary" "unique" or "references"
    @returns {Promise}
    */
    dropConstraint(table: any, constraint: any): any;
    /**
    Change a column's type when it needs a cast.
    @param {string} - The table's name
    @param {string} - The column's name
    @param {string} - The current field type
    @param {string} - The new field type
    @returns {Promise<boolean>} - `true` if it has changed the column type, `false` otherwise.
    */
    castColumnType(table: any, column_name: any, old_type: any, type: any): any;
    authenticate(): any;
    quoteIdentifier(identifier: any): string;
    escape(val: any): string;
    columnToField(field: any): any;
    flattenField(field: any): {};
    fieldToColumn(field: any): any;
}
export {};
