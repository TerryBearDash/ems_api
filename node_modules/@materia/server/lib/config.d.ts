import { App, AppMode } from './app';
import { IAppConfig, IGitConfig, IServerConfig, IClientConfig, IPackageJson, ISessionConfig, IMateriaJson, IDatabaseConfig, IScriptsMap, IFullConfig, IEntitiesPositionConfig, IDependenciesConfig, IConfigOptions } from '@materia/interfaces';
export declare enum ConfigType {
    APP,
    SERVER,
    DATABASE,
    GIT,
    SESSION,
    CLIENT,
    DEPENDENCIES,
    SCRIPTS,
    ADDONS,
    LINKS,
    DEPLOYMENT,
    SERVICES,
    ENTITIES_POSITION
}
export declare class Config {
    private app;
    config: IFullConfig;
    clientPackageJson: IPackageJson;
    packageJson: IPackageJson;
    materiaJson: IMateriaJson;
    materiaProdJson: any;
    entitiesPosition: IEntitiesPositionConfig;
    constructor(app: App);
    reloadConfig(): void;
    /**
    Get the server configuration
    @param {string} - The environment mode. AppMode.DEVELOPMENT or AppMode.PRODUCTION.
    @returns {object}
    */
    get<T>(mode?: AppMode | string, type?: ConfigType, options?: IConfigOptions): T;
    /**
    Set the given configuration
    @param {object} - The configuration object
    @param {string} - The environment mode. `development` or `production`.
    */
    set(config: IAppConfig | IServerConfig | IDatabaseConfig | ISessionConfig | IGitConfig | IClientConfig | IDependenciesConfig | IScriptsMap, mode: AppMode | string, type?: ConfigType, options?: IConfigOptions): void;
    /**
    Delete database or client configuration
    @param {string} - The configuration type. `database` or `client`
    @param {string} - The environment mode. `dev` or `prod`.
    */
    delete(type: ConfigType, mode?: AppMode | string): void;
    save(): Promise<any>;
    /**
    Return the server's configuration
    @returns {object}
    */
    toJson(): {
        materia: any;
        materiaProd: any;
        package: any;
    };
    private loadConfigurationFiles;
    private generateUrlFromConf;
}
