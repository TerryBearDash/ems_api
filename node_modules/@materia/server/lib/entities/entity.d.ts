import { IEntityConfig, IRelation, IQuery, IField, IApplyOptions, IFieldUpdate } from '@materia/interfaces';
import { App } from '../app';
import { Addon } from '../addons/addon';
import { Field } from './field';
import { Query, IQueryConstructor } from './query';
/**
 * @class Entity
 * @classdesc
 * An entity, in a database this correspond to a table.
 */
export declare abstract class Entity {
    app: App;
    relations_queue: Array<{
        relation: IRelation;
        options: IApplyOptions;
    }>;
    queryObjects: any;
    id: string;
    name: string;
    x: number;
    y: number;
    isRelation: any;
    fields: Array<Field>;
    relations: Array<IRelation>;
    queries: Array<Query>;
    fromAddon: Addon;
    abstract model: any;
    abstract reservedQueries: string[];
    constructor(app: App, queryTypes: any);
    abstract generateDefaultQueries(): any;
    fixIsRelation(options?: IApplyOptions): Promise<void>;
    move(x: any, y: any): Promise<void>;
    create(entityobj: any, options: any): Promise<any[]>;
    loadQueries(queries: Array<IQuery>): void;
    applyRelations(): Promise<void>;
    save(): Promise<void>;
    savePosition(): Promise<any>;
    /**
    Returns a list of the relations
    @returns {Array<Relation>}
    */
    getRelations(): Array<IRelation>;
    /**
     Returns all asociated entities
     @returns {Array<Relation>}
     */
    getRelatedEntities(): Entity[];
    /**
    Returns a relation determined by a field name
    @param {string} - Entity's field name
    @returns {Relation} - BelongsTo/HasMany/HasOne relationship
    */
    getRelationByField(field: string): IRelation;
    /**
    Returns a belongsToMany relation determined by a junction table entity name
    @param {string} - BelongsToMany junction table entity's name
    @returns {Relation} - BelongsToMany relationship
    */
    getBelongsToManyRelation(entityThrough: string): IRelation;
    /**
    Determines if a relation exists
    @param {Relation} - Relation to find in the relations array.
    @returns {integer} Index of the relation in the relations array, or -1 if non existant.
    */
    getRelationIndex(relation: IRelation): number;
    getPK(): Array<Field>;
    /**
    Add a relation to the entity
    @param {Relation} - Relation's description.
    @param {object} - Action's options
    @returns {Promise}
    */
    addRelation(relation: IRelation, options?: IApplyOptions): Promise<any>;
    removeRelation(relation: IRelation, options?: IApplyOptions): Promise<any>;
    /**
    Get a field description by its name.
    @param {string} - Field's name.
    @returns {Field}
    */
    getField(name: string): Field;
    /**
    Return true if field exist
    @param {string} - Field's name
    @returns {Boolean}
    */
    isField(name: string): boolean;
    /**
    Get the entity's fields.
    @returns {Array<Field>}
    */
    getFields(): Array<Field>;
    /**
    Get the entity's writable fields.
    @returns {Array<Field>}
    */
    getWritableFields(): Array<Field>;
    /**
    Get the entity's unique fields.
    @param {string|boolean} - unique group name, or true for independent uniques fields, or false for non unique fields.
    @returns {Array<Field>}
    */
    getUniqueFields(group: string | boolean): Array<Field>;
    /**
    Get the entity's readable fields.
    @returns {Array<Field>}
    */
    getReadableFields(): Array<Field>;
    /**
    Update a field.
    @param {string} - Field's name to update
    @param {object} - New field description
    @param {object} - Action's options
    @returns {Promise<Field>}
    */
    updateField(name: string, newfield: IFieldUpdate, options?: any): Promise<Field>;
    /**
    Add a new field.
    @param {object} - New field description
    @param {integer} - Field position in list
    @param {object} - Action's options
    @returns {Promise<Field>}
    */
    addFieldAt(field: IField, at: number, options?: any): Promise<Field>;
    /**
    Add a new field. Shortcut for addFieldAt(field, *fields count*, options)
    @param {object} - New field description
    @param {object} - Action's options
    @returns {Promise<Field>}
    */
    addField(field: IField, options?: any): Promise<Field>;
    /**
    Add a new field. Shortcut for addFieldAt(field, 0, options)
    @param {object} - New field description
    @param {object} - Action's options
    @returns {Promise<Field>}
    */
    addFieldFirst(field: IField, options?: any): Promise<Field>;
    /**
    Delete a field
    @param {string} - Field's name
    @param {object} - Action's options
    @returns {Promise}
    */
    removeField(name: string, options?: any): Promise<void>;
    /**
    Return the entity's description
    @returns {object}
    */
    toJson(): IEntityConfig;
    addDefaultQuery(id: string, type: string, params: any, opts: any): Promise<Query>;
    /**
    Add a query to the entity
    @param {string} - Query's name
    @param {object} - Query's data
    @param {object} - Action's options
    */
    addQuery(query: IQuery, options?: IApplyOptions): Promise<Query>;
    getNewQuery(id: string, type: string, opts: any): IQueryConstructor;
    /**
    Delete a query
    @param {string} - Query's name
    @param {object} - Action's options
    */
    removeQuery(id: string, options?: IApplyOptions): Promise<void>;
    /**
    Get a query object
    @param {string} - Query's name
    @returns {Query}
    */
    getQuery(id: any): Query;
    refreshQueries(): void;
    /**
    Get the entity's queries
    @returns {Array<Query>}
    */
    getQueries(): Query[];
    compareIsRelation(relation: any, entity: any): boolean;
    defineQueryObjects(data: any): void;
    getQueryTypes(): string[];
    abstract loadModel(): Promise<any>;
    loadRelationsInModel(): void;
}
