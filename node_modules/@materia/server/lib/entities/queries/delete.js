"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const query_1 = require("../query");
const conditions_1 = require("./utils/conditions");
const chalk_1 = require("chalk");
class DeleteQuery extends query_1.Query {
    constructor(entity, id, opts) {
        super(entity, id);
        this.type = 'delete';
        if (!opts) {
            opts = {};
        }
        this.conditions = new conditions_1.Conditions(opts.conditions, this);
        this.discoverParams();
    }
    refresh() { }
    discoverParams() {
        this.params = [];
        this.params = this.params.concat(this.conditions.discoverParams());
    }
    run(params) {
        this.entity.app.logger.log(`${chalk_1.default.bold('(Query)')} Delete - Run ${chalk_1.default.bold(this.entity.name)}.${chalk_1.default.bold(this.id)}`);
        this.entity.app.logger.log(` └── Parameters: ${JSON.stringify(params)}\n`);
        let sequelizeCond;
        try {
            sequelizeCond = this.conditions.toSequelize(params, this.entity.name);
        }
        catch (e) {
            return this.handleBeforeActions(params, false)
                .then(() => Promise.reject(e))
                .catch(() => Promise.reject(e));
        }
        return this.handleBeforeActions(params, true)
            .then(() => this.entity.model.destroy({ where: sequelizeCond })).then(res => this.handleAfterActions(params, res, true)
            .then(() => res)
            .catch(e => res)).catch(e => this.handleAfterActions(params, null, false)
            .then(() => Promise.reject(e))
            .catch(() => Promise.reject(e)));
    }
    toJson() {
        const json = {
            id: this.id,
            type: 'delete',
            opts: {
                conditions: this.conditions.toJson()
            }
        };
        return json;
    }
}
exports.DeleteQuery = DeleteQuery;
//# sourceMappingURL=delete.js.map