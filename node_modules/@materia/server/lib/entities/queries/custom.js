"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const chalk_1 = require("chalk");
const error_1 = require("../../error");
const query_1 = require("../query");
class Model {
    constructor() {
        this.modelInstances = {};
    }
    load(name, entity) {
        const basePath = entity.fromAddon
            ? entity.fromAddon.path
            : entity.app.path;
        const modelPath = require.resolve(path.join(basePath, 'server', 'models', 'queries', name + '.js'));
        try {
            if (require.cache[modelPath]) {
                delete require.cache[modelPath];
            }
            this.modelClass = require(modelPath);
            this.modelStr = fs.readFileSync(modelPath, 'utf-8').toString();
            delete this.modelInstances[entity.name];
        }
        catch (e) {
            const err = new error_1.MateriaError('Could not load model ' + name + ' from entity ' + entity.name);
            err.originalError = e;
            throw err;
        }
    }
    instance(entity) {
        if (!this.modelInstances[entity.name]) {
            this.modelInstances[entity.name] = new this.modelClass(entity.app, entity);
        }
        return this.modelInstances[entity.name];
    }
}
exports.Model = Model;
class CustomQuery extends query_1.Query {
    constructor(entity, id, opts) {
        super(entity, id);
        this.type = 'custom';
        if (!opts || !opts.action) {
            throw new error_1.MateriaError('Missing required parameter "action"');
        }
        this.params = opts.params || [];
        this.action = opts.action;
        this.model = opts.model || entity.name.toLowerCase();
        try {
            this.refresh();
            this.discoverParams();
        }
        catch (e) {
            this.entity.app.logger.error(e);
        }
    }
    static resetModels() {
        CustomQuery.models = {};
    }
    refresh() {
        const model = this._getModel();
        model.load(this.model, this.entity);
        if (!model.modelClass.prototype[this.action]) {
            throw new error_1.MateriaError(`cannot find method ${this.action} in model queries/${this.model}.js`);
        }
    }
    discoverParams() { }
    resolveParams(params) {
        let success = true;
        for (const field of this.params) {
            try {
                query_1.QueryParamResolver.resolve({ name: field.name, value: '=' }, params);
            }
            catch (e) {
                if (field.required) {
                    success = false;
                }
            }
        }
        if (success) {
            return Promise.resolve();
        }
        else {
            return Promise.reject(new error_1.MateriaError('Missing required parameter'));
        }
    }
    _run(instance, params) {
        try {
            const res = instance[this.action](params || {});
            if (res && res.then && res.catch) {
                // promise
                return res;
            }
            else {
                return Promise.resolve(res);
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
    run(params) {
        this.entity.app.logger.log(`${chalk_1.default.bold('(Query)')} Javascript - Run ${chalk_1.default.bold(this.entity.name)}.${chalk_1.default.bold(this.id)}`);
        this.entity.app.logger.log(` └── Parameters: ${JSON.stringify(params)}\n`);
        const instance = this._getModel().instance(this.entity);
        return this.resolveParams(params)
            .catch(e => this.handleBeforeActions(params, false)
            .then(() => Promise.reject(e))
            .catch(() => Promise.reject(e))).then(() => this.handleBeforeActions(params, true)).then(() => this._run(instance, params)
            .then(res => this.handleAfterActions(params, res, true)
            .then(() => res)
            .catch(e => res))
            .catch(e => this.handleAfterActions(params, null, false)
            .then(() => Promise.reject(e))
            .catch(() => Promise.reject(e))));
    }
    toJson() {
        const opts = {
            params: this.paramsToJson(),
            action: this.action,
            model: this.entity.name.toLowerCase()
        };
        if (this.model != this.entity.name.toLowerCase()) {
            opts.model = this.model;
        }
        return {
            id: this.id,
            type: 'custom',
            opts: opts
        };
    }
    _getModel() {
        const model_prefix = this.entity.fromAddon
            ? this.entity.fromAddon.package + '/'
            : '';
        if (!CustomQuery.models[model_prefix + this.model]) {
            CustomQuery.models[model_prefix + this.model] = new Model();
        }
        return CustomQuery.models[model_prefix + this.model];
    }
}
CustomQuery.models = {};
exports.CustomQuery = CustomQuery;
//# sourceMappingURL=custom.js.map