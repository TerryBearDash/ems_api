import { IQueryParam } from '@materia/interfaces';
import { DBEntity } from './db-entity';
export declare class QueryParamResolver {
    static resolve(field: any, params: any): any;
}
export interface IQueryConstructor {
    new (entity: DBEntity, id: string, opts: any): any;
    toJson(): any;
}
export declare abstract class Query {
    entity: DBEntity;
    params: IQueryParam[];
    readonly id: string;
    constructor(entity: DBEntity, id: string);
    abstract discoverParams(): any;
    abstract refresh(): any;
    abstract toJson(): any;
    abstract run(params?: any, options?: any): Promise<any>;
    handleBeforeActions(params: any, success: boolean): Promise<any>;
    handleAfterActions(params: any, response: any, success: any): Promise<any>;
    updateOption(name: any, value: any, options: any): Promise<never>;
    hasParameters(): boolean;
    getAllParams(): Array<IQueryParam>;
    getParam(name: any): IQueryParam;
    hasRequiredParameters(): boolean;
    constructInclude(includeArray: any, includedName: any): void;
    protected paramsToJson(): any[];
}
