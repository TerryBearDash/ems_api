import { Sequelize, Options, Dialect } from 'sequelize';
import { IDatabaseConfig, ISQLDatabase, ISQLiteDatabase } from '@materia/interfaces';
import { App } from './app';
import { DatabaseInterface } from './database/interface';
/**
 * @class Database
 * @classdesc
 * Represent the connection to database
 */
export declare class Database {
    private app;
    interface: DatabaseInterface;
    disabled: boolean;
    locked: boolean;
    host: string;
    port: number;
    username: string;
    password: string;
    database: string;
    storage: string;
    type: Dialect;
    started: boolean;
    opts: Options;
    sequelize: Sequelize;
    constructor(app: App);
    static isSQL(settings: IDatabaseConfig): settings is ISQLDatabase;
    static isSQLite(settings: IDatabaseConfig): settings is ISQLiteDatabase;
    /**
    Load the database configuration
    @param {object} - *optional* The settings of the database
    @returns {object}
    */
    load(settings?: IDatabaseConfig): boolean;
    /**
    Try to connect with a custom configuration
    @param {object} - The configuration object
    @returns {Promise}
    */
    static tryDatabase(settings: IDatabaseConfig, app?: App): Promise<void>;
    /**
    Try to connect database server default database with username password
    MySQL or PostgreSQL only
    @param {object} - The configuration object
    @returns {Promise}
     */
    static tryServer(settings: IDatabaseConfig, app?: App): Promise<{}>;
    /**
    List databases in mysql or postgres instances
    MySQL and PostgreSQL only
    @param settings - The configuration object
    @returns {Promise}
     */
    static listDatabases(settings: IDatabaseConfig): Promise<{}>;
    /**
     Create new database in mysql or postgresql instances
     @param settings - The configuration object
     @param name - Name for the new database
     */
    static createDatabase(settings: any, name: any): Promise<{}>;
    tryDatabase(settings: any): Promise<void>;
    tryServer(settings: any): Promise<{}>;
    listDatabases(settings: any): Promise<{}>;
    createDatabase(settings: any, name: any): Promise<{}>;
    /**
    Connect to the database
    @returns {Promise}
    */
    start(): Promise<any>;
    /**
    Stop the database connection
    */
    stop(): Promise<void>;
    /**
    Synchronize the database with the state of the application
    @returns {Promise}
    */
    sync(): Promise<Sequelize>;
    forceSync(): Promise<Sequelize>;
}
