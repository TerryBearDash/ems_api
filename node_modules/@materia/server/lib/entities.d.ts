import { IApplyOptions } from '@materia/interfaces';
import { App } from './app';
import { Addon } from './addons/addon';
import { Entity } from './entities/entity';
import { VirtualEntity } from './entities/virtual-entity';
/**
 * @class Entities
 * @classdesc
 * Entity manager. This class is relative to all the entities of an app.
 */
export declare class Entities {
    app: App;
    entities: {
        [name: string]: Entity | VirtualEntity;
    };
    entitiesJson: {
        [path: string]: Array<any>;
    };
    constructor(app: App);
    clear(): void;
    cleanFiles(): void;
    loadFiles(addon?: Addon): Promise<any>;
    loadEntities(addon?: Addon): Promise<Entity[]>;
    loadQueries(addon?: Addon): Promise<void>;
    loadRelations(): Promise<any>;
    start(): Promise<any>;
    /**
    Add a new virtual entity
    @param {object} - Entity description
    @param {object} - Action's options
    @returns {Promise<Entity>}
    */
    addVirtual(entityobj: any, options?: any): Promise<any>;
    /**
    Add a new entity
    @param {object} - Entity description
    @param {object} - Action's options
    @returns {Promise<Entity>}
    */
    add(entityobj: any, options?: any): Promise<Entity>;
    detect_rename(): Promise<any>;
    /**
    Delete an entity.
    @param {string} - Entity's name
    @param {object} - Action's options
    @returns {Promise}
    */
    remove(name: string, options?: IApplyOptions): Promise<any>;
    /**
    Rename an entity
    @param {string} - Entity's name (old name)
    @param {string} - Entity's new name
    @param {object} - Action's options
    @returns {Promise}
    */
    rename(name: string, new_name: string, options?: any): Promise<any>;
    /**
    Returns a list of the entities
    @returns {Array<Entity>}
    */
    findAll(): any[];
    /**
    Returns an entity be specifying its name
    @param {string} - Entity's name
    @returns {Entity}
    */
    get(name: any): Entity;
    /**
    Returns an entity be specifying its name, or create it with its description
    @param {string} - Entity's name
    @param {string} - Entity's description
    @param {string} - Action's options
    @returns {Entity}
    */
    getOrAdd(name: any, entityobj: any, options: any): Promise<Entity>;
    save(): Promise<void>;
    sync(): Promise<void>;
    findAllRelations(opts: any): any[];
    getModels(addon?: Addon): string[];
    resetModels(): void;
    private _save_id_map;
}
