"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WS = require("ws");
const url = require("url");
class WebsocketInstance {
    constructor(verifyClient) {
        this.instance = new WS.Server({
            noServer: true,
            verifyClient: (info, cb) => {
                if (verifyClient) {
                    return verifyClient(info, cb);
                }
                else {
                    return cb(true);
                }
            }
        });
    }
    broadcast(data) {
        return this.instance
            .clients
            .forEach(client => {
            if (client.readyState == WS.OPEN) {
                client.send(JSON.stringify(data, null, 2));
            }
        });
    }
}
exports.WebsocketInstance = WebsocketInstance;
class WebsocketServers {
    constructor(app) {
        this.app = app;
        this.servers = {};
        this.app.server.server.on('upgrade', (request, socket, head) => {
            const urlParsed = url.parse(request.url);
            const pathname = urlParsed.pathname;
            if (this.servers[pathname] && this.servers[pathname].instance) {
                this.servers[pathname].instance.handleUpgrade(request, socket, head, ws => {
                    this.servers[pathname].instance.emit('connection', ws, request);
                });
            }
        });
    }
    get(endpoint) {
        return this.servers[endpoint];
    }
    register(endpoint, verifyClient) {
        this.servers[endpoint] = new WebsocketInstance(verifyClient);
        return this.servers[endpoint];
    }
    close() {
        Object.keys(this.servers).forEach(path => {
            this.servers[path].instance.clients.forEach(client => client.terminate());
        });
    }
}
exports.WebsocketServers = WebsocketServers;
//# sourceMappingURL=websocket.js.map