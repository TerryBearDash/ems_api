/// <reference types="node" />
import { IAddonsConfig } from '@materia/interfaces';
import { App } from './app';
import { Addon } from './addons/addon';
/**
 * @class Addons
 * @classdesc
 * This class is used to manage your addons in a materia app.
 */
export declare class Addons {
    private app;
    addons: Addon[];
    addonsObj: any;
    addonsConfig: IAddonsConfig;
    constructor(app: App);
    /**
    Unload an addon by its name
    @returns void
    */
    unload(pkg: string): void;
    /**
     * Search if whether or not an addon is installed by its package name. It returns promise with a boolean value.
     * @returns Promise<boolean>
     */
    isInstalled(pkg: string): Promise<boolean>;
    setupModule(setup: (require: NodeRequire) => Promise<any>): Promise<any>;
    /**
     * Search installed addons in the current application. It returns an array of addon package name.
     * @returns Promise<string[]>
     */
    searchInstalledAddons(): Promise<Array<string>>;
    loadConfig(): IAddonsConfig;
    /**
    Load all addons in the `addons/` directory
    @returns Promise<void>
    */
    loadAddons(): Promise<void>;
    setConfig(pkg: string, config: any): Promise<any>;
    start(): Promise<void>;
    /**
    Get all the registered filters' name
    @returns {Array<object>}
    */
    findAll(): Addon[];
    /**
    Get a plugin object
    @param {string} - Addon's name
    @returns {object}
    */
    get(pkg: string): Addon;
    /**
    Get the registered addons count
    @returns {integer}
    */
    getLength(): number;
    loadFiles(): Promise<any>;
    handleHook(name: string): Promise<any>;
    loadEntities(): Promise<any>;
    loadQueries(): Promise<void>;
    loadActions(): Promise<void>;
    loadAPI(): Promise<void>;
    private _isPromise;
}
