import * as express from 'express';
import { IAddon, IEndpoint, IApplyOptions } from '@materia/interfaces';
import { Endpoint } from './api/endpoint';
import { Permissions } from './api/permissions';
import { App } from './app';
/**
 * @class Api
 * @classdesc
 * This class is used to set the endpoints on the server
 * @property {Permissions} permissions - The access to the permission filters
 */
export declare class Api {
    private app;
    endpoints: Endpoint[];
    permissions: Permissions;
    router: express.Router;
    constructor(app: App);
    /**
    Check if an endpoint is registered
    @param {object} - Endpoint's description. must contain at leat `method` and `url`
    @returns {boolean}
    */
    exists(endpoint: IEndpoint): boolean;
    /**
    Add an endpoint to the server. This will replace any registered endpoint matching the `url` and `method`.
    @param {object} - Endpoint's description
    @param {object} - Action's options
    */
    add(endpoint: IEndpoint, options?: IApplyOptions): void;
    /**
    Replace an endpoint at the `pos` index in the endpoints' array.
    @param {object} - Endpoint's description
    @param {integer} - Position in the array
    @param {object} - Action's options
    */
    put(endpoint: IEndpoint, pos: any, options: IApplyOptions): void;
    /**
    Remove a registered endpoint.
    @param {string} - HTTP method. `get`, `post`, `put` or `delete`
    @param {string} - HTTP url relative to the API base.
    @param {object} - Action's options
    */
    remove(method: string, url: string, options?: IApplyOptions): void;
    /**
    Remove all registered endpoint.
    @param {object} - Action's options
    */
    removeAll(options?: IApplyOptions): void;
    /**
    Get a registered endpoint.
    @param {string} - HTTP method. `get`, `post`, `put` or `delete`
    @param {string} - HTTP url relative to the API base.
    @returns {Endpoint}
    */
    get(method: string, url: string): Endpoint;
    /**
    Get all endpoints
    @returns {Array<Endpoint>}
    */
    findAll(): Endpoint[];
    load(addon?: IAddon): Promise<any>;
    getMethodColor(method: any): string;
    updateEndpointHttp(endpoint: any): void;
    updateEndpointWS(endpoint: any): void;
    updateEndpoints(): void;
    resetControllers(): void;
    registerEndpoints(): void;
    /**
    Get the endpoints array in the `api.json` format
    @returns {Array<object>}
    */
    toJson(opts?: IApplyOptions): any[];
    save(opts?: IApplyOptions): void;
    getControllers(): string[];
}
