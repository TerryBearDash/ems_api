"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const which = require("which");
const path_1 = require("path");
const npm_1 = require("./package-manager/npm");
const yarn_1 = require("./package-manager/yarn");
class PackageManager {
    constructor(basepath) {
        this.basepath = basepath;
        this.managerName = this.getPackageManagerName();
        this.nodeModuleManager = this.managerName === 'yarn' ? new yarn_1.Yarn(this.basepath) : new npm_1.Npm(this.basepath);
    }
    runScriptInBackground(scriptName, cwd) {
        if (this.managerName === 'yarn') {
            return this.nodeModuleManager.execInBackground('run', [scriptName], cwd ? cwd : this.basepath);
        }
        else {
            return this.nodeModuleManager.execInBackground('run-script', [scriptName], cwd ? cwd : this.basepath);
        }
    }
    runScript(scriptName, cwd, stream) {
        if (this.managerName === 'yarn') {
            return this.nodeModuleManager.exec('run', [scriptName], cwd ? cwd : this.basepath, stream);
        }
        else {
            return this.nodeModuleManager.exec('run-script', [scriptName], cwd ? cwd : this.basepath, stream);
        }
    }
    uninstall(packageName, stream) {
        if (this.managerName === 'yarn') {
            return this.nodeModuleManager.exec('remove', [packageName], this.basepath, stream);
        }
        else {
            return this.nodeModuleManager.exec('uninstall', [packageName, '--save'], this.basepath, stream);
        }
    }
    upgrade(packageName, stream) {
        if (this.managerName === 'yarn') {
            return this.nodeModuleManager.exec('upgrade', [packageName], this.basepath, stream);
        }
        else {
            return this.nodeModuleManager.exec('upgrade', [packageName, '--save'], this.basepath, stream);
        }
    }
    install(packageName, stream) {
        if (this.managerName === 'yarn') {
            return this.nodeModuleManager.exec('add', [packageName], this.basepath, stream);
        }
        else {
            return this.nodeModuleManager.exec('install', [packageName, '--save'], this.basepath, stream);
        }
    }
    installAll(stream) {
        return this.nodeModuleManager.exec('install', [], this.basepath, stream);
    }
    installAllInBackground(cwd) {
        return this.nodeModuleManager.execInBackground('install', [], cwd ? cwd : this.basepath);
    }
    getPackageManagerName() {
        if (fs_1.existsSync(path_1.join(this.basepath, 'yarn.lock')) && which.sync('yarn', { nothrow: true })) {
            return 'yarn';
        }
        return 'npm';
    }
    getPackageJson() {
        return new Promise((resolve, reject) => {
            const path = path_1.join(this.basepath, 'package.json');
            fs_1.readFile(path, 'utf-8', (err, data) => {
                if (err) {
                    return reject(err);
                }
                resolve(JSON.parse(data));
            });
        });
    }
    getDependencies() {
        return this.getPackageJson().then(packageJson => packageJson.dependencies);
    }
    getDevdependencies() {
        return this.getPackageJson().then(packageJson => packageJson.devDependencies);
    }
    getScripts() {
        return this.getPackageJson().then(packageJson => packageJson.scripts);
    }
    hasNodeModules() {
        return fs_1.existsSync(path_1.join(this.basepath, 'node_modules'));
    }
}
exports.PackageManager = PackageManager;
//# sourceMappingURL=package-manager.js.map