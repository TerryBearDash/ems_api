"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chokidar = require("chokidar");
const chalk_1 = require("chalk");
const app_1 = require("./app");
var WatcherEventType;
(function (WatcherEventType) {
    WatcherEventType[WatcherEventType["INIT"] = 0] = "INIT";
    WatcherEventType[WatcherEventType["ADD"] = 1] = "ADD";
    WatcherEventType[WatcherEventType["REMOVE"] = 2] = "REMOVE";
    WatcherEventType[WatcherEventType["CHANGE"] = 3] = "CHANGE";
    WatcherEventType[WatcherEventType["REFRESH_TREE"] = 4] = "REFRESH_TREE";
    WatcherEventType[WatcherEventType["UNLINK"] = 5] = "UNLINK";
})(WatcherEventType = exports.WatcherEventType || (exports.WatcherEventType = {}));
class Watcher {
    constructor(app) {
        this.app = app;
        this.disabled = false;
    }
    enable() {
        setTimeout(() => {
            this.disabled = false;
        }, 200);
    }
    disable() {
        this.disabled = true;
    }
    load() {
        if (this.app.mode === app_1.AppMode.DEVELOPMENT) {
            this.watch(['*.json', 'server/**/*.json'], (p, type) => {
                if (!this.disabled) {
                    this.app.logger.log(` └── ${type}: ${p}`);
                    this.app.materiaApi.websocket.broadcast({ type, path: p });
                }
            });
        }
    }
    watch(path, callback) {
        this.dispose();
        this.watcherListeners = {};
        this.watchCallback = callback;
        this._watchChokidar(path);
    }
    dispose() {
        if (this.chokidarWatcher) {
            this.chokidarWatcher.removeListener('add', this._addEvent);
            this.chokidarWatcher.removeListener('change', this._changeEvent);
            this.chokidarWatcher.removeListener('unlink', this._unlinkEvent);
            this.chokidarWatcher.close();
            this.chokidarWatcher = null;
        }
        return Promise.resolve();
    }
    _watchChokidar(watchPath) {
        const watcher = chokidar.watch(watchPath, {
            ignoreInitial: true,
            ignorePermissionErrors: true,
            followSymlinks: true,
            interval: 1000,
            binaryInterval: 1000,
            cwd: this.app.path,
            useFsEvents: true
        });
        this.chokidarWatcher = watcher;
        // if (process.platform === 'darwin' && ! watcher.options.useFsEvents) {
        // this.app.logger.log(` └── Watchers: ${chalk.bold.red('WARNING')}`);
        // this.app.logger.error(
        // new Error('Watcher is not using native fsevents library and is falling back to unefficient polling.')
        // );
        // } else {
        this.app.logger.log(` └── Watchers: ${chalk_1.default.bold.green('OK')}`);
        // }
        watcher.on('add', this._addEvent.bind(this));
        watcher.on('addDir', this._addEvent.bind(this));
        watcher.on('change', this._changeEvent.bind(this));
        watcher.on('unlink', this._unlinkEvent.bind(this));
        watcher.on('unlinkDir', this._unlinkEvent.bind(this));
    }
    _eventCallback(filePath, type) {
        if (filePath == '') {
            return;
        }
        this.watchCallback(filePath, type);
    }
    _addEvent(filePath) {
        this._eventCallback(filePath, 'add');
    }
    _changeEvent(filePath) {
        if (/.*\.sqlite/.test(filePath)) {
            return;
        }
        this._eventCallback(filePath, 'change');
    }
    _unlinkEvent(filePath) {
        this._eventCallback(filePath, 'unlink');
    }
}
exports.Watcher = Watcher;
//# sourceMappingURL=watcher.js.map