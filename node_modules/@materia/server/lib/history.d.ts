import { IMigration, IHistoryActions, IActionData } from '@materia/interfaces';
import { App } from './app';
/**
 * Default action types
 * @readonly
 * @enum {string}
 */
export declare const MigrationType: {
    CREATE_ENTITY: string;
    RENAME_ENTITY: string;
    DELETE_ENTITY: string;
    ADD_FIELD: string;
    CHANGE_FIELD: string;
    DELETE_FIELD: string;
    ADD_RELATION: string;
    DELETE_RELATION: string;
    ADD_QUERY: string;
    DELETE_QUERY: string;
    UPDATE_QUERY: string;
    ADD_ENDPOINT: string;
    DELETE_ENDPOINT: string;
    UPDATE_ENDPOINT: string;
};
/**
 * @class History
 * @classdesc
 * Used to store the last actions and undo / redo these actions.
 */
export declare class History {
    private app;
    action: any;
    diff: Array<IMigration>;
    diffRedo: Array<IMigration>;
    actions: IHistoryActions;
    constructor(app: App);
    cleanStacks(): void;
    load(): void;
    /**
    Push an action in the history
    @param {object} - Redo action object
    @param {object} - Undo action object
    */
    push(redo: any, undo: any): void;
    /**
    Register a type of action
    @param {string} - Type name
    @param {function} - Action's function
    */
    register(type: any, action: (data: IActionData, opts: any) => Promise<any>): void;
    /**
    Is action(s) available in undo stack
    @returns {boolean}
    */
    undoable(): boolean;
    /**
    Is action(s) available in redo stack
    @returns {boolean}
    */
    redoable(): boolean;
    /**
    Get the actions available in undo stack
    @returns {Array}
    */
    getUndoStack(): IMigration[];
    /**
    Get the actions available in redo stack
    @returns {Array}
    */
    getRedoStack(): IMigration[];
    /**
    Undo the last action
    @param {object} - Action's options
    @returns {Promise<object>} the action applied
    */
    undo(opts: any): any;
    /**
    Redo the last cancelled action
    @param {object} - Action's options
    @returns {Promise<object>} the action applied
    */
    redo(opts: any): Promise<any>;
    /**
    Clear the history
    */
    clear(): void;
    /**
    Revert actions from a diff array
    @param {Array<object>} - The diffs list
    @param {object} - Action's options
    @returns {Promise<Array>} the applied actions
    */
    revert(diffs: any, opts: any): Promise<IActionData[]>;
    /**
    Apply actions from a diff array
    @param {Array<object>} - The diffs list
    @param {object} - Action's options
    @returns {Promise<Array>} the applied actions
    */
    apply(diffs: any, opts: any): Promise<IActionData[]>;
}
